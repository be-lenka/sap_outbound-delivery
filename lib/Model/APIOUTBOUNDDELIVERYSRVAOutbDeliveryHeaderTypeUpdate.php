<?php
/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_OutbDeliveryHeaderType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actual_goods_movement_date' => 'string',
        'bill_of_lading' => 'string',
        'delivery_block_reason' => 'string',
        'delivery_date' => 'string',
        'delivery_document_by_supplier' => 'string',
        'delivery_priority' => 'string',
        'delivery_time' => 'string',
        'goods_issue_time' => 'string',
        'header_gross_weight' => 'float',
        'header_net_weight' => 'float',
        'header_volume' => 'float',
        'header_volume_unit' => 'string',
        'header_weight_unit' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'loading_date' => 'string',
        'loading_time' => 'string',
        'means_of_transport' => 'string',
        'means_of_transport_type' => 'string',
        'picking_date' => 'string',
        'picking_time' => 'string',
        'planned_goods_issue_date' => 'string',
        'proposed_delivery_route' => 'string',
        'transportation_planning_date' => 'string',
        'transportation_planning_time' => 'string',
        'unloading_point_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actual_goods_movement_date' => null,
        'bill_of_lading' => null,
        'delivery_block_reason' => null,
        'delivery_date' => null,
        'delivery_document_by_supplier' => null,
        'delivery_priority' => null,
        'delivery_time' => null,
        'goods_issue_time' => null,
        'header_gross_weight' => 'decimal',
        'header_net_weight' => 'decimal',
        'header_volume' => 'decimal',
        'header_volume_unit' => null,
        'header_weight_unit' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'loading_date' => null,
        'loading_time' => null,
        'means_of_transport' => null,
        'means_of_transport_type' => null,
        'picking_date' => null,
        'picking_time' => null,
        'planned_goods_issue_date' => null,
        'proposed_delivery_route' => null,
        'transportation_planning_date' => null,
        'transportation_planning_time' => null,
        'unloading_point_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actual_goods_movement_date' => true,
		'bill_of_lading' => true,
		'delivery_block_reason' => true,
		'delivery_date' => true,
		'delivery_document_by_supplier' => true,
		'delivery_priority' => true,
		'delivery_time' => true,
		'goods_issue_time' => true,
		'header_gross_weight' => true,
		'header_net_weight' => true,
		'header_volume' => true,
		'header_volume_unit' => true,
		'header_weight_unit' => true,
		'incoterms_classification' => true,
		'incoterms_transfer_location' => true,
		'loading_date' => true,
		'loading_time' => true,
		'means_of_transport' => true,
		'means_of_transport_type' => true,
		'picking_date' => true,
		'picking_time' => true,
		'planned_goods_issue_date' => true,
		'proposed_delivery_route' => true,
		'transportation_planning_date' => true,
		'transportation_planning_time' => true,
		'unloading_point_name' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_goods_movement_date' => 'ActualGoodsMovementDate',
        'bill_of_lading' => 'BillOfLading',
        'delivery_block_reason' => 'DeliveryBlockReason',
        'delivery_date' => 'DeliveryDate',
        'delivery_document_by_supplier' => 'DeliveryDocumentBySupplier',
        'delivery_priority' => 'DeliveryPriority',
        'delivery_time' => 'DeliveryTime',
        'goods_issue_time' => 'GoodsIssueTime',
        'header_gross_weight' => 'HeaderGrossWeight',
        'header_net_weight' => 'HeaderNetWeight',
        'header_volume' => 'HeaderVolume',
        'header_volume_unit' => 'HeaderVolumeUnit',
        'header_weight_unit' => 'HeaderWeightUnit',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'loading_date' => 'LoadingDate',
        'loading_time' => 'LoadingTime',
        'means_of_transport' => 'MeansOfTransport',
        'means_of_transport_type' => 'MeansOfTransportType',
        'picking_date' => 'PickingDate',
        'picking_time' => 'PickingTime',
        'planned_goods_issue_date' => 'PlannedGoodsIssueDate',
        'proposed_delivery_route' => 'ProposedDeliveryRoute',
        'transportation_planning_date' => 'TransportationPlanningDate',
        'transportation_planning_time' => 'TransportationPlanningTime',
        'unloading_point_name' => 'UnloadingPointName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_goods_movement_date' => 'setActualGoodsMovementDate',
        'bill_of_lading' => 'setBillOfLading',
        'delivery_block_reason' => 'setDeliveryBlockReason',
        'delivery_date' => 'setDeliveryDate',
        'delivery_document_by_supplier' => 'setDeliveryDocumentBySupplier',
        'delivery_priority' => 'setDeliveryPriority',
        'delivery_time' => 'setDeliveryTime',
        'goods_issue_time' => 'setGoodsIssueTime',
        'header_gross_weight' => 'setHeaderGrossWeight',
        'header_net_weight' => 'setHeaderNetWeight',
        'header_volume' => 'setHeaderVolume',
        'header_volume_unit' => 'setHeaderVolumeUnit',
        'header_weight_unit' => 'setHeaderWeightUnit',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'loading_date' => 'setLoadingDate',
        'loading_time' => 'setLoadingTime',
        'means_of_transport' => 'setMeansOfTransport',
        'means_of_transport_type' => 'setMeansOfTransportType',
        'picking_date' => 'setPickingDate',
        'picking_time' => 'setPickingTime',
        'planned_goods_issue_date' => 'setPlannedGoodsIssueDate',
        'proposed_delivery_route' => 'setProposedDeliveryRoute',
        'transportation_planning_date' => 'setTransportationPlanningDate',
        'transportation_planning_time' => 'setTransportationPlanningTime',
        'unloading_point_name' => 'setUnloadingPointName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_goods_movement_date' => 'getActualGoodsMovementDate',
        'bill_of_lading' => 'getBillOfLading',
        'delivery_block_reason' => 'getDeliveryBlockReason',
        'delivery_date' => 'getDeliveryDate',
        'delivery_document_by_supplier' => 'getDeliveryDocumentBySupplier',
        'delivery_priority' => 'getDeliveryPriority',
        'delivery_time' => 'getDeliveryTime',
        'goods_issue_time' => 'getGoodsIssueTime',
        'header_gross_weight' => 'getHeaderGrossWeight',
        'header_net_weight' => 'getHeaderNetWeight',
        'header_volume' => 'getHeaderVolume',
        'header_volume_unit' => 'getHeaderVolumeUnit',
        'header_weight_unit' => 'getHeaderWeightUnit',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'loading_date' => 'getLoadingDate',
        'loading_time' => 'getLoadingTime',
        'means_of_transport' => 'getMeansOfTransport',
        'means_of_transport_type' => 'getMeansOfTransportType',
        'picking_date' => 'getPickingDate',
        'picking_time' => 'getPickingTime',
        'planned_goods_issue_date' => 'getPlannedGoodsIssueDate',
        'proposed_delivery_route' => 'getProposedDeliveryRoute',
        'transportation_planning_date' => 'getTransportationPlanningDate',
        'transportation_planning_time' => 'getTransportationPlanningTime',
        'unloading_point_name' => 'getUnloadingPointName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('actual_goods_movement_date', $data ?? [], null);
        $this->setIfExists('bill_of_lading', $data ?? [], null);
        $this->setIfExists('delivery_block_reason', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('delivery_document_by_supplier', $data ?? [], null);
        $this->setIfExists('delivery_priority', $data ?? [], null);
        $this->setIfExists('delivery_time', $data ?? [], null);
        $this->setIfExists('goods_issue_time', $data ?? [], null);
        $this->setIfExists('header_gross_weight', $data ?? [], null);
        $this->setIfExists('header_net_weight', $data ?? [], null);
        $this->setIfExists('header_volume', $data ?? [], null);
        $this->setIfExists('header_volume_unit', $data ?? [], null);
        $this->setIfExists('header_weight_unit', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('loading_date', $data ?? [], null);
        $this->setIfExists('loading_time', $data ?? [], null);
        $this->setIfExists('means_of_transport', $data ?? [], null);
        $this->setIfExists('means_of_transport_type', $data ?? [], null);
        $this->setIfExists('picking_date', $data ?? [], null);
        $this->setIfExists('picking_time', $data ?? [], null);
        $this->setIfExists('planned_goods_issue_date', $data ?? [], null);
        $this->setIfExists('proposed_delivery_route', $data ?? [], null);
        $this->setIfExists('transportation_planning_date', $data ?? [], null);
        $this->setIfExists('transportation_planning_time', $data ?? [], null);
        $this->setIfExists('unloading_point_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bill_of_lading']) && (mb_strlen($this->container['bill_of_lading']) > 35)) {
            $invalidProperties[] = "invalid value for 'bill_of_lading', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['delivery_block_reason']) && (mb_strlen($this->container['delivery_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_document_by_supplier']) && (mb_strlen($this->container['delivery_document_by_supplier']) > 35)) {
            $invalidProperties[] = "invalid value for 'delivery_document_by_supplier', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['delivery_priority']) && (mb_strlen($this->container['delivery_priority']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_priority', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['header_volume_unit']) && (mb_strlen($this->container['header_volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'header_volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['header_weight_unit']) && (mb_strlen($this->container['header_weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'header_weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['means_of_transport']) && (mb_strlen($this->container['means_of_transport']) > 20)) {
            $invalidProperties[] = "invalid value for 'means_of_transport', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['means_of_transport_type']) && (mb_strlen($this->container['means_of_transport_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'means_of_transport_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['proposed_delivery_route']) && (mb_strlen($this->container['proposed_delivery_route']) > 6)) {
            $invalidProperties[] = "invalid value for 'proposed_delivery_route', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['unloading_point_name']) && (mb_strlen($this->container['unloading_point_name']) > 25)) {
            $invalidProperties[] = "invalid value for 'unloading_point_name', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_goods_movement_date
     *
     * @return string|null
     */
    public function getActualGoodsMovementDate()
    {
        return $this->container['actual_goods_movement_date'];
    }

    /**
     * Sets actual_goods_movement_date
     *
     * @param string|null $actual_goods_movement_date actual_goods_movement_date
     *
     * @return self
     */
    public function setActualGoodsMovementDate($actual_goods_movement_date)
    {
        if (is_null($actual_goods_movement_date)) {
            array_push($this->openAPINullablesSetToNull, 'actual_goods_movement_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_goods_movement_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['actual_goods_movement_date'] = $actual_goods_movement_date;

        return $this;
    }

    /**
     * Gets bill_of_lading
     *
     * @return string|null
     */
    public function getBillOfLading()
    {
        return $this->container['bill_of_lading'];
    }

    /**
     * Sets bill_of_lading
     *
     * @param string|null $bill_of_lading bill_of_lading
     *
     * @return self
     */
    public function setBillOfLading($bill_of_lading)
    {
        if (is_null($bill_of_lading)) {
            array_push($this->openAPINullablesSetToNull, 'bill_of_lading');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_of_lading', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bill_of_lading) && (mb_strlen($bill_of_lading) > 35)) {
            throw new \InvalidArgumentException('invalid length for $bill_of_lading when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 35.');
        }

        $this->container['bill_of_lading'] = $bill_of_lading;

        return $this;
    }

    /**
     * Gets delivery_block_reason
     *
     * @return string|null
     */
    public function getDeliveryBlockReason()
    {
        return $this->container['delivery_block_reason'];
    }

    /**
     * Sets delivery_block_reason
     *
     * @param string|null $delivery_block_reason delivery_block_reason
     *
     * @return self
     */
    public function setDeliveryBlockReason($delivery_block_reason)
    {
        if (is_null($delivery_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_block_reason) && (mb_strlen($delivery_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_block_reason when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['delivery_block_reason'] = $delivery_block_reason;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string|null $delivery_date delivery_date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets delivery_document_by_supplier
     *
     * @return string|null
     */
    public function getDeliveryDocumentBySupplier()
    {
        return $this->container['delivery_document_by_supplier'];
    }

    /**
     * Sets delivery_document_by_supplier
     *
     * @param string|null $delivery_document_by_supplier delivery_document_by_supplier
     *
     * @return self
     */
    public function setDeliveryDocumentBySupplier($delivery_document_by_supplier)
    {
        if (is_null($delivery_document_by_supplier)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_document_by_supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_document_by_supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_document_by_supplier) && (mb_strlen($delivery_document_by_supplier) > 35)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document_by_supplier when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 35.');
        }

        $this->container['delivery_document_by_supplier'] = $delivery_document_by_supplier;

        return $this;
    }

    /**
     * Gets delivery_priority
     *
     * @return string|null
     */
    public function getDeliveryPriority()
    {
        return $this->container['delivery_priority'];
    }

    /**
     * Sets delivery_priority
     *
     * @param string|null $delivery_priority delivery_priority
     *
     * @return self
     */
    public function setDeliveryPriority($delivery_priority)
    {
        if (is_null($delivery_priority)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_priority) && (mb_strlen($delivery_priority) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_priority when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['delivery_priority'] = $delivery_priority;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return string|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param string|null $delivery_time delivery_time
     *
     * @return self
     */
    public function setDeliveryTime($delivery_time)
    {
        if (is_null($delivery_time)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets goods_issue_time
     *
     * @return string|null
     */
    public function getGoodsIssueTime()
    {
        return $this->container['goods_issue_time'];
    }

    /**
     * Sets goods_issue_time
     *
     * @param string|null $goods_issue_time goods_issue_time
     *
     * @return self
     */
    public function setGoodsIssueTime($goods_issue_time)
    {
        if (is_null($goods_issue_time)) {
            array_push($this->openAPINullablesSetToNull, 'goods_issue_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_issue_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['goods_issue_time'] = $goods_issue_time;

        return $this;
    }

    /**
     * Gets header_gross_weight
     *
     * @return float|null
     */
    public function getHeaderGrossWeight()
    {
        return $this->container['header_gross_weight'];
    }

    /**
     * Sets header_gross_weight
     *
     * @param float|null $header_gross_weight header_gross_weight
     *
     * @return self
     */
    public function setHeaderGrossWeight($header_gross_weight)
    {
        if (is_null($header_gross_weight)) {
            array_push($this->openAPINullablesSetToNull, 'header_gross_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_gross_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['header_gross_weight'] = $header_gross_weight;

        return $this;
    }

    /**
     * Gets header_net_weight
     *
     * @return float|null
     */
    public function getHeaderNetWeight()
    {
        return $this->container['header_net_weight'];
    }

    /**
     * Sets header_net_weight
     *
     * @param float|null $header_net_weight header_net_weight
     *
     * @return self
     */
    public function setHeaderNetWeight($header_net_weight)
    {
        if (is_null($header_net_weight)) {
            array_push($this->openAPINullablesSetToNull, 'header_net_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_net_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['header_net_weight'] = $header_net_weight;

        return $this;
    }

    /**
     * Gets header_volume
     *
     * @return float|null
     */
    public function getHeaderVolume()
    {
        return $this->container['header_volume'];
    }

    /**
     * Sets header_volume
     *
     * @param float|null $header_volume header_volume
     *
     * @return self
     */
    public function setHeaderVolume($header_volume)
    {
        if (is_null($header_volume)) {
            array_push($this->openAPINullablesSetToNull, 'header_volume');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_volume', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['header_volume'] = $header_volume;

        return $this;
    }

    /**
     * Gets header_volume_unit
     *
     * @return string|null
     */
    public function getHeaderVolumeUnit()
    {
        return $this->container['header_volume_unit'];
    }

    /**
     * Sets header_volume_unit
     *
     * @param string|null $header_volume_unit header_volume_unit
     *
     * @return self
     */
    public function setHeaderVolumeUnit($header_volume_unit)
    {
        if (is_null($header_volume_unit)) {
            array_push($this->openAPINullablesSetToNull, 'header_volume_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_volume_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_volume_unit) && (mb_strlen($header_volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $header_volume_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['header_volume_unit'] = $header_volume_unit;

        return $this;
    }

    /**
     * Gets header_weight_unit
     *
     * @return string|null
     */
    public function getHeaderWeightUnit()
    {
        return $this->container['header_weight_unit'];
    }

    /**
     * Sets header_weight_unit
     *
     * @param string|null $header_weight_unit header_weight_unit
     *
     * @return self
     */
    public function setHeaderWeightUnit($header_weight_unit)
    {
        if (is_null($header_weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'header_weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_weight_unit) && (mb_strlen($header_weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $header_weight_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['header_weight_unit'] = $header_weight_unit;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification incoterms_classification
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets loading_date
     *
     * @return string|null
     */
    public function getLoadingDate()
    {
        return $this->container['loading_date'];
    }

    /**
     * Sets loading_date
     *
     * @param string|null $loading_date loading_date
     *
     * @return self
     */
    public function setLoadingDate($loading_date)
    {
        if (is_null($loading_date)) {
            array_push($this->openAPINullablesSetToNull, 'loading_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loading_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loading_date'] = $loading_date;

        return $this;
    }

    /**
     * Gets loading_time
     *
     * @return string|null
     */
    public function getLoadingTime()
    {
        return $this->container['loading_time'];
    }

    /**
     * Sets loading_time
     *
     * @param string|null $loading_time loading_time
     *
     * @return self
     */
    public function setLoadingTime($loading_time)
    {
        if (is_null($loading_time)) {
            array_push($this->openAPINullablesSetToNull, 'loading_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loading_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loading_time'] = $loading_time;

        return $this;
    }

    /**
     * Gets means_of_transport
     *
     * @return string|null
     */
    public function getMeansOfTransport()
    {
        return $this->container['means_of_transport'];
    }

    /**
     * Sets means_of_transport
     *
     * @param string|null $means_of_transport means_of_transport
     *
     * @return self
     */
    public function setMeansOfTransport($means_of_transport)
    {
        if (is_null($means_of_transport)) {
            array_push($this->openAPINullablesSetToNull, 'means_of_transport');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('means_of_transport', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($means_of_transport) && (mb_strlen($means_of_transport) > 20)) {
            throw new \InvalidArgumentException('invalid length for $means_of_transport when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 20.');
        }

        $this->container['means_of_transport'] = $means_of_transport;

        return $this;
    }

    /**
     * Gets means_of_transport_type
     *
     * @return string|null
     */
    public function getMeansOfTransportType()
    {
        return $this->container['means_of_transport_type'];
    }

    /**
     * Sets means_of_transport_type
     *
     * @param string|null $means_of_transport_type means_of_transport_type
     *
     * @return self
     */
    public function setMeansOfTransportType($means_of_transport_type)
    {
        if (is_null($means_of_transport_type)) {
            array_push($this->openAPINullablesSetToNull, 'means_of_transport_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('means_of_transport_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($means_of_transport_type) && (mb_strlen($means_of_transport_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $means_of_transport_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['means_of_transport_type'] = $means_of_transport_type;

        return $this;
    }

    /**
     * Gets picking_date
     *
     * @return string|null
     */
    public function getPickingDate()
    {
        return $this->container['picking_date'];
    }

    /**
     * Sets picking_date
     *
     * @param string|null $picking_date picking_date
     *
     * @return self
     */
    public function setPickingDate($picking_date)
    {
        if (is_null($picking_date)) {
            array_push($this->openAPINullablesSetToNull, 'picking_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picking_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['picking_date'] = $picking_date;

        return $this;
    }

    /**
     * Gets picking_time
     *
     * @return string|null
     */
    public function getPickingTime()
    {
        return $this->container['picking_time'];
    }

    /**
     * Sets picking_time
     *
     * @param string|null $picking_time picking_time
     *
     * @return self
     */
    public function setPickingTime($picking_time)
    {
        if (is_null($picking_time)) {
            array_push($this->openAPINullablesSetToNull, 'picking_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picking_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['picking_time'] = $picking_time;

        return $this;
    }

    /**
     * Gets planned_goods_issue_date
     *
     * @return string|null
     */
    public function getPlannedGoodsIssueDate()
    {
        return $this->container['planned_goods_issue_date'];
    }

    /**
     * Sets planned_goods_issue_date
     *
     * @param string|null $planned_goods_issue_date planned_goods_issue_date
     *
     * @return self
     */
    public function setPlannedGoodsIssueDate($planned_goods_issue_date)
    {
        if (is_null($planned_goods_issue_date)) {
            array_push($this->openAPINullablesSetToNull, 'planned_goods_issue_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('planned_goods_issue_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['planned_goods_issue_date'] = $planned_goods_issue_date;

        return $this;
    }

    /**
     * Gets proposed_delivery_route
     *
     * @return string|null
     */
    public function getProposedDeliveryRoute()
    {
        return $this->container['proposed_delivery_route'];
    }

    /**
     * Sets proposed_delivery_route
     *
     * @param string|null $proposed_delivery_route proposed_delivery_route
     *
     * @return self
     */
    public function setProposedDeliveryRoute($proposed_delivery_route)
    {
        if (is_null($proposed_delivery_route)) {
            array_push($this->openAPINullablesSetToNull, 'proposed_delivery_route');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proposed_delivery_route', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($proposed_delivery_route) && (mb_strlen($proposed_delivery_route) > 6)) {
            throw new \InvalidArgumentException('invalid length for $proposed_delivery_route when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['proposed_delivery_route'] = $proposed_delivery_route;

        return $this;
    }

    /**
     * Gets transportation_planning_date
     *
     * @return string|null
     */
    public function getTransportationPlanningDate()
    {
        return $this->container['transportation_planning_date'];
    }

    /**
     * Sets transportation_planning_date
     *
     * @param string|null $transportation_planning_date transportation_planning_date
     *
     * @return self
     */
    public function setTransportationPlanningDate($transportation_planning_date)
    {
        if (is_null($transportation_planning_date)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_planning_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_planning_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transportation_planning_date'] = $transportation_planning_date;

        return $this;
    }

    /**
     * Gets transportation_planning_time
     *
     * @return string|null
     */
    public function getTransportationPlanningTime()
    {
        return $this->container['transportation_planning_time'];
    }

    /**
     * Sets transportation_planning_time
     *
     * @param string|null $transportation_planning_time transportation_planning_time
     *
     * @return self
     */
    public function setTransportationPlanningTime($transportation_planning_time)
    {
        if (is_null($transportation_planning_time)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_planning_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_planning_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transportation_planning_time'] = $transportation_planning_time;

        return $this;
    }

    /**
     * Gets unloading_point_name
     *
     * @return string|null
     */
    public function getUnloadingPointName()
    {
        return $this->container['unloading_point_name'];
    }

    /**
     * Sets unloading_point_name
     *
     * @param string|null $unloading_point_name unloading_point_name
     *
     * @return self
     */
    public function setUnloadingPointName($unloading_point_name)
    {
        if (is_null($unloading_point_name)) {
            array_push($this->openAPINullablesSetToNull, 'unloading_point_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unloading_point_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($unloading_point_name) && (mb_strlen($unloading_point_name) > 25)) {
            throw new \InvalidArgumentException('invalid length for $unloading_point_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeUpdate., must be smaller than or equal to 25.');
        }

        $this->container['unloading_point_name'] = $unloading_point_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


