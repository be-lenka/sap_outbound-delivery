<?php
/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_OutbDeliveryItemType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actual_delivered_qty_in_base_unit' => 'float',
        'actual_delivery_quantity' => 'float',
        'additional_customer_group1' => 'string',
        'additional_customer_group2' => 'string',
        'additional_customer_group3' => 'string',
        'additional_customer_group4' => 'string',
        'additional_customer_group5' => 'string',
        'additional_material_group1' => 'string',
        'additional_material_group2' => 'string',
        'additional_material_group3' => 'string',
        'additional_material_group4' => 'string',
        'additional_material_group5' => 'string',
        'alternate_product_number' => 'string',
        'base_unit' => 'string',
        'batch' => 'string',
        'batch_by_supplier' => 'string',
        'batch_classification' => 'string',
        'bom_explosion' => 'string',
        'business_area' => 'string',
        'consumption_posting' => 'string',
        'controlling_area' => 'string',
        'cost_center' => 'string',
        'created_by_user' => 'string',
        'creation_date' => 'string',
        'creation_time' => 'string',
        'cust_engineering_chg_status' => 'string',
        'delivery_document' => 'string',
        'delivery_document_item' => 'string',
        'delivery_document_item_category' => 'string',
        'delivery_document_item_text' => 'string',
        'delivery_group' => 'string',
        'delivery_quantity_unit' => 'string',
        'delivery_related_billing_status' => 'string',
        'delivery_to_base_quantity_dnmntr' => 'float',
        'delivery_to_base_quantity_nmrtr' => 'float',
        'delivery_version' => 'string',
        'department_classification_by_cust' => 'string',
        'distribution_channel' => 'string',
        'division' => 'string',
        'eu_delivery_item_arc_status' => 'string',
        'fixed_shipg_procg_duration_in_days' => 'float',
        'gl_account' => 'string',
        'goods_movement_reason_code' => 'string',
        'goods_movement_status' => 'string',
        'goods_movement_type' => 'string',
        'higher_lvl_itm_of_bat_splt_itm' => 'string',
        'higher_level_item' => 'string',
        'inspection_lot' => 'string',
        'inspection_partial_lot' => 'string',
        'intercompany_billing_status' => 'string',
        'international_article_number' => 'string',
        'inventory_special_stock_type' => 'string',
        'inventory_valuation_type' => 'string',
        'is_completely_delivered' => 'bool',
        'is_not_goods_movements_relevant' => 'string',
        'is_separate_valuation' => 'bool',
        'issg_or_rcvg_batch' => 'string',
        'issg_or_rcvg_material' => 'string',
        'issg_or_rcvg_spcl_stock_ind' => 'string',
        'issg_or_rcvg_stock_category' => 'string',
        'issg_or_rcvg_valuation_type' => 'string',
        'issuing_or_receiving_plant' => 'string',
        'issuing_or_receiving_storage_loc' => 'string',
        'item_billing_block_reason' => 'string',
        'item_billing_incompletion_status' => 'string',
        'item_delivery_incompletion_status' => 'string',
        'item_gds_mvt_incompletion_sts' => 'string',
        'item_general_incompletion_status' => 'string',
        'item_gross_weight' => 'float',
        'item_is_billing_relevant' => 'string',
        'item_net_weight' => 'float',
        'item_packing_incompletion_status' => 'string',
        'item_picking_incompletion_status' => 'string',
        'item_volume' => 'float',
        'item_volume_unit' => 'string',
        'item_weight_unit' => 'string',
        'last_change_date' => 'string',
        'loading_group' => 'string',
        'manufacture_date' => 'string',
        'material' => 'string',
        'material_by_customer' => 'string',
        'material_freight_group' => 'string',
        'material_group' => 'string',
        'material_is_batch_managed' => 'bool',
        'material_is_int_batch_managed' => 'bool',
        'number_of_serial_numbers' => 'int',
        'order_id' => 'string',
        'order_item' => 'string',
        'original_delivery_quantity' => 'float',
        'originally_requested_material' => 'string',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'float',
        'packing_status' => 'string',
        'partial_delivery_is_allowed' => 'string',
        'payment_guarantee_form' => 'string',
        'picking_confirmation_status' => 'string',
        'picking_control' => 'string',
        'picking_status' => 'string',
        'plant' => 'string',
        'primary_posting_switch' => 'string',
        'product_availability_date' => 'string',
        'product_availability_time' => 'string',
        'product_configuration' => 'string',
        'product_hierarchy_node' => 'string',
        'profitability_segment' => 'string',
        'profit_center' => 'string',
        'proof_of_delivery_relevance_code' => 'string',
        'proof_of_delivery_status' => 'string',
        'quantity_is_fixed' => 'bool',
        'receiving_point' => 'string',
        'reference_document_logical_system' => 'string',
        'reference_sd_document' => 'string',
        'reference_sd_document_category' => 'string',
        'reference_sd_document_item' => 'string',
        'retail_promotion' => 'string',
        'sales_document_item_type' => 'string',
        'sales_group' => 'string',
        'sales_office' => 'string',
        'sd_document_category' => 'string',
        'sd_process_status' => 'string',
        'shelf_life_expiration_date' => 'string',
        'statistics_date' => 'string',
        'stock_type' => 'string',
        'storage_bin' => 'string',
        'storage_location' => 'string',
        'storage_type' => 'string',
        'subsequent_movement_type' => 'string',
        'transportation_group' => 'string',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'float',
        'unlimited_overdelivery_is_allowed' => 'bool',
        'varbl_shipg_procg_duration_in_days' => 'float',
        'warehouse' => 'string',
        'warehouse_activity_status' => 'string',
        'warehouse_staging_area' => 'string',
        'warehouse_stock_category' => 'string',
        'warehouse_storage_bin' => 'string',
        'to_serial_delivery_item' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryType',
        'to_document_flow' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeToDocumentFlow',
        'to_handling_unit_item_delivery' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeToHandlingUnitItemDelivery',
        'to_delivery_document_item_text' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeToDeliveryDocumentItemText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actual_delivered_qty_in_base_unit' => 'decimal',
        'actual_delivery_quantity' => 'decimal',
        'additional_customer_group1' => null,
        'additional_customer_group2' => null,
        'additional_customer_group3' => null,
        'additional_customer_group4' => null,
        'additional_customer_group5' => null,
        'additional_material_group1' => null,
        'additional_material_group2' => null,
        'additional_material_group3' => null,
        'additional_material_group4' => null,
        'additional_material_group5' => null,
        'alternate_product_number' => null,
        'base_unit' => null,
        'batch' => null,
        'batch_by_supplier' => null,
        'batch_classification' => null,
        'bom_explosion' => null,
        'business_area' => null,
        'consumption_posting' => null,
        'controlling_area' => null,
        'cost_center' => null,
        'created_by_user' => null,
        'creation_date' => null,
        'creation_time' => null,
        'cust_engineering_chg_status' => null,
        'delivery_document' => null,
        'delivery_document_item' => null,
        'delivery_document_item_category' => null,
        'delivery_document_item_text' => null,
        'delivery_group' => null,
        'delivery_quantity_unit' => null,
        'delivery_related_billing_status' => null,
        'delivery_to_base_quantity_dnmntr' => 'decimal',
        'delivery_to_base_quantity_nmrtr' => 'decimal',
        'delivery_version' => null,
        'department_classification_by_cust' => null,
        'distribution_channel' => null,
        'division' => null,
        'eu_delivery_item_arc_status' => null,
        'fixed_shipg_procg_duration_in_days' => 'decimal',
        'gl_account' => null,
        'goods_movement_reason_code' => null,
        'goods_movement_status' => null,
        'goods_movement_type' => null,
        'higher_lvl_itm_of_bat_splt_itm' => null,
        'higher_level_item' => null,
        'inspection_lot' => null,
        'inspection_partial_lot' => null,
        'intercompany_billing_status' => null,
        'international_article_number' => null,
        'inventory_special_stock_type' => null,
        'inventory_valuation_type' => null,
        'is_completely_delivered' => null,
        'is_not_goods_movements_relevant' => null,
        'is_separate_valuation' => null,
        'issg_or_rcvg_batch' => null,
        'issg_or_rcvg_material' => null,
        'issg_or_rcvg_spcl_stock_ind' => null,
        'issg_or_rcvg_stock_category' => null,
        'issg_or_rcvg_valuation_type' => null,
        'issuing_or_receiving_plant' => null,
        'issuing_or_receiving_storage_loc' => null,
        'item_billing_block_reason' => null,
        'item_billing_incompletion_status' => null,
        'item_delivery_incompletion_status' => null,
        'item_gds_mvt_incompletion_sts' => null,
        'item_general_incompletion_status' => null,
        'item_gross_weight' => 'decimal',
        'item_is_billing_relevant' => null,
        'item_net_weight' => 'decimal',
        'item_packing_incompletion_status' => null,
        'item_picking_incompletion_status' => null,
        'item_volume' => 'decimal',
        'item_volume_unit' => null,
        'item_weight_unit' => null,
        'last_change_date' => null,
        'loading_group' => null,
        'manufacture_date' => null,
        'material' => null,
        'material_by_customer' => null,
        'material_freight_group' => null,
        'material_group' => null,
        'material_is_batch_managed' => null,
        'material_is_int_batch_managed' => null,
        'number_of_serial_numbers' => 'int32',
        'order_id' => null,
        'order_item' => null,
        'original_delivery_quantity' => 'decimal',
        'originally_requested_material' => null,
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'decimal',
        'packing_status' => null,
        'partial_delivery_is_allowed' => null,
        'payment_guarantee_form' => null,
        'picking_confirmation_status' => null,
        'picking_control' => null,
        'picking_status' => null,
        'plant' => null,
        'primary_posting_switch' => null,
        'product_availability_date' => null,
        'product_availability_time' => null,
        'product_configuration' => null,
        'product_hierarchy_node' => null,
        'profitability_segment' => null,
        'profit_center' => null,
        'proof_of_delivery_relevance_code' => null,
        'proof_of_delivery_status' => null,
        'quantity_is_fixed' => null,
        'receiving_point' => null,
        'reference_document_logical_system' => null,
        'reference_sd_document' => null,
        'reference_sd_document_category' => null,
        'reference_sd_document_item' => null,
        'retail_promotion' => null,
        'sales_document_item_type' => null,
        'sales_group' => null,
        'sales_office' => null,
        'sd_document_category' => null,
        'sd_process_status' => null,
        'shelf_life_expiration_date' => null,
        'statistics_date' => null,
        'stock_type' => null,
        'storage_bin' => null,
        'storage_location' => null,
        'storage_type' => null,
        'subsequent_movement_type' => null,
        'transportation_group' => null,
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'decimal',
        'unlimited_overdelivery_is_allowed' => null,
        'varbl_shipg_procg_duration_in_days' => 'decimal',
        'warehouse' => null,
        'warehouse_activity_status' => null,
        'warehouse_staging_area' => null,
        'warehouse_stock_category' => null,
        'warehouse_storage_bin' => null,
        'to_serial_delivery_item' => null,
        'to_document_flow' => null,
        'to_handling_unit_item_delivery' => null,
        'to_delivery_document_item_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actual_delivered_qty_in_base_unit' => true,
		'actual_delivery_quantity' => true,
		'additional_customer_group1' => true,
		'additional_customer_group2' => true,
		'additional_customer_group3' => true,
		'additional_customer_group4' => true,
		'additional_customer_group5' => true,
		'additional_material_group1' => true,
		'additional_material_group2' => true,
		'additional_material_group3' => true,
		'additional_material_group4' => true,
		'additional_material_group5' => true,
		'alternate_product_number' => true,
		'base_unit' => true,
		'batch' => true,
		'batch_by_supplier' => true,
		'batch_classification' => true,
		'bom_explosion' => true,
		'business_area' => true,
		'consumption_posting' => true,
		'controlling_area' => true,
		'cost_center' => true,
		'created_by_user' => true,
		'creation_date' => true,
		'creation_time' => true,
		'cust_engineering_chg_status' => true,
		'delivery_document' => false,
		'delivery_document_item' => false,
		'delivery_document_item_category' => true,
		'delivery_document_item_text' => true,
		'delivery_group' => true,
		'delivery_quantity_unit' => true,
		'delivery_related_billing_status' => true,
		'delivery_to_base_quantity_dnmntr' => true,
		'delivery_to_base_quantity_nmrtr' => true,
		'delivery_version' => true,
		'department_classification_by_cust' => true,
		'distribution_channel' => true,
		'division' => true,
		'eu_delivery_item_arc_status' => true,
		'fixed_shipg_procg_duration_in_days' => true,
		'gl_account' => true,
		'goods_movement_reason_code' => true,
		'goods_movement_status' => true,
		'goods_movement_type' => true,
		'higher_lvl_itm_of_bat_splt_itm' => true,
		'higher_level_item' => true,
		'inspection_lot' => true,
		'inspection_partial_lot' => true,
		'intercompany_billing_status' => true,
		'international_article_number' => true,
		'inventory_special_stock_type' => true,
		'inventory_valuation_type' => true,
		'is_completely_delivered' => true,
		'is_not_goods_movements_relevant' => true,
		'is_separate_valuation' => true,
		'issg_or_rcvg_batch' => true,
		'issg_or_rcvg_material' => true,
		'issg_or_rcvg_spcl_stock_ind' => true,
		'issg_or_rcvg_stock_category' => true,
		'issg_or_rcvg_valuation_type' => true,
		'issuing_or_receiving_plant' => true,
		'issuing_or_receiving_storage_loc' => true,
		'item_billing_block_reason' => true,
		'item_billing_incompletion_status' => true,
		'item_delivery_incompletion_status' => true,
		'item_gds_mvt_incompletion_sts' => true,
		'item_general_incompletion_status' => true,
		'item_gross_weight' => true,
		'item_is_billing_relevant' => true,
		'item_net_weight' => true,
		'item_packing_incompletion_status' => true,
		'item_picking_incompletion_status' => true,
		'item_volume' => true,
		'item_volume_unit' => true,
		'item_weight_unit' => true,
		'last_change_date' => true,
		'loading_group' => true,
		'manufacture_date' => true,
		'material' => true,
		'material_by_customer' => true,
		'material_freight_group' => true,
		'material_group' => true,
		'material_is_batch_managed' => true,
		'material_is_int_batch_managed' => true,
		'number_of_serial_numbers' => true,
		'order_id' => true,
		'order_item' => true,
		'original_delivery_quantity' => true,
		'originally_requested_material' => true,
		'overdeliv_tolrtd_lmt_ratio_in_pct' => true,
		'packing_status' => true,
		'partial_delivery_is_allowed' => true,
		'payment_guarantee_form' => true,
		'picking_confirmation_status' => true,
		'picking_control' => true,
		'picking_status' => true,
		'plant' => true,
		'primary_posting_switch' => true,
		'product_availability_date' => true,
		'product_availability_time' => true,
		'product_configuration' => true,
		'product_hierarchy_node' => true,
		'profitability_segment' => true,
		'profit_center' => true,
		'proof_of_delivery_relevance_code' => true,
		'proof_of_delivery_status' => true,
		'quantity_is_fixed' => true,
		'receiving_point' => true,
		'reference_document_logical_system' => true,
		'reference_sd_document' => true,
		'reference_sd_document_category' => true,
		'reference_sd_document_item' => true,
		'retail_promotion' => true,
		'sales_document_item_type' => true,
		'sales_group' => true,
		'sales_office' => true,
		'sd_document_category' => true,
		'sd_process_status' => true,
		'shelf_life_expiration_date' => true,
		'statistics_date' => true,
		'stock_type' => true,
		'storage_bin' => true,
		'storage_location' => true,
		'storage_type' => true,
		'subsequent_movement_type' => true,
		'transportation_group' => true,
		'underdeliv_tolrtd_lmt_ratio_in_pct' => true,
		'unlimited_overdelivery_is_allowed' => true,
		'varbl_shipg_procg_duration_in_days' => true,
		'warehouse' => true,
		'warehouse_activity_status' => true,
		'warehouse_staging_area' => true,
		'warehouse_stock_category' => true,
		'warehouse_storage_bin' => true,
		'to_serial_delivery_item' => true,
		'to_document_flow' => false,
		'to_handling_unit_item_delivery' => false,
		'to_delivery_document_item_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_delivered_qty_in_base_unit' => 'ActualDeliveredQtyInBaseUnit',
        'actual_delivery_quantity' => 'ActualDeliveryQuantity',
        'additional_customer_group1' => 'AdditionalCustomerGroup1',
        'additional_customer_group2' => 'AdditionalCustomerGroup2',
        'additional_customer_group3' => 'AdditionalCustomerGroup3',
        'additional_customer_group4' => 'AdditionalCustomerGroup4',
        'additional_customer_group5' => 'AdditionalCustomerGroup5',
        'additional_material_group1' => 'AdditionalMaterialGroup1',
        'additional_material_group2' => 'AdditionalMaterialGroup2',
        'additional_material_group3' => 'AdditionalMaterialGroup3',
        'additional_material_group4' => 'AdditionalMaterialGroup4',
        'additional_material_group5' => 'AdditionalMaterialGroup5',
        'alternate_product_number' => 'AlternateProductNumber',
        'base_unit' => 'BaseUnit',
        'batch' => 'Batch',
        'batch_by_supplier' => 'BatchBySupplier',
        'batch_classification' => 'BatchClassification',
        'bom_explosion' => 'BOMExplosion',
        'business_area' => 'BusinessArea',
        'consumption_posting' => 'ConsumptionPosting',
        'controlling_area' => 'ControllingArea',
        'cost_center' => 'CostCenter',
        'created_by_user' => 'CreatedByUser',
        'creation_date' => 'CreationDate',
        'creation_time' => 'CreationTime',
        'cust_engineering_chg_status' => 'CustEngineeringChgStatus',
        'delivery_document' => 'DeliveryDocument',
        'delivery_document_item' => 'DeliveryDocumentItem',
        'delivery_document_item_category' => 'DeliveryDocumentItemCategory',
        'delivery_document_item_text' => 'DeliveryDocumentItemText',
        'delivery_group' => 'DeliveryGroup',
        'delivery_quantity_unit' => 'DeliveryQuantityUnit',
        'delivery_related_billing_status' => 'DeliveryRelatedBillingStatus',
        'delivery_to_base_quantity_dnmntr' => 'DeliveryToBaseQuantityDnmntr',
        'delivery_to_base_quantity_nmrtr' => 'DeliveryToBaseQuantityNmrtr',
        'delivery_version' => 'DeliveryVersion',
        'department_classification_by_cust' => 'DepartmentClassificationByCust',
        'distribution_channel' => 'DistributionChannel',
        'division' => 'Division',
        'eu_delivery_item_arc_status' => 'EUDeliveryItemARCStatus',
        'fixed_shipg_procg_duration_in_days' => 'FixedShipgProcgDurationInDays',
        'gl_account' => 'GLAccount',
        'goods_movement_reason_code' => 'GoodsMovementReasonCode',
        'goods_movement_status' => 'GoodsMovementStatus',
        'goods_movement_type' => 'GoodsMovementType',
        'higher_lvl_itm_of_bat_splt_itm' => 'HigherLvlItmOfBatSpltItm',
        'higher_level_item' => 'HigherLevelItem',
        'inspection_lot' => 'InspectionLot',
        'inspection_partial_lot' => 'InspectionPartialLot',
        'intercompany_billing_status' => 'IntercompanyBillingStatus',
        'international_article_number' => 'InternationalArticleNumber',
        'inventory_special_stock_type' => 'InventorySpecialStockType',
        'inventory_valuation_type' => 'InventoryValuationType',
        'is_completely_delivered' => 'IsCompletelyDelivered',
        'is_not_goods_movements_relevant' => 'IsNotGoodsMovementsRelevant',
        'is_separate_valuation' => 'IsSeparateValuation',
        'issg_or_rcvg_batch' => 'IssgOrRcvgBatch',
        'issg_or_rcvg_material' => 'IssgOrRcvgMaterial',
        'issg_or_rcvg_spcl_stock_ind' => 'IssgOrRcvgSpclStockInd',
        'issg_or_rcvg_stock_category' => 'IssgOrRcvgStockCategory',
        'issg_or_rcvg_valuation_type' => 'IssgOrRcvgValuationType',
        'issuing_or_receiving_plant' => 'IssuingOrReceivingPlant',
        'issuing_or_receiving_storage_loc' => 'IssuingOrReceivingStorageLoc',
        'item_billing_block_reason' => 'ItemBillingBlockReason',
        'item_billing_incompletion_status' => 'ItemBillingIncompletionStatus',
        'item_delivery_incompletion_status' => 'ItemDeliveryIncompletionStatus',
        'item_gds_mvt_incompletion_sts' => 'ItemGdsMvtIncompletionSts',
        'item_general_incompletion_status' => 'ItemGeneralIncompletionStatus',
        'item_gross_weight' => 'ItemGrossWeight',
        'item_is_billing_relevant' => 'ItemIsBillingRelevant',
        'item_net_weight' => 'ItemNetWeight',
        'item_packing_incompletion_status' => 'ItemPackingIncompletionStatus',
        'item_picking_incompletion_status' => 'ItemPickingIncompletionStatus',
        'item_volume' => 'ItemVolume',
        'item_volume_unit' => 'ItemVolumeUnit',
        'item_weight_unit' => 'ItemWeightUnit',
        'last_change_date' => 'LastChangeDate',
        'loading_group' => 'LoadingGroup',
        'manufacture_date' => 'ManufactureDate',
        'material' => 'Material',
        'material_by_customer' => 'MaterialByCustomer',
        'material_freight_group' => 'MaterialFreightGroup',
        'material_group' => 'MaterialGroup',
        'material_is_batch_managed' => 'MaterialIsBatchManaged',
        'material_is_int_batch_managed' => 'MaterialIsIntBatchManaged',
        'number_of_serial_numbers' => 'NumberOfSerialNumbers',
        'order_id' => 'OrderID',
        'order_item' => 'OrderItem',
        'original_delivery_quantity' => 'OriginalDeliveryQuantity',
        'originally_requested_material' => 'OriginallyRequestedMaterial',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'OverdelivTolrtdLmtRatioInPct',
        'packing_status' => 'PackingStatus',
        'partial_delivery_is_allowed' => 'PartialDeliveryIsAllowed',
        'payment_guarantee_form' => 'PaymentGuaranteeForm',
        'picking_confirmation_status' => 'PickingConfirmationStatus',
        'picking_control' => 'PickingControl',
        'picking_status' => 'PickingStatus',
        'plant' => 'Plant',
        'primary_posting_switch' => 'PrimaryPostingSwitch',
        'product_availability_date' => 'ProductAvailabilityDate',
        'product_availability_time' => 'ProductAvailabilityTime',
        'product_configuration' => 'ProductConfiguration',
        'product_hierarchy_node' => 'ProductHierarchyNode',
        'profitability_segment' => 'ProfitabilitySegment',
        'profit_center' => 'ProfitCenter',
        'proof_of_delivery_relevance_code' => 'ProofOfDeliveryRelevanceCode',
        'proof_of_delivery_status' => 'ProofOfDeliveryStatus',
        'quantity_is_fixed' => 'QuantityIsFixed',
        'receiving_point' => 'ReceivingPoint',
        'reference_document_logical_system' => 'ReferenceDocumentLogicalSystem',
        'reference_sd_document' => 'ReferenceSDDocument',
        'reference_sd_document_category' => 'ReferenceSDDocumentCategory',
        'reference_sd_document_item' => 'ReferenceSDDocumentItem',
        'retail_promotion' => 'RetailPromotion',
        'sales_document_item_type' => 'SalesDocumentItemType',
        'sales_group' => 'SalesGroup',
        'sales_office' => 'SalesOffice',
        'sd_document_category' => 'SDDocumentCategory',
        'sd_process_status' => 'SDProcessStatus',
        'shelf_life_expiration_date' => 'ShelfLifeExpirationDate',
        'statistics_date' => 'StatisticsDate',
        'stock_type' => 'StockType',
        'storage_bin' => 'StorageBin',
        'storage_location' => 'StorageLocation',
        'storage_type' => 'StorageType',
        'subsequent_movement_type' => 'SubsequentMovementType',
        'transportation_group' => 'TransportationGroup',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'UnderdelivTolrtdLmtRatioInPct',
        'unlimited_overdelivery_is_allowed' => 'UnlimitedOverdeliveryIsAllowed',
        'varbl_shipg_procg_duration_in_days' => 'VarblShipgProcgDurationInDays',
        'warehouse' => 'Warehouse',
        'warehouse_activity_status' => 'WarehouseActivityStatus',
        'warehouse_staging_area' => 'WarehouseStagingArea',
        'warehouse_stock_category' => 'WarehouseStockCategory',
        'warehouse_storage_bin' => 'WarehouseStorageBin',
        'to_serial_delivery_item' => 'to_SerialDeliveryItem',
        'to_document_flow' => 'to_DocumentFlow',
        'to_handling_unit_item_delivery' => 'to_HandlingUnitItemDelivery',
        'to_delivery_document_item_text' => 'to_DeliveryDocumentItemText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_delivered_qty_in_base_unit' => 'setActualDeliveredQtyInBaseUnit',
        'actual_delivery_quantity' => 'setActualDeliveryQuantity',
        'additional_customer_group1' => 'setAdditionalCustomerGroup1',
        'additional_customer_group2' => 'setAdditionalCustomerGroup2',
        'additional_customer_group3' => 'setAdditionalCustomerGroup3',
        'additional_customer_group4' => 'setAdditionalCustomerGroup4',
        'additional_customer_group5' => 'setAdditionalCustomerGroup5',
        'additional_material_group1' => 'setAdditionalMaterialGroup1',
        'additional_material_group2' => 'setAdditionalMaterialGroup2',
        'additional_material_group3' => 'setAdditionalMaterialGroup3',
        'additional_material_group4' => 'setAdditionalMaterialGroup4',
        'additional_material_group5' => 'setAdditionalMaterialGroup5',
        'alternate_product_number' => 'setAlternateProductNumber',
        'base_unit' => 'setBaseUnit',
        'batch' => 'setBatch',
        'batch_by_supplier' => 'setBatchBySupplier',
        'batch_classification' => 'setBatchClassification',
        'bom_explosion' => 'setBomExplosion',
        'business_area' => 'setBusinessArea',
        'consumption_posting' => 'setConsumptionPosting',
        'controlling_area' => 'setControllingArea',
        'cost_center' => 'setCostCenter',
        'created_by_user' => 'setCreatedByUser',
        'creation_date' => 'setCreationDate',
        'creation_time' => 'setCreationTime',
        'cust_engineering_chg_status' => 'setCustEngineeringChgStatus',
        'delivery_document' => 'setDeliveryDocument',
        'delivery_document_item' => 'setDeliveryDocumentItem',
        'delivery_document_item_category' => 'setDeliveryDocumentItemCategory',
        'delivery_document_item_text' => 'setDeliveryDocumentItemText',
        'delivery_group' => 'setDeliveryGroup',
        'delivery_quantity_unit' => 'setDeliveryQuantityUnit',
        'delivery_related_billing_status' => 'setDeliveryRelatedBillingStatus',
        'delivery_to_base_quantity_dnmntr' => 'setDeliveryToBaseQuantityDnmntr',
        'delivery_to_base_quantity_nmrtr' => 'setDeliveryToBaseQuantityNmrtr',
        'delivery_version' => 'setDeliveryVersion',
        'department_classification_by_cust' => 'setDepartmentClassificationByCust',
        'distribution_channel' => 'setDistributionChannel',
        'division' => 'setDivision',
        'eu_delivery_item_arc_status' => 'setEuDeliveryItemArcStatus',
        'fixed_shipg_procg_duration_in_days' => 'setFixedShipgProcgDurationInDays',
        'gl_account' => 'setGlAccount',
        'goods_movement_reason_code' => 'setGoodsMovementReasonCode',
        'goods_movement_status' => 'setGoodsMovementStatus',
        'goods_movement_type' => 'setGoodsMovementType',
        'higher_lvl_itm_of_bat_splt_itm' => 'setHigherLvlItmOfBatSpltItm',
        'higher_level_item' => 'setHigherLevelItem',
        'inspection_lot' => 'setInspectionLot',
        'inspection_partial_lot' => 'setInspectionPartialLot',
        'intercompany_billing_status' => 'setIntercompanyBillingStatus',
        'international_article_number' => 'setInternationalArticleNumber',
        'inventory_special_stock_type' => 'setInventorySpecialStockType',
        'inventory_valuation_type' => 'setInventoryValuationType',
        'is_completely_delivered' => 'setIsCompletelyDelivered',
        'is_not_goods_movements_relevant' => 'setIsNotGoodsMovementsRelevant',
        'is_separate_valuation' => 'setIsSeparateValuation',
        'issg_or_rcvg_batch' => 'setIssgOrRcvgBatch',
        'issg_or_rcvg_material' => 'setIssgOrRcvgMaterial',
        'issg_or_rcvg_spcl_stock_ind' => 'setIssgOrRcvgSpclStockInd',
        'issg_or_rcvg_stock_category' => 'setIssgOrRcvgStockCategory',
        'issg_or_rcvg_valuation_type' => 'setIssgOrRcvgValuationType',
        'issuing_or_receiving_plant' => 'setIssuingOrReceivingPlant',
        'issuing_or_receiving_storage_loc' => 'setIssuingOrReceivingStorageLoc',
        'item_billing_block_reason' => 'setItemBillingBlockReason',
        'item_billing_incompletion_status' => 'setItemBillingIncompletionStatus',
        'item_delivery_incompletion_status' => 'setItemDeliveryIncompletionStatus',
        'item_gds_mvt_incompletion_sts' => 'setItemGdsMvtIncompletionSts',
        'item_general_incompletion_status' => 'setItemGeneralIncompletionStatus',
        'item_gross_weight' => 'setItemGrossWeight',
        'item_is_billing_relevant' => 'setItemIsBillingRelevant',
        'item_net_weight' => 'setItemNetWeight',
        'item_packing_incompletion_status' => 'setItemPackingIncompletionStatus',
        'item_picking_incompletion_status' => 'setItemPickingIncompletionStatus',
        'item_volume' => 'setItemVolume',
        'item_volume_unit' => 'setItemVolumeUnit',
        'item_weight_unit' => 'setItemWeightUnit',
        'last_change_date' => 'setLastChangeDate',
        'loading_group' => 'setLoadingGroup',
        'manufacture_date' => 'setManufactureDate',
        'material' => 'setMaterial',
        'material_by_customer' => 'setMaterialByCustomer',
        'material_freight_group' => 'setMaterialFreightGroup',
        'material_group' => 'setMaterialGroup',
        'material_is_batch_managed' => 'setMaterialIsBatchManaged',
        'material_is_int_batch_managed' => 'setMaterialIsIntBatchManaged',
        'number_of_serial_numbers' => 'setNumberOfSerialNumbers',
        'order_id' => 'setOrderId',
        'order_item' => 'setOrderItem',
        'original_delivery_quantity' => 'setOriginalDeliveryQuantity',
        'originally_requested_material' => 'setOriginallyRequestedMaterial',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'setOverdelivTolrtdLmtRatioInPct',
        'packing_status' => 'setPackingStatus',
        'partial_delivery_is_allowed' => 'setPartialDeliveryIsAllowed',
        'payment_guarantee_form' => 'setPaymentGuaranteeForm',
        'picking_confirmation_status' => 'setPickingConfirmationStatus',
        'picking_control' => 'setPickingControl',
        'picking_status' => 'setPickingStatus',
        'plant' => 'setPlant',
        'primary_posting_switch' => 'setPrimaryPostingSwitch',
        'product_availability_date' => 'setProductAvailabilityDate',
        'product_availability_time' => 'setProductAvailabilityTime',
        'product_configuration' => 'setProductConfiguration',
        'product_hierarchy_node' => 'setProductHierarchyNode',
        'profitability_segment' => 'setProfitabilitySegment',
        'profit_center' => 'setProfitCenter',
        'proof_of_delivery_relevance_code' => 'setProofOfDeliveryRelevanceCode',
        'proof_of_delivery_status' => 'setProofOfDeliveryStatus',
        'quantity_is_fixed' => 'setQuantityIsFixed',
        'receiving_point' => 'setReceivingPoint',
        'reference_document_logical_system' => 'setReferenceDocumentLogicalSystem',
        'reference_sd_document' => 'setReferenceSdDocument',
        'reference_sd_document_category' => 'setReferenceSdDocumentCategory',
        'reference_sd_document_item' => 'setReferenceSdDocumentItem',
        'retail_promotion' => 'setRetailPromotion',
        'sales_document_item_type' => 'setSalesDocumentItemType',
        'sales_group' => 'setSalesGroup',
        'sales_office' => 'setSalesOffice',
        'sd_document_category' => 'setSdDocumentCategory',
        'sd_process_status' => 'setSdProcessStatus',
        'shelf_life_expiration_date' => 'setShelfLifeExpirationDate',
        'statistics_date' => 'setStatisticsDate',
        'stock_type' => 'setStockType',
        'storage_bin' => 'setStorageBin',
        'storage_location' => 'setStorageLocation',
        'storage_type' => 'setStorageType',
        'subsequent_movement_type' => 'setSubsequentMovementType',
        'transportation_group' => 'setTransportationGroup',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'setUnderdelivTolrtdLmtRatioInPct',
        'unlimited_overdelivery_is_allowed' => 'setUnlimitedOverdeliveryIsAllowed',
        'varbl_shipg_procg_duration_in_days' => 'setVarblShipgProcgDurationInDays',
        'warehouse' => 'setWarehouse',
        'warehouse_activity_status' => 'setWarehouseActivityStatus',
        'warehouse_staging_area' => 'setWarehouseStagingArea',
        'warehouse_stock_category' => 'setWarehouseStockCategory',
        'warehouse_storage_bin' => 'setWarehouseStorageBin',
        'to_serial_delivery_item' => 'setToSerialDeliveryItem',
        'to_document_flow' => 'setToDocumentFlow',
        'to_handling_unit_item_delivery' => 'setToHandlingUnitItemDelivery',
        'to_delivery_document_item_text' => 'setToDeliveryDocumentItemText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_delivered_qty_in_base_unit' => 'getActualDeliveredQtyInBaseUnit',
        'actual_delivery_quantity' => 'getActualDeliveryQuantity',
        'additional_customer_group1' => 'getAdditionalCustomerGroup1',
        'additional_customer_group2' => 'getAdditionalCustomerGroup2',
        'additional_customer_group3' => 'getAdditionalCustomerGroup3',
        'additional_customer_group4' => 'getAdditionalCustomerGroup4',
        'additional_customer_group5' => 'getAdditionalCustomerGroup5',
        'additional_material_group1' => 'getAdditionalMaterialGroup1',
        'additional_material_group2' => 'getAdditionalMaterialGroup2',
        'additional_material_group3' => 'getAdditionalMaterialGroup3',
        'additional_material_group4' => 'getAdditionalMaterialGroup4',
        'additional_material_group5' => 'getAdditionalMaterialGroup5',
        'alternate_product_number' => 'getAlternateProductNumber',
        'base_unit' => 'getBaseUnit',
        'batch' => 'getBatch',
        'batch_by_supplier' => 'getBatchBySupplier',
        'batch_classification' => 'getBatchClassification',
        'bom_explosion' => 'getBomExplosion',
        'business_area' => 'getBusinessArea',
        'consumption_posting' => 'getConsumptionPosting',
        'controlling_area' => 'getControllingArea',
        'cost_center' => 'getCostCenter',
        'created_by_user' => 'getCreatedByUser',
        'creation_date' => 'getCreationDate',
        'creation_time' => 'getCreationTime',
        'cust_engineering_chg_status' => 'getCustEngineeringChgStatus',
        'delivery_document' => 'getDeliveryDocument',
        'delivery_document_item' => 'getDeliveryDocumentItem',
        'delivery_document_item_category' => 'getDeliveryDocumentItemCategory',
        'delivery_document_item_text' => 'getDeliveryDocumentItemText',
        'delivery_group' => 'getDeliveryGroup',
        'delivery_quantity_unit' => 'getDeliveryQuantityUnit',
        'delivery_related_billing_status' => 'getDeliveryRelatedBillingStatus',
        'delivery_to_base_quantity_dnmntr' => 'getDeliveryToBaseQuantityDnmntr',
        'delivery_to_base_quantity_nmrtr' => 'getDeliveryToBaseQuantityNmrtr',
        'delivery_version' => 'getDeliveryVersion',
        'department_classification_by_cust' => 'getDepartmentClassificationByCust',
        'distribution_channel' => 'getDistributionChannel',
        'division' => 'getDivision',
        'eu_delivery_item_arc_status' => 'getEuDeliveryItemArcStatus',
        'fixed_shipg_procg_duration_in_days' => 'getFixedShipgProcgDurationInDays',
        'gl_account' => 'getGlAccount',
        'goods_movement_reason_code' => 'getGoodsMovementReasonCode',
        'goods_movement_status' => 'getGoodsMovementStatus',
        'goods_movement_type' => 'getGoodsMovementType',
        'higher_lvl_itm_of_bat_splt_itm' => 'getHigherLvlItmOfBatSpltItm',
        'higher_level_item' => 'getHigherLevelItem',
        'inspection_lot' => 'getInspectionLot',
        'inspection_partial_lot' => 'getInspectionPartialLot',
        'intercompany_billing_status' => 'getIntercompanyBillingStatus',
        'international_article_number' => 'getInternationalArticleNumber',
        'inventory_special_stock_type' => 'getInventorySpecialStockType',
        'inventory_valuation_type' => 'getInventoryValuationType',
        'is_completely_delivered' => 'getIsCompletelyDelivered',
        'is_not_goods_movements_relevant' => 'getIsNotGoodsMovementsRelevant',
        'is_separate_valuation' => 'getIsSeparateValuation',
        'issg_or_rcvg_batch' => 'getIssgOrRcvgBatch',
        'issg_or_rcvg_material' => 'getIssgOrRcvgMaterial',
        'issg_or_rcvg_spcl_stock_ind' => 'getIssgOrRcvgSpclStockInd',
        'issg_or_rcvg_stock_category' => 'getIssgOrRcvgStockCategory',
        'issg_or_rcvg_valuation_type' => 'getIssgOrRcvgValuationType',
        'issuing_or_receiving_plant' => 'getIssuingOrReceivingPlant',
        'issuing_or_receiving_storage_loc' => 'getIssuingOrReceivingStorageLoc',
        'item_billing_block_reason' => 'getItemBillingBlockReason',
        'item_billing_incompletion_status' => 'getItemBillingIncompletionStatus',
        'item_delivery_incompletion_status' => 'getItemDeliveryIncompletionStatus',
        'item_gds_mvt_incompletion_sts' => 'getItemGdsMvtIncompletionSts',
        'item_general_incompletion_status' => 'getItemGeneralIncompletionStatus',
        'item_gross_weight' => 'getItemGrossWeight',
        'item_is_billing_relevant' => 'getItemIsBillingRelevant',
        'item_net_weight' => 'getItemNetWeight',
        'item_packing_incompletion_status' => 'getItemPackingIncompletionStatus',
        'item_picking_incompletion_status' => 'getItemPickingIncompletionStatus',
        'item_volume' => 'getItemVolume',
        'item_volume_unit' => 'getItemVolumeUnit',
        'item_weight_unit' => 'getItemWeightUnit',
        'last_change_date' => 'getLastChangeDate',
        'loading_group' => 'getLoadingGroup',
        'manufacture_date' => 'getManufactureDate',
        'material' => 'getMaterial',
        'material_by_customer' => 'getMaterialByCustomer',
        'material_freight_group' => 'getMaterialFreightGroup',
        'material_group' => 'getMaterialGroup',
        'material_is_batch_managed' => 'getMaterialIsBatchManaged',
        'material_is_int_batch_managed' => 'getMaterialIsIntBatchManaged',
        'number_of_serial_numbers' => 'getNumberOfSerialNumbers',
        'order_id' => 'getOrderId',
        'order_item' => 'getOrderItem',
        'original_delivery_quantity' => 'getOriginalDeliveryQuantity',
        'originally_requested_material' => 'getOriginallyRequestedMaterial',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'getOverdelivTolrtdLmtRatioInPct',
        'packing_status' => 'getPackingStatus',
        'partial_delivery_is_allowed' => 'getPartialDeliveryIsAllowed',
        'payment_guarantee_form' => 'getPaymentGuaranteeForm',
        'picking_confirmation_status' => 'getPickingConfirmationStatus',
        'picking_control' => 'getPickingControl',
        'picking_status' => 'getPickingStatus',
        'plant' => 'getPlant',
        'primary_posting_switch' => 'getPrimaryPostingSwitch',
        'product_availability_date' => 'getProductAvailabilityDate',
        'product_availability_time' => 'getProductAvailabilityTime',
        'product_configuration' => 'getProductConfiguration',
        'product_hierarchy_node' => 'getProductHierarchyNode',
        'profitability_segment' => 'getProfitabilitySegment',
        'profit_center' => 'getProfitCenter',
        'proof_of_delivery_relevance_code' => 'getProofOfDeliveryRelevanceCode',
        'proof_of_delivery_status' => 'getProofOfDeliveryStatus',
        'quantity_is_fixed' => 'getQuantityIsFixed',
        'receiving_point' => 'getReceivingPoint',
        'reference_document_logical_system' => 'getReferenceDocumentLogicalSystem',
        'reference_sd_document' => 'getReferenceSdDocument',
        'reference_sd_document_category' => 'getReferenceSdDocumentCategory',
        'reference_sd_document_item' => 'getReferenceSdDocumentItem',
        'retail_promotion' => 'getRetailPromotion',
        'sales_document_item_type' => 'getSalesDocumentItemType',
        'sales_group' => 'getSalesGroup',
        'sales_office' => 'getSalesOffice',
        'sd_document_category' => 'getSdDocumentCategory',
        'sd_process_status' => 'getSdProcessStatus',
        'shelf_life_expiration_date' => 'getShelfLifeExpirationDate',
        'statistics_date' => 'getStatisticsDate',
        'stock_type' => 'getStockType',
        'storage_bin' => 'getStorageBin',
        'storage_location' => 'getStorageLocation',
        'storage_type' => 'getStorageType',
        'subsequent_movement_type' => 'getSubsequentMovementType',
        'transportation_group' => 'getTransportationGroup',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'getUnderdelivTolrtdLmtRatioInPct',
        'unlimited_overdelivery_is_allowed' => 'getUnlimitedOverdeliveryIsAllowed',
        'varbl_shipg_procg_duration_in_days' => 'getVarblShipgProcgDurationInDays',
        'warehouse' => 'getWarehouse',
        'warehouse_activity_status' => 'getWarehouseActivityStatus',
        'warehouse_staging_area' => 'getWarehouseStagingArea',
        'warehouse_stock_category' => 'getWarehouseStockCategory',
        'warehouse_storage_bin' => 'getWarehouseStorageBin',
        'to_serial_delivery_item' => 'getToSerialDeliveryItem',
        'to_document_flow' => 'getToDocumentFlow',
        'to_handling_unit_item_delivery' => 'getToHandlingUnitItemDelivery',
        'to_delivery_document_item_text' => 'getToDeliveryDocumentItemText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('actual_delivered_qty_in_base_unit', $data ?? [], null);
        $this->setIfExists('actual_delivery_quantity', $data ?? [], null);
        $this->setIfExists('additional_customer_group1', $data ?? [], null);
        $this->setIfExists('additional_customer_group2', $data ?? [], null);
        $this->setIfExists('additional_customer_group3', $data ?? [], null);
        $this->setIfExists('additional_customer_group4', $data ?? [], null);
        $this->setIfExists('additional_customer_group5', $data ?? [], null);
        $this->setIfExists('additional_material_group1', $data ?? [], null);
        $this->setIfExists('additional_material_group2', $data ?? [], null);
        $this->setIfExists('additional_material_group3', $data ?? [], null);
        $this->setIfExists('additional_material_group4', $data ?? [], null);
        $this->setIfExists('additional_material_group5', $data ?? [], null);
        $this->setIfExists('alternate_product_number', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('batch_by_supplier', $data ?? [], null);
        $this->setIfExists('batch_classification', $data ?? [], null);
        $this->setIfExists('bom_explosion', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('consumption_posting', $data ?? [], null);
        $this->setIfExists('controlling_area', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('cust_engineering_chg_status', $data ?? [], null);
        $this->setIfExists('delivery_document', $data ?? [], null);
        $this->setIfExists('delivery_document_item', $data ?? [], null);
        $this->setIfExists('delivery_document_item_category', $data ?? [], null);
        $this->setIfExists('delivery_document_item_text', $data ?? [], null);
        $this->setIfExists('delivery_group', $data ?? [], null);
        $this->setIfExists('delivery_quantity_unit', $data ?? [], null);
        $this->setIfExists('delivery_related_billing_status', $data ?? [], null);
        $this->setIfExists('delivery_to_base_quantity_dnmntr', $data ?? [], null);
        $this->setIfExists('delivery_to_base_quantity_nmrtr', $data ?? [], null);
        $this->setIfExists('delivery_version', $data ?? [], null);
        $this->setIfExists('department_classification_by_cust', $data ?? [], null);
        $this->setIfExists('distribution_channel', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('eu_delivery_item_arc_status', $data ?? [], null);
        $this->setIfExists('fixed_shipg_procg_duration_in_days', $data ?? [], null);
        $this->setIfExists('gl_account', $data ?? [], null);
        $this->setIfExists('goods_movement_reason_code', $data ?? [], null);
        $this->setIfExists('goods_movement_status', $data ?? [], null);
        $this->setIfExists('goods_movement_type', $data ?? [], null);
        $this->setIfExists('higher_lvl_itm_of_bat_splt_itm', $data ?? [], null);
        $this->setIfExists('higher_level_item', $data ?? [], null);
        $this->setIfExists('inspection_lot', $data ?? [], null);
        $this->setIfExists('inspection_partial_lot', $data ?? [], null);
        $this->setIfExists('intercompany_billing_status', $data ?? [], null);
        $this->setIfExists('international_article_number', $data ?? [], null);
        $this->setIfExists('inventory_special_stock_type', $data ?? [], null);
        $this->setIfExists('inventory_valuation_type', $data ?? [], null);
        $this->setIfExists('is_completely_delivered', $data ?? [], null);
        $this->setIfExists('is_not_goods_movements_relevant', $data ?? [], null);
        $this->setIfExists('is_separate_valuation', $data ?? [], null);
        $this->setIfExists('issg_or_rcvg_batch', $data ?? [], null);
        $this->setIfExists('issg_or_rcvg_material', $data ?? [], null);
        $this->setIfExists('issg_or_rcvg_spcl_stock_ind', $data ?? [], null);
        $this->setIfExists('issg_or_rcvg_stock_category', $data ?? [], null);
        $this->setIfExists('issg_or_rcvg_valuation_type', $data ?? [], null);
        $this->setIfExists('issuing_or_receiving_plant', $data ?? [], null);
        $this->setIfExists('issuing_or_receiving_storage_loc', $data ?? [], null);
        $this->setIfExists('item_billing_block_reason', $data ?? [], null);
        $this->setIfExists('item_billing_incompletion_status', $data ?? [], null);
        $this->setIfExists('item_delivery_incompletion_status', $data ?? [], null);
        $this->setIfExists('item_gds_mvt_incompletion_sts', $data ?? [], null);
        $this->setIfExists('item_general_incompletion_status', $data ?? [], null);
        $this->setIfExists('item_gross_weight', $data ?? [], null);
        $this->setIfExists('item_is_billing_relevant', $data ?? [], null);
        $this->setIfExists('item_net_weight', $data ?? [], null);
        $this->setIfExists('item_packing_incompletion_status', $data ?? [], null);
        $this->setIfExists('item_picking_incompletion_status', $data ?? [], null);
        $this->setIfExists('item_volume', $data ?? [], null);
        $this->setIfExists('item_volume_unit', $data ?? [], null);
        $this->setIfExists('item_weight_unit', $data ?? [], null);
        $this->setIfExists('last_change_date', $data ?? [], null);
        $this->setIfExists('loading_group', $data ?? [], null);
        $this->setIfExists('manufacture_date', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('material_by_customer', $data ?? [], null);
        $this->setIfExists('material_freight_group', $data ?? [], null);
        $this->setIfExists('material_group', $data ?? [], null);
        $this->setIfExists('material_is_batch_managed', $data ?? [], null);
        $this->setIfExists('material_is_int_batch_managed', $data ?? [], null);
        $this->setIfExists('number_of_serial_numbers', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order_item', $data ?? [], null);
        $this->setIfExists('original_delivery_quantity', $data ?? [], null);
        $this->setIfExists('originally_requested_material', $data ?? [], null);
        $this->setIfExists('overdeliv_tolrtd_lmt_ratio_in_pct', $data ?? [], null);
        $this->setIfExists('packing_status', $data ?? [], null);
        $this->setIfExists('partial_delivery_is_allowed', $data ?? [], null);
        $this->setIfExists('payment_guarantee_form', $data ?? [], null);
        $this->setIfExists('picking_confirmation_status', $data ?? [], null);
        $this->setIfExists('picking_control', $data ?? [], null);
        $this->setIfExists('picking_status', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('primary_posting_switch', $data ?? [], null);
        $this->setIfExists('product_availability_date', $data ?? [], null);
        $this->setIfExists('product_availability_time', $data ?? [], null);
        $this->setIfExists('product_configuration', $data ?? [], null);
        $this->setIfExists('product_hierarchy_node', $data ?? [], null);
        $this->setIfExists('profitability_segment', $data ?? [], null);
        $this->setIfExists('profit_center', $data ?? [], null);
        $this->setIfExists('proof_of_delivery_relevance_code', $data ?? [], null);
        $this->setIfExists('proof_of_delivery_status', $data ?? [], null);
        $this->setIfExists('quantity_is_fixed', $data ?? [], null);
        $this->setIfExists('receiving_point', $data ?? [], null);
        $this->setIfExists('reference_document_logical_system', $data ?? [], null);
        $this->setIfExists('reference_sd_document', $data ?? [], null);
        $this->setIfExists('reference_sd_document_category', $data ?? [], null);
        $this->setIfExists('reference_sd_document_item', $data ?? [], null);
        $this->setIfExists('retail_promotion', $data ?? [], null);
        $this->setIfExists('sales_document_item_type', $data ?? [], null);
        $this->setIfExists('sales_group', $data ?? [], null);
        $this->setIfExists('sales_office', $data ?? [], null);
        $this->setIfExists('sd_document_category', $data ?? [], null);
        $this->setIfExists('sd_process_status', $data ?? [], null);
        $this->setIfExists('shelf_life_expiration_date', $data ?? [], null);
        $this->setIfExists('statistics_date', $data ?? [], null);
        $this->setIfExists('stock_type', $data ?? [], null);
        $this->setIfExists('storage_bin', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('storage_type', $data ?? [], null);
        $this->setIfExists('subsequent_movement_type', $data ?? [], null);
        $this->setIfExists('transportation_group', $data ?? [], null);
        $this->setIfExists('underdeliv_tolrtd_lmt_ratio_in_pct', $data ?? [], null);
        $this->setIfExists('unlimited_overdelivery_is_allowed', $data ?? [], null);
        $this->setIfExists('varbl_shipg_procg_duration_in_days', $data ?? [], null);
        $this->setIfExists('warehouse', $data ?? [], null);
        $this->setIfExists('warehouse_activity_status', $data ?? [], null);
        $this->setIfExists('warehouse_staging_area', $data ?? [], null);
        $this->setIfExists('warehouse_stock_category', $data ?? [], null);
        $this->setIfExists('warehouse_storage_bin', $data ?? [], null);
        $this->setIfExists('to_serial_delivery_item', $data ?? [], null);
        $this->setIfExists('to_document_flow', $data ?? [], null);
        $this->setIfExists('to_handling_unit_item_delivery', $data ?? [], null);
        $this->setIfExists('to_delivery_document_item_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['additional_customer_group1']) && (mb_strlen($this->container['additional_customer_group1']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group1', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group2']) && (mb_strlen($this->container['additional_customer_group2']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group2', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group3']) && (mb_strlen($this->container['additional_customer_group3']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group4']) && (mb_strlen($this->container['additional_customer_group4']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group4', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group5']) && (mb_strlen($this->container['additional_customer_group5']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group1']) && (mb_strlen($this->container['additional_material_group1']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group1', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group2']) && (mb_strlen($this->container['additional_material_group2']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group2', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group3']) && (mb_strlen($this->container['additional_material_group3']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group4']) && (mb_strlen($this->container['additional_material_group4']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group4', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group5']) && (mb_strlen($this->container['additional_material_group5']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['alternate_product_number']) && (mb_strlen($this->container['alternate_product_number']) > 40)) {
            $invalidProperties[] = "invalid value for 'alternate_product_number', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['batch_by_supplier']) && (mb_strlen($this->container['batch_by_supplier']) > 15)) {
            $invalidProperties[] = "invalid value for 'batch_by_supplier', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['batch_classification']) && (mb_strlen($this->container['batch_classification']) > 18)) {
            $invalidProperties[] = "invalid value for 'batch_classification', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['bom_explosion']) && (mb_strlen($this->container['bom_explosion']) > 8)) {
            $invalidProperties[] = "invalid value for 'bom_explosion', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['business_area']) && (mb_strlen($this->container['business_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'business_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['consumption_posting']) && (mb_strlen($this->container['consumption_posting']) > 1)) {
            $invalidProperties[] = "invalid value for 'consumption_posting', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['controlling_area']) && (mb_strlen($this->container['controlling_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'controlling_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['cost_center']) && (mb_strlen($this->container['cost_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'cost_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['created_by_user']) && (mb_strlen($this->container['created_by_user']) > 12)) {
            $invalidProperties[] = "invalid value for 'created_by_user', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['cust_engineering_chg_status']) && (mb_strlen($this->container['cust_engineering_chg_status']) > 17)) {
            $invalidProperties[] = "invalid value for 'cust_engineering_chg_status', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['delivery_document']) && (mb_strlen($this->container['delivery_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_document_item']) && (mb_strlen($this->container['delivery_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'delivery_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['delivery_document_item_category']) && (mb_strlen($this->container['delivery_document_item_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'delivery_document_item_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['delivery_document_item_text']) && (mb_strlen($this->container['delivery_document_item_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'delivery_document_item_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['delivery_group']) && (mb_strlen($this->container['delivery_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'delivery_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['delivery_quantity_unit']) && (mb_strlen($this->container['delivery_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'delivery_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['delivery_related_billing_status']) && (mb_strlen($this->container['delivery_related_billing_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'delivery_related_billing_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['delivery_version']) && (mb_strlen($this->container['delivery_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'delivery_version', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['department_classification_by_cust']) && (mb_strlen($this->container['department_classification_by_cust']) > 4)) {
            $invalidProperties[] = "invalid value for 'department_classification_by_cust', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['distribution_channel']) && (mb_strlen($this->container['distribution_channel']) > 2)) {
            $invalidProperties[] = "invalid value for 'distribution_channel', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['division']) && (mb_strlen($this->container['division']) > 2)) {
            $invalidProperties[] = "invalid value for 'division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['eu_delivery_item_arc_status']) && (mb_strlen($this->container['eu_delivery_item_arc_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'eu_delivery_item_arc_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['gl_account']) && (mb_strlen($this->container['gl_account']) > 10)) {
            $invalidProperties[] = "invalid value for 'gl_account', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['goods_movement_reason_code']) && (mb_strlen($this->container['goods_movement_reason_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'goods_movement_reason_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['goods_movement_status']) && (mb_strlen($this->container['goods_movement_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'goods_movement_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['goods_movement_type']) && (mb_strlen($this->container['goods_movement_type']) > 3)) {
            $invalidProperties[] = "invalid value for 'goods_movement_type', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['higher_lvl_itm_of_bat_splt_itm']) && (mb_strlen($this->container['higher_lvl_itm_of_bat_splt_itm']) > 6)) {
            $invalidProperties[] = "invalid value for 'higher_lvl_itm_of_bat_splt_itm', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['higher_level_item']) && (mb_strlen($this->container['higher_level_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'higher_level_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['inspection_lot']) && (mb_strlen($this->container['inspection_lot']) > 12)) {
            $invalidProperties[] = "invalid value for 'inspection_lot', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['inspection_partial_lot']) && (mb_strlen($this->container['inspection_partial_lot']) > 6)) {
            $invalidProperties[] = "invalid value for 'inspection_partial_lot', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['intercompany_billing_status']) && (mb_strlen($this->container['intercompany_billing_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'intercompany_billing_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['international_article_number']) && (mb_strlen($this->container['international_article_number']) > 18)) {
            $invalidProperties[] = "invalid value for 'international_article_number', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['inventory_special_stock_type']) && (mb_strlen($this->container['inventory_special_stock_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'inventory_special_stock_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['inventory_valuation_type']) && (mb_strlen($this->container['inventory_valuation_type']) > 10)) {
            $invalidProperties[] = "invalid value for 'inventory_valuation_type', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['is_not_goods_movements_relevant']) && (mb_strlen($this->container['is_not_goods_movements_relevant']) > 1)) {
            $invalidProperties[] = "invalid value for 'is_not_goods_movements_relevant', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['issg_or_rcvg_batch']) && (mb_strlen($this->container['issg_or_rcvg_batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'issg_or_rcvg_batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['issg_or_rcvg_material']) && (mb_strlen($this->container['issg_or_rcvg_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'issg_or_rcvg_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['issg_or_rcvg_spcl_stock_ind']) && (mb_strlen($this->container['issg_or_rcvg_spcl_stock_ind']) > 1)) {
            $invalidProperties[] = "invalid value for 'issg_or_rcvg_spcl_stock_ind', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['issg_or_rcvg_stock_category']) && (mb_strlen($this->container['issg_or_rcvg_stock_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'issg_or_rcvg_stock_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['issg_or_rcvg_valuation_type']) && (mb_strlen($this->container['issg_or_rcvg_valuation_type']) > 10)) {
            $invalidProperties[] = "invalid value for 'issg_or_rcvg_valuation_type', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['issuing_or_receiving_plant']) && (mb_strlen($this->container['issuing_or_receiving_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'issuing_or_receiving_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['issuing_or_receiving_storage_loc']) && (mb_strlen($this->container['issuing_or_receiving_storage_loc']) > 4)) {
            $invalidProperties[] = "invalid value for 'issuing_or_receiving_storage_loc', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['item_billing_block_reason']) && (mb_strlen($this->container['item_billing_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'item_billing_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['item_billing_incompletion_status']) && (mb_strlen($this->container['item_billing_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'item_billing_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['item_delivery_incompletion_status']) && (mb_strlen($this->container['item_delivery_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'item_delivery_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['item_gds_mvt_incompletion_sts']) && (mb_strlen($this->container['item_gds_mvt_incompletion_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'item_gds_mvt_incompletion_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['item_general_incompletion_status']) && (mb_strlen($this->container['item_general_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'item_general_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['item_is_billing_relevant']) && (mb_strlen($this->container['item_is_billing_relevant']) > 1)) {
            $invalidProperties[] = "invalid value for 'item_is_billing_relevant', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['item_packing_incompletion_status']) && (mb_strlen($this->container['item_packing_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'item_packing_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['item_picking_incompletion_status']) && (mb_strlen($this->container['item_picking_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'item_picking_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['item_volume_unit']) && (mb_strlen($this->container['item_volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_unit']) && (mb_strlen($this->container['item_weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['loading_group']) && (mb_strlen($this->container['loading_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'loading_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 40)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['material_by_customer']) && (mb_strlen($this->container['material_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'material_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['material_freight_group']) && (mb_strlen($this->container['material_freight_group']) > 8)) {
            $invalidProperties[] = "invalid value for 'material_freight_group', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['material_group']) && (mb_strlen($this->container['material_group']) > 9)) {
            $invalidProperties[] = "invalid value for 'material_group', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) > 12)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['order_item']) && (mb_strlen($this->container['order_item']) > 4)) {
            $invalidProperties[] = "invalid value for 'order_item', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['originally_requested_material']) && (mb_strlen($this->container['originally_requested_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'originally_requested_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['packing_status']) && (mb_strlen($this->container['packing_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'packing_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['partial_delivery_is_allowed']) && (mb_strlen($this->container['partial_delivery_is_allowed']) > 1)) {
            $invalidProperties[] = "invalid value for 'partial_delivery_is_allowed', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['payment_guarantee_form']) && (mb_strlen($this->container['payment_guarantee_form']) > 2)) {
            $invalidProperties[] = "invalid value for 'payment_guarantee_form', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['picking_confirmation_status']) && (mb_strlen($this->container['picking_confirmation_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'picking_confirmation_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['picking_control']) && (mb_strlen($this->container['picking_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'picking_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['picking_status']) && (mb_strlen($this->container['picking_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'picking_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['primary_posting_switch']) && (mb_strlen($this->container['primary_posting_switch']) > 1)) {
            $invalidProperties[] = "invalid value for 'primary_posting_switch', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_configuration']) && (mb_strlen($this->container['product_configuration']) > 18)) {
            $invalidProperties[] = "invalid value for 'product_configuration', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['product_hierarchy_node']) && (mb_strlen($this->container['product_hierarchy_node']) > 18)) {
            $invalidProperties[] = "invalid value for 'product_hierarchy_node', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['profitability_segment']) && (mb_strlen($this->container['profitability_segment']) > 10)) {
            $invalidProperties[] = "invalid value for 'profitability_segment', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['profit_center']) && (mb_strlen($this->container['profit_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'profit_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['proof_of_delivery_relevance_code']) && (mb_strlen($this->container['proof_of_delivery_relevance_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'proof_of_delivery_relevance_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['proof_of_delivery_status']) && (mb_strlen($this->container['proof_of_delivery_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'proof_of_delivery_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['receiving_point']) && (mb_strlen($this->container['receiving_point']) > 25)) {
            $invalidProperties[] = "invalid value for 'receiving_point', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['reference_document_logical_system']) && (mb_strlen($this->container['reference_document_logical_system']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_document_logical_system', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document']) && (mb_strlen($this->container['reference_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document_category']) && (mb_strlen($this->container['reference_sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['reference_sd_document_item']) && (mb_strlen($this->container['reference_sd_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['retail_promotion']) && (mb_strlen($this->container['retail_promotion']) > 10)) {
            $invalidProperties[] = "invalid value for 'retail_promotion', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_document_item_type']) && (mb_strlen($this->container['sales_document_item_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'sales_document_item_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['sales_group']) && (mb_strlen($this->container['sales_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'sales_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['sales_office']) && (mb_strlen($this->container['sales_office']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_office', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sd_document_category']) && (mb_strlen($this->container['sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sd_process_status']) && (mb_strlen($this->container['sd_process_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'sd_process_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['stock_type']) && (mb_strlen($this->container['stock_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'stock_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['storage_bin']) && (mb_strlen($this->container['storage_bin']) > 10)) {
            $invalidProperties[] = "invalid value for 'storage_bin', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['storage_type']) && (mb_strlen($this->container['storage_type']) > 3)) {
            $invalidProperties[] = "invalid value for 'storage_type', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['subsequent_movement_type']) && (mb_strlen($this->container['subsequent_movement_type']) > 3)) {
            $invalidProperties[] = "invalid value for 'subsequent_movement_type', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['transportation_group']) && (mb_strlen($this->container['transportation_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'transportation_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['warehouse']) && (mb_strlen($this->container['warehouse']) > 3)) {
            $invalidProperties[] = "invalid value for 'warehouse', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['warehouse_activity_status']) && (mb_strlen($this->container['warehouse_activity_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'warehouse_activity_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['warehouse_staging_area']) && (mb_strlen($this->container['warehouse_staging_area']) > 10)) {
            $invalidProperties[] = "invalid value for 'warehouse_staging_area', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['warehouse_stock_category']) && (mb_strlen($this->container['warehouse_stock_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'warehouse_stock_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['warehouse_storage_bin']) && (mb_strlen($this->container['warehouse_storage_bin']) > 10)) {
            $invalidProperties[] = "invalid value for 'warehouse_storage_bin', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_delivered_qty_in_base_unit
     *
     * @return float|null
     */
    public function getActualDeliveredQtyInBaseUnit()
    {
        return $this->container['actual_delivered_qty_in_base_unit'];
    }

    /**
     * Sets actual_delivered_qty_in_base_unit
     *
     * @param float|null $actual_delivered_qty_in_base_unit actual_delivered_qty_in_base_unit
     *
     * @return self
     */
    public function setActualDeliveredQtyInBaseUnit($actual_delivered_qty_in_base_unit)
    {
        if (is_null($actual_delivered_qty_in_base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'actual_delivered_qty_in_base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_delivered_qty_in_base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['actual_delivered_qty_in_base_unit'] = $actual_delivered_qty_in_base_unit;

        return $this;
    }

    /**
     * Gets actual_delivery_quantity
     *
     * @return float|null
     */
    public function getActualDeliveryQuantity()
    {
        return $this->container['actual_delivery_quantity'];
    }

    /**
     * Sets actual_delivery_quantity
     *
     * @param float|null $actual_delivery_quantity actual_delivery_quantity
     *
     * @return self
     */
    public function setActualDeliveryQuantity($actual_delivery_quantity)
    {
        if (is_null($actual_delivery_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'actual_delivery_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_delivery_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['actual_delivery_quantity'] = $actual_delivery_quantity;

        return $this;
    }

    /**
     * Gets additional_customer_group1
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup1()
    {
        return $this->container['additional_customer_group1'];
    }

    /**
     * Sets additional_customer_group1
     *
     * @param string|null $additional_customer_group1 additional_customer_group1
     *
     * @return self
     */
    public function setAdditionalCustomerGroup1($additional_customer_group1)
    {
        if (is_null($additional_customer_group1)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group1) && (mb_strlen($additional_customer_group1) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group1 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group1'] = $additional_customer_group1;

        return $this;
    }

    /**
     * Gets additional_customer_group2
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup2()
    {
        return $this->container['additional_customer_group2'];
    }

    /**
     * Sets additional_customer_group2
     *
     * @param string|null $additional_customer_group2 additional_customer_group2
     *
     * @return self
     */
    public function setAdditionalCustomerGroup2($additional_customer_group2)
    {
        if (is_null($additional_customer_group2)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group2) && (mb_strlen($additional_customer_group2) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group2 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group2'] = $additional_customer_group2;

        return $this;
    }

    /**
     * Gets additional_customer_group3
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup3()
    {
        return $this->container['additional_customer_group3'];
    }

    /**
     * Sets additional_customer_group3
     *
     * @param string|null $additional_customer_group3 additional_customer_group3
     *
     * @return self
     */
    public function setAdditionalCustomerGroup3($additional_customer_group3)
    {
        if (is_null($additional_customer_group3)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group3) && (mb_strlen($additional_customer_group3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group3 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group3'] = $additional_customer_group3;

        return $this;
    }

    /**
     * Gets additional_customer_group4
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup4()
    {
        return $this->container['additional_customer_group4'];
    }

    /**
     * Sets additional_customer_group4
     *
     * @param string|null $additional_customer_group4 additional_customer_group4
     *
     * @return self
     */
    public function setAdditionalCustomerGroup4($additional_customer_group4)
    {
        if (is_null($additional_customer_group4)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group4) && (mb_strlen($additional_customer_group4) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group4 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group4'] = $additional_customer_group4;

        return $this;
    }

    /**
     * Gets additional_customer_group5
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup5()
    {
        return $this->container['additional_customer_group5'];
    }

    /**
     * Sets additional_customer_group5
     *
     * @param string|null $additional_customer_group5 additional_customer_group5
     *
     * @return self
     */
    public function setAdditionalCustomerGroup5($additional_customer_group5)
    {
        if (is_null($additional_customer_group5)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group5) && (mb_strlen($additional_customer_group5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group5 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group5'] = $additional_customer_group5;

        return $this;
    }

    /**
     * Gets additional_material_group1
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup1()
    {
        return $this->container['additional_material_group1'];
    }

    /**
     * Sets additional_material_group1
     *
     * @param string|null $additional_material_group1 additional_material_group1
     *
     * @return self
     */
    public function setAdditionalMaterialGroup1($additional_material_group1)
    {
        if (is_null($additional_material_group1)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group1) && (mb_strlen($additional_material_group1) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group1 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group1'] = $additional_material_group1;

        return $this;
    }

    /**
     * Gets additional_material_group2
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup2()
    {
        return $this->container['additional_material_group2'];
    }

    /**
     * Sets additional_material_group2
     *
     * @param string|null $additional_material_group2 additional_material_group2
     *
     * @return self
     */
    public function setAdditionalMaterialGroup2($additional_material_group2)
    {
        if (is_null($additional_material_group2)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group2) && (mb_strlen($additional_material_group2) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group2 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group2'] = $additional_material_group2;

        return $this;
    }

    /**
     * Gets additional_material_group3
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup3()
    {
        return $this->container['additional_material_group3'];
    }

    /**
     * Sets additional_material_group3
     *
     * @param string|null $additional_material_group3 additional_material_group3
     *
     * @return self
     */
    public function setAdditionalMaterialGroup3($additional_material_group3)
    {
        if (is_null($additional_material_group3)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group3) && (mb_strlen($additional_material_group3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group3 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group3'] = $additional_material_group3;

        return $this;
    }

    /**
     * Gets additional_material_group4
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup4()
    {
        return $this->container['additional_material_group4'];
    }

    /**
     * Sets additional_material_group4
     *
     * @param string|null $additional_material_group4 additional_material_group4
     *
     * @return self
     */
    public function setAdditionalMaterialGroup4($additional_material_group4)
    {
        if (is_null($additional_material_group4)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group4) && (mb_strlen($additional_material_group4) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group4 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group4'] = $additional_material_group4;

        return $this;
    }

    /**
     * Gets additional_material_group5
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup5()
    {
        return $this->container['additional_material_group5'];
    }

    /**
     * Sets additional_material_group5
     *
     * @param string|null $additional_material_group5 additional_material_group5
     *
     * @return self
     */
    public function setAdditionalMaterialGroup5($additional_material_group5)
    {
        if (is_null($additional_material_group5)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group5) && (mb_strlen($additional_material_group5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group5 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group5'] = $additional_material_group5;

        return $this;
    }

    /**
     * Gets alternate_product_number
     *
     * @return string|null
     */
    public function getAlternateProductNumber()
    {
        return $this->container['alternate_product_number'];
    }

    /**
     * Sets alternate_product_number
     *
     * @param string|null $alternate_product_number alternate_product_number
     *
     * @return self
     */
    public function setAlternateProductNumber($alternate_product_number)
    {
        if (is_null($alternate_product_number)) {
            array_push($this->openAPINullablesSetToNull, 'alternate_product_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alternate_product_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($alternate_product_number) && (mb_strlen($alternate_product_number) > 40)) {
            throw new \InvalidArgumentException('invalid length for $alternate_product_number when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 40.');
        }

        $this->container['alternate_product_number'] = $alternate_product_number;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($base_unit) && (mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch batch
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch) && (mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets batch_by_supplier
     *
     * @return string|null
     */
    public function getBatchBySupplier()
    {
        return $this->container['batch_by_supplier'];
    }

    /**
     * Sets batch_by_supplier
     *
     * @param string|null $batch_by_supplier batch_by_supplier
     *
     * @return self
     */
    public function setBatchBySupplier($batch_by_supplier)
    {
        if (is_null($batch_by_supplier)) {
            array_push($this->openAPINullablesSetToNull, 'batch_by_supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch_by_supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch_by_supplier) && (mb_strlen($batch_by_supplier) > 15)) {
            throw new \InvalidArgumentException('invalid length for $batch_by_supplier when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 15.');
        }

        $this->container['batch_by_supplier'] = $batch_by_supplier;

        return $this;
    }

    /**
     * Gets batch_classification
     *
     * @return string|null
     */
    public function getBatchClassification()
    {
        return $this->container['batch_classification'];
    }

    /**
     * Sets batch_classification
     *
     * @param string|null $batch_classification batch_classification
     *
     * @return self
     */
    public function setBatchClassification($batch_classification)
    {
        if (is_null($batch_classification)) {
            array_push($this->openAPINullablesSetToNull, 'batch_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch_classification) && (mb_strlen($batch_classification) > 18)) {
            throw new \InvalidArgumentException('invalid length for $batch_classification when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 18.');
        }

        $this->container['batch_classification'] = $batch_classification;

        return $this;
    }

    /**
     * Gets bom_explosion
     *
     * @return string|null
     */
    public function getBomExplosion()
    {
        return $this->container['bom_explosion'];
    }

    /**
     * Sets bom_explosion
     *
     * @param string|null $bom_explosion bom_explosion
     *
     * @return self
     */
    public function setBomExplosion($bom_explosion)
    {
        if (is_null($bom_explosion)) {
            array_push($this->openAPINullablesSetToNull, 'bom_explosion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bom_explosion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bom_explosion) && (mb_strlen($bom_explosion) > 8)) {
            throw new \InvalidArgumentException('invalid length for $bom_explosion when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 8.');
        }

        $this->container['bom_explosion'] = $bom_explosion;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return string|null
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param string|null $business_area business_area
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            array_push($this->openAPINullablesSetToNull, 'business_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_area) && (mb_strlen($business_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $business_area when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets consumption_posting
     *
     * @return string|null
     */
    public function getConsumptionPosting()
    {
        return $this->container['consumption_posting'];
    }

    /**
     * Sets consumption_posting
     *
     * @param string|null $consumption_posting consumption_posting
     *
     * @return self
     */
    public function setConsumptionPosting($consumption_posting)
    {
        if (is_null($consumption_posting)) {
            array_push($this->openAPINullablesSetToNull, 'consumption_posting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('consumption_posting', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($consumption_posting) && (mb_strlen($consumption_posting) > 1)) {
            throw new \InvalidArgumentException('invalid length for $consumption_posting when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['consumption_posting'] = $consumption_posting;

        return $this;
    }

    /**
     * Gets controlling_area
     *
     * @return string|null
     */
    public function getControllingArea()
    {
        return $this->container['controlling_area'];
    }

    /**
     * Sets controlling_area
     *
     * @param string|null $controlling_area controlling_area
     *
     * @return self
     */
    public function setControllingArea($controlling_area)
    {
        if (is_null($controlling_area)) {
            array_push($this->openAPINullablesSetToNull, 'controlling_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('controlling_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($controlling_area) && (mb_strlen($controlling_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $controlling_area when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['controlling_area'] = $controlling_area;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string|null $cost_center cost_center
     *
     * @return self
     */
    public function setCostCenter($cost_center)
    {
        if (is_null($cost_center)) {
            array_push($this->openAPINullablesSetToNull, 'cost_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cost_center) && (mb_strlen($cost_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $cost_center when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user created_by_user
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($created_by_user) && (mb_strlen($created_by_user) > 12)) {
            throw new \InvalidArgumentException('invalid length for $created_by_user when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 12.');
        }

        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string|null $creation_time creation_time
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            array_push($this->openAPINullablesSetToNull, 'creation_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets cust_engineering_chg_status
     *
     * @return string|null
     */
    public function getCustEngineeringChgStatus()
    {
        return $this->container['cust_engineering_chg_status'];
    }

    /**
     * Sets cust_engineering_chg_status
     *
     * @param string|null $cust_engineering_chg_status cust_engineering_chg_status
     *
     * @return self
     */
    public function setCustEngineeringChgStatus($cust_engineering_chg_status)
    {
        if (is_null($cust_engineering_chg_status)) {
            array_push($this->openAPINullablesSetToNull, 'cust_engineering_chg_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cust_engineering_chg_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cust_engineering_chg_status) && (mb_strlen($cust_engineering_chg_status) > 17)) {
            throw new \InvalidArgumentException('invalid length for $cust_engineering_chg_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 17.');
        }

        $this->container['cust_engineering_chg_status'] = $cust_engineering_chg_status;

        return $this;
    }

    /**
     * Gets delivery_document
     *
     * @return string|null
     */
    public function getDeliveryDocument()
    {
        return $this->container['delivery_document'];
    }

    /**
     * Sets delivery_document
     *
     * @param string|null $delivery_document delivery_document
     *
     * @return self
     */
    public function setDeliveryDocument($delivery_document)
    {
        if (is_null($delivery_document)) {
            throw new \InvalidArgumentException('non-nullable delivery_document cannot be null');
        }
        if ((mb_strlen($delivery_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['delivery_document'] = $delivery_document;

        return $this;
    }

    /**
     * Gets delivery_document_item
     *
     * @return string|null
     */
    public function getDeliveryDocumentItem()
    {
        return $this->container['delivery_document_item'];
    }

    /**
     * Sets delivery_document_item
     *
     * @param string|null $delivery_document_item delivery_document_item
     *
     * @return self
     */
    public function setDeliveryDocumentItem($delivery_document_item)
    {
        if (is_null($delivery_document_item)) {
            throw new \InvalidArgumentException('non-nullable delivery_document_item cannot be null');
        }
        if ((mb_strlen($delivery_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document_item when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 6.');
        }

        $this->container['delivery_document_item'] = $delivery_document_item;

        return $this;
    }

    /**
     * Gets delivery_document_item_category
     *
     * @return string|null
     */
    public function getDeliveryDocumentItemCategory()
    {
        return $this->container['delivery_document_item_category'];
    }

    /**
     * Sets delivery_document_item_category
     *
     * @param string|null $delivery_document_item_category delivery_document_item_category
     *
     * @return self
     */
    public function setDeliveryDocumentItemCategory($delivery_document_item_category)
    {
        if (is_null($delivery_document_item_category)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_document_item_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_document_item_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_document_item_category) && (mb_strlen($delivery_document_item_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document_item_category when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['delivery_document_item_category'] = $delivery_document_item_category;

        return $this;
    }

    /**
     * Gets delivery_document_item_text
     *
     * @return string|null
     */
    public function getDeliveryDocumentItemText()
    {
        return $this->container['delivery_document_item_text'];
    }

    /**
     * Sets delivery_document_item_text
     *
     * @param string|null $delivery_document_item_text delivery_document_item_text
     *
     * @return self
     */
    public function setDeliveryDocumentItemText($delivery_document_item_text)
    {
        if (is_null($delivery_document_item_text)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_document_item_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_document_item_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_document_item_text) && (mb_strlen($delivery_document_item_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document_item_text when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 40.');
        }

        $this->container['delivery_document_item_text'] = $delivery_document_item_text;

        return $this;
    }

    /**
     * Gets delivery_group
     *
     * @return string|null
     */
    public function getDeliveryGroup()
    {
        return $this->container['delivery_group'];
    }

    /**
     * Sets delivery_group
     *
     * @param string|null $delivery_group delivery_group
     *
     * @return self
     */
    public function setDeliveryGroup($delivery_group)
    {
        if (is_null($delivery_group)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_group) && (mb_strlen($delivery_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $delivery_group when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['delivery_group'] = $delivery_group;

        return $this;
    }

    /**
     * Gets delivery_quantity_unit
     *
     * @return string|null
     */
    public function getDeliveryQuantityUnit()
    {
        return $this->container['delivery_quantity_unit'];
    }

    /**
     * Sets delivery_quantity_unit
     *
     * @param string|null $delivery_quantity_unit delivery_quantity_unit
     *
     * @return self
     */
    public function setDeliveryQuantityUnit($delivery_quantity_unit)
    {
        if (is_null($delivery_quantity_unit)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_quantity_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_quantity_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_quantity_unit) && (mb_strlen($delivery_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $delivery_quantity_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['delivery_quantity_unit'] = $delivery_quantity_unit;

        return $this;
    }

    /**
     * Gets delivery_related_billing_status
     *
     * @return string|null
     */
    public function getDeliveryRelatedBillingStatus()
    {
        return $this->container['delivery_related_billing_status'];
    }

    /**
     * Sets delivery_related_billing_status
     *
     * @param string|null $delivery_related_billing_status delivery_related_billing_status
     *
     * @return self
     */
    public function setDeliveryRelatedBillingStatus($delivery_related_billing_status)
    {
        if (is_null($delivery_related_billing_status)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_related_billing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_related_billing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_related_billing_status) && (mb_strlen($delivery_related_billing_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $delivery_related_billing_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['delivery_related_billing_status'] = $delivery_related_billing_status;

        return $this;
    }

    /**
     * Gets delivery_to_base_quantity_dnmntr
     *
     * @return float|null
     */
    public function getDeliveryToBaseQuantityDnmntr()
    {
        return $this->container['delivery_to_base_quantity_dnmntr'];
    }

    /**
     * Sets delivery_to_base_quantity_dnmntr
     *
     * @param float|null $delivery_to_base_quantity_dnmntr delivery_to_base_quantity_dnmntr
     *
     * @return self
     */
    public function setDeliveryToBaseQuantityDnmntr($delivery_to_base_quantity_dnmntr)
    {
        if (is_null($delivery_to_base_quantity_dnmntr)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_to_base_quantity_dnmntr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_to_base_quantity_dnmntr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['delivery_to_base_quantity_dnmntr'] = $delivery_to_base_quantity_dnmntr;

        return $this;
    }

    /**
     * Gets delivery_to_base_quantity_nmrtr
     *
     * @return float|null
     */
    public function getDeliveryToBaseQuantityNmrtr()
    {
        return $this->container['delivery_to_base_quantity_nmrtr'];
    }

    /**
     * Sets delivery_to_base_quantity_nmrtr
     *
     * @param float|null $delivery_to_base_quantity_nmrtr delivery_to_base_quantity_nmrtr
     *
     * @return self
     */
    public function setDeliveryToBaseQuantityNmrtr($delivery_to_base_quantity_nmrtr)
    {
        if (is_null($delivery_to_base_quantity_nmrtr)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_to_base_quantity_nmrtr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_to_base_quantity_nmrtr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['delivery_to_base_quantity_nmrtr'] = $delivery_to_base_quantity_nmrtr;

        return $this;
    }

    /**
     * Gets delivery_version
     *
     * @return string|null
     */
    public function getDeliveryVersion()
    {
        return $this->container['delivery_version'];
    }

    /**
     * Sets delivery_version
     *
     * @param string|null $delivery_version delivery_version
     *
     * @return self
     */
    public function setDeliveryVersion($delivery_version)
    {
        if (is_null($delivery_version)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_version) && (mb_strlen($delivery_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $delivery_version when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['delivery_version'] = $delivery_version;

        return $this;
    }

    /**
     * Gets department_classification_by_cust
     *
     * @return string|null
     */
    public function getDepartmentClassificationByCust()
    {
        return $this->container['department_classification_by_cust'];
    }

    /**
     * Sets department_classification_by_cust
     *
     * @param string|null $department_classification_by_cust department_classification_by_cust
     *
     * @return self
     */
    public function setDepartmentClassificationByCust($department_classification_by_cust)
    {
        if (is_null($department_classification_by_cust)) {
            array_push($this->openAPINullablesSetToNull, 'department_classification_by_cust');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department_classification_by_cust', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($department_classification_by_cust) && (mb_strlen($department_classification_by_cust) > 4)) {
            throw new \InvalidArgumentException('invalid length for $department_classification_by_cust when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['department_classification_by_cust'] = $department_classification_by_cust;

        return $this;
    }

    /**
     * Gets distribution_channel
     *
     * @return string|null
     */
    public function getDistributionChannel()
    {
        return $this->container['distribution_channel'];
    }

    /**
     * Sets distribution_channel
     *
     * @param string|null $distribution_channel distribution_channel
     *
     * @return self
     */
    public function setDistributionChannel($distribution_channel)
    {
        if (is_null($distribution_channel)) {
            array_push($this->openAPINullablesSetToNull, 'distribution_channel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distribution_channel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($distribution_channel) && (mb_strlen($distribution_channel) > 2)) {
            throw new \InvalidArgumentException('invalid length for $distribution_channel when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 2.');
        }

        $this->container['distribution_channel'] = $distribution_channel;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division division
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            array_push($this->openAPINullablesSetToNull, 'division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($division) && (mb_strlen($division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $division when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 2.');
        }

        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets eu_delivery_item_arc_status
     *
     * @return string|null
     */
    public function getEuDeliveryItemArcStatus()
    {
        return $this->container['eu_delivery_item_arc_status'];
    }

    /**
     * Sets eu_delivery_item_arc_status
     *
     * @param string|null $eu_delivery_item_arc_status eu_delivery_item_arc_status
     *
     * @return self
     */
    public function setEuDeliveryItemArcStatus($eu_delivery_item_arc_status)
    {
        if (is_null($eu_delivery_item_arc_status)) {
            array_push($this->openAPINullablesSetToNull, 'eu_delivery_item_arc_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eu_delivery_item_arc_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($eu_delivery_item_arc_status) && (mb_strlen($eu_delivery_item_arc_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $eu_delivery_item_arc_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['eu_delivery_item_arc_status'] = $eu_delivery_item_arc_status;

        return $this;
    }

    /**
     * Gets fixed_shipg_procg_duration_in_days
     *
     * @return float|null
     */
    public function getFixedShipgProcgDurationInDays()
    {
        return $this->container['fixed_shipg_procg_duration_in_days'];
    }

    /**
     * Sets fixed_shipg_procg_duration_in_days
     *
     * @param float|null $fixed_shipg_procg_duration_in_days fixed_shipg_procg_duration_in_days
     *
     * @return self
     */
    public function setFixedShipgProcgDurationInDays($fixed_shipg_procg_duration_in_days)
    {
        if (is_null($fixed_shipg_procg_duration_in_days)) {
            array_push($this->openAPINullablesSetToNull, 'fixed_shipg_procg_duration_in_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixed_shipg_procg_duration_in_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['fixed_shipg_procg_duration_in_days'] = $fixed_shipg_procg_duration_in_days;

        return $this;
    }

    /**
     * Gets gl_account
     *
     * @return string|null
     */
    public function getGlAccount()
    {
        return $this->container['gl_account'];
    }

    /**
     * Sets gl_account
     *
     * @param string|null $gl_account gl_account
     *
     * @return self
     */
    public function setGlAccount($gl_account)
    {
        if (is_null($gl_account)) {
            array_push($this->openAPINullablesSetToNull, 'gl_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gl_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gl_account) && (mb_strlen($gl_account) > 10)) {
            throw new \InvalidArgumentException('invalid length for $gl_account when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['gl_account'] = $gl_account;

        return $this;
    }

    /**
     * Gets goods_movement_reason_code
     *
     * @return string|null
     */
    public function getGoodsMovementReasonCode()
    {
        return $this->container['goods_movement_reason_code'];
    }

    /**
     * Sets goods_movement_reason_code
     *
     * @param string|null $goods_movement_reason_code goods_movement_reason_code
     *
     * @return self
     */
    public function setGoodsMovementReasonCode($goods_movement_reason_code)
    {
        if (is_null($goods_movement_reason_code)) {
            array_push($this->openAPINullablesSetToNull, 'goods_movement_reason_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_movement_reason_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($goods_movement_reason_code) && (mb_strlen($goods_movement_reason_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $goods_movement_reason_code when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['goods_movement_reason_code'] = $goods_movement_reason_code;

        return $this;
    }

    /**
     * Gets goods_movement_status
     *
     * @return string|null
     */
    public function getGoodsMovementStatus()
    {
        return $this->container['goods_movement_status'];
    }

    /**
     * Sets goods_movement_status
     *
     * @param string|null $goods_movement_status goods_movement_status
     *
     * @return self
     */
    public function setGoodsMovementStatus($goods_movement_status)
    {
        if (is_null($goods_movement_status)) {
            array_push($this->openAPINullablesSetToNull, 'goods_movement_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_movement_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($goods_movement_status) && (mb_strlen($goods_movement_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $goods_movement_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['goods_movement_status'] = $goods_movement_status;

        return $this;
    }

    /**
     * Gets goods_movement_type
     *
     * @return string|null
     */
    public function getGoodsMovementType()
    {
        return $this->container['goods_movement_type'];
    }

    /**
     * Sets goods_movement_type
     *
     * @param string|null $goods_movement_type goods_movement_type
     *
     * @return self
     */
    public function setGoodsMovementType($goods_movement_type)
    {
        if (is_null($goods_movement_type)) {
            array_push($this->openAPINullablesSetToNull, 'goods_movement_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_movement_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($goods_movement_type) && (mb_strlen($goods_movement_type) > 3)) {
            throw new \InvalidArgumentException('invalid length for $goods_movement_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['goods_movement_type'] = $goods_movement_type;

        return $this;
    }

    /**
     * Gets higher_lvl_itm_of_bat_splt_itm
     *
     * @return string|null
     */
    public function getHigherLvlItmOfBatSpltItm()
    {
        return $this->container['higher_lvl_itm_of_bat_splt_itm'];
    }

    /**
     * Sets higher_lvl_itm_of_bat_splt_itm
     *
     * @param string|null $higher_lvl_itm_of_bat_splt_itm higher_lvl_itm_of_bat_splt_itm
     *
     * @return self
     */
    public function setHigherLvlItmOfBatSpltItm($higher_lvl_itm_of_bat_splt_itm)
    {
        if (is_null($higher_lvl_itm_of_bat_splt_itm)) {
            array_push($this->openAPINullablesSetToNull, 'higher_lvl_itm_of_bat_splt_itm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('higher_lvl_itm_of_bat_splt_itm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($higher_lvl_itm_of_bat_splt_itm) && (mb_strlen($higher_lvl_itm_of_bat_splt_itm) > 6)) {
            throw new \InvalidArgumentException('invalid length for $higher_lvl_itm_of_bat_splt_itm when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 6.');
        }

        $this->container['higher_lvl_itm_of_bat_splt_itm'] = $higher_lvl_itm_of_bat_splt_itm;

        return $this;
    }

    /**
     * Gets higher_level_item
     *
     * @return string|null
     */
    public function getHigherLevelItem()
    {
        return $this->container['higher_level_item'];
    }

    /**
     * Sets higher_level_item
     *
     * @param string|null $higher_level_item higher_level_item
     *
     * @return self
     */
    public function setHigherLevelItem($higher_level_item)
    {
        if (is_null($higher_level_item)) {
            array_push($this->openAPINullablesSetToNull, 'higher_level_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('higher_level_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($higher_level_item) && (mb_strlen($higher_level_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $higher_level_item when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 6.');
        }

        $this->container['higher_level_item'] = $higher_level_item;

        return $this;
    }

    /**
     * Gets inspection_lot
     *
     * @return string|null
     */
    public function getInspectionLot()
    {
        return $this->container['inspection_lot'];
    }

    /**
     * Sets inspection_lot
     *
     * @param string|null $inspection_lot inspection_lot
     *
     * @return self
     */
    public function setInspectionLot($inspection_lot)
    {
        if (is_null($inspection_lot)) {
            array_push($this->openAPINullablesSetToNull, 'inspection_lot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inspection_lot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inspection_lot) && (mb_strlen($inspection_lot) > 12)) {
            throw new \InvalidArgumentException('invalid length for $inspection_lot when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 12.');
        }

        $this->container['inspection_lot'] = $inspection_lot;

        return $this;
    }

    /**
     * Gets inspection_partial_lot
     *
     * @return string|null
     */
    public function getInspectionPartialLot()
    {
        return $this->container['inspection_partial_lot'];
    }

    /**
     * Sets inspection_partial_lot
     *
     * @param string|null $inspection_partial_lot inspection_partial_lot
     *
     * @return self
     */
    public function setInspectionPartialLot($inspection_partial_lot)
    {
        if (is_null($inspection_partial_lot)) {
            array_push($this->openAPINullablesSetToNull, 'inspection_partial_lot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inspection_partial_lot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inspection_partial_lot) && (mb_strlen($inspection_partial_lot) > 6)) {
            throw new \InvalidArgumentException('invalid length for $inspection_partial_lot when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 6.');
        }

        $this->container['inspection_partial_lot'] = $inspection_partial_lot;

        return $this;
    }

    /**
     * Gets intercompany_billing_status
     *
     * @return string|null
     */
    public function getIntercompanyBillingStatus()
    {
        return $this->container['intercompany_billing_status'];
    }

    /**
     * Sets intercompany_billing_status
     *
     * @param string|null $intercompany_billing_status intercompany_billing_status
     *
     * @return self
     */
    public function setIntercompanyBillingStatus($intercompany_billing_status)
    {
        if (is_null($intercompany_billing_status)) {
            array_push($this->openAPINullablesSetToNull, 'intercompany_billing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intercompany_billing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($intercompany_billing_status) && (mb_strlen($intercompany_billing_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $intercompany_billing_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['intercompany_billing_status'] = $intercompany_billing_status;

        return $this;
    }

    /**
     * Gets international_article_number
     *
     * @return string|null
     */
    public function getInternationalArticleNumber()
    {
        return $this->container['international_article_number'];
    }

    /**
     * Sets international_article_number
     *
     * @param string|null $international_article_number international_article_number
     *
     * @return self
     */
    public function setInternationalArticleNumber($international_article_number)
    {
        if (is_null($international_article_number)) {
            array_push($this->openAPINullablesSetToNull, 'international_article_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international_article_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($international_article_number) && (mb_strlen($international_article_number) > 18)) {
            throw new \InvalidArgumentException('invalid length for $international_article_number when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 18.');
        }

        $this->container['international_article_number'] = $international_article_number;

        return $this;
    }

    /**
     * Gets inventory_special_stock_type
     *
     * @return string|null
     */
    public function getInventorySpecialStockType()
    {
        return $this->container['inventory_special_stock_type'];
    }

    /**
     * Sets inventory_special_stock_type
     *
     * @param string|null $inventory_special_stock_type inventory_special_stock_type
     *
     * @return self
     */
    public function setInventorySpecialStockType($inventory_special_stock_type)
    {
        if (is_null($inventory_special_stock_type)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_special_stock_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_special_stock_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_special_stock_type) && (mb_strlen($inventory_special_stock_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $inventory_special_stock_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['inventory_special_stock_type'] = $inventory_special_stock_type;

        return $this;
    }

    /**
     * Gets inventory_valuation_type
     *
     * @return string|null
     */
    public function getInventoryValuationType()
    {
        return $this->container['inventory_valuation_type'];
    }

    /**
     * Sets inventory_valuation_type
     *
     * @param string|null $inventory_valuation_type inventory_valuation_type
     *
     * @return self
     */
    public function setInventoryValuationType($inventory_valuation_type)
    {
        if (is_null($inventory_valuation_type)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_valuation_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_valuation_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_valuation_type) && (mb_strlen($inventory_valuation_type) > 10)) {
            throw new \InvalidArgumentException('invalid length for $inventory_valuation_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['inventory_valuation_type'] = $inventory_valuation_type;

        return $this;
    }

    /**
     * Gets is_completely_delivered
     *
     * @return bool|null
     */
    public function getIsCompletelyDelivered()
    {
        return $this->container['is_completely_delivered'];
    }

    /**
     * Sets is_completely_delivered
     *
     * @param bool|null $is_completely_delivered is_completely_delivered
     *
     * @return self
     */
    public function setIsCompletelyDelivered($is_completely_delivered)
    {
        if (is_null($is_completely_delivered)) {
            array_push($this->openAPINullablesSetToNull, 'is_completely_delivered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_completely_delivered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_completely_delivered'] = $is_completely_delivered;

        return $this;
    }

    /**
     * Gets is_not_goods_movements_relevant
     *
     * @return string|null
     */
    public function getIsNotGoodsMovementsRelevant()
    {
        return $this->container['is_not_goods_movements_relevant'];
    }

    /**
     * Sets is_not_goods_movements_relevant
     *
     * @param string|null $is_not_goods_movements_relevant is_not_goods_movements_relevant
     *
     * @return self
     */
    public function setIsNotGoodsMovementsRelevant($is_not_goods_movements_relevant)
    {
        if (is_null($is_not_goods_movements_relevant)) {
            array_push($this->openAPINullablesSetToNull, 'is_not_goods_movements_relevant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_not_goods_movements_relevant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($is_not_goods_movements_relevant) && (mb_strlen($is_not_goods_movements_relevant) > 1)) {
            throw new \InvalidArgumentException('invalid length for $is_not_goods_movements_relevant when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['is_not_goods_movements_relevant'] = $is_not_goods_movements_relevant;

        return $this;
    }

    /**
     * Gets is_separate_valuation
     *
     * @return bool|null
     */
    public function getIsSeparateValuation()
    {
        return $this->container['is_separate_valuation'];
    }

    /**
     * Sets is_separate_valuation
     *
     * @param bool|null $is_separate_valuation is_separate_valuation
     *
     * @return self
     */
    public function setIsSeparateValuation($is_separate_valuation)
    {
        if (is_null($is_separate_valuation)) {
            array_push($this->openAPINullablesSetToNull, 'is_separate_valuation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_separate_valuation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_separate_valuation'] = $is_separate_valuation;

        return $this;
    }

    /**
     * Gets issg_or_rcvg_batch
     *
     * @return string|null
     */
    public function getIssgOrRcvgBatch()
    {
        return $this->container['issg_or_rcvg_batch'];
    }

    /**
     * Sets issg_or_rcvg_batch
     *
     * @param string|null $issg_or_rcvg_batch issg_or_rcvg_batch
     *
     * @return self
     */
    public function setIssgOrRcvgBatch($issg_or_rcvg_batch)
    {
        if (is_null($issg_or_rcvg_batch)) {
            array_push($this->openAPINullablesSetToNull, 'issg_or_rcvg_batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issg_or_rcvg_batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issg_or_rcvg_batch) && (mb_strlen($issg_or_rcvg_batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $issg_or_rcvg_batch when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['issg_or_rcvg_batch'] = $issg_or_rcvg_batch;

        return $this;
    }

    /**
     * Gets issg_or_rcvg_material
     *
     * @return string|null
     */
    public function getIssgOrRcvgMaterial()
    {
        return $this->container['issg_or_rcvg_material'];
    }

    /**
     * Sets issg_or_rcvg_material
     *
     * @param string|null $issg_or_rcvg_material issg_or_rcvg_material
     *
     * @return self
     */
    public function setIssgOrRcvgMaterial($issg_or_rcvg_material)
    {
        if (is_null($issg_or_rcvg_material)) {
            array_push($this->openAPINullablesSetToNull, 'issg_or_rcvg_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issg_or_rcvg_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issg_or_rcvg_material) && (mb_strlen($issg_or_rcvg_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $issg_or_rcvg_material when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 40.');
        }

        $this->container['issg_or_rcvg_material'] = $issg_or_rcvg_material;

        return $this;
    }

    /**
     * Gets issg_or_rcvg_spcl_stock_ind
     *
     * @return string|null
     */
    public function getIssgOrRcvgSpclStockInd()
    {
        return $this->container['issg_or_rcvg_spcl_stock_ind'];
    }

    /**
     * Sets issg_or_rcvg_spcl_stock_ind
     *
     * @param string|null $issg_or_rcvg_spcl_stock_ind issg_or_rcvg_spcl_stock_ind
     *
     * @return self
     */
    public function setIssgOrRcvgSpclStockInd($issg_or_rcvg_spcl_stock_ind)
    {
        if (is_null($issg_or_rcvg_spcl_stock_ind)) {
            array_push($this->openAPINullablesSetToNull, 'issg_or_rcvg_spcl_stock_ind');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issg_or_rcvg_spcl_stock_ind', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issg_or_rcvg_spcl_stock_ind) && (mb_strlen($issg_or_rcvg_spcl_stock_ind) > 1)) {
            throw new \InvalidArgumentException('invalid length for $issg_or_rcvg_spcl_stock_ind when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['issg_or_rcvg_spcl_stock_ind'] = $issg_or_rcvg_spcl_stock_ind;

        return $this;
    }

    /**
     * Gets issg_or_rcvg_stock_category
     *
     * @return string|null
     */
    public function getIssgOrRcvgStockCategory()
    {
        return $this->container['issg_or_rcvg_stock_category'];
    }

    /**
     * Sets issg_or_rcvg_stock_category
     *
     * @param string|null $issg_or_rcvg_stock_category issg_or_rcvg_stock_category
     *
     * @return self
     */
    public function setIssgOrRcvgStockCategory($issg_or_rcvg_stock_category)
    {
        if (is_null($issg_or_rcvg_stock_category)) {
            array_push($this->openAPINullablesSetToNull, 'issg_or_rcvg_stock_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issg_or_rcvg_stock_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issg_or_rcvg_stock_category) && (mb_strlen($issg_or_rcvg_stock_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $issg_or_rcvg_stock_category when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['issg_or_rcvg_stock_category'] = $issg_or_rcvg_stock_category;

        return $this;
    }

    /**
     * Gets issg_or_rcvg_valuation_type
     *
     * @return string|null
     */
    public function getIssgOrRcvgValuationType()
    {
        return $this->container['issg_or_rcvg_valuation_type'];
    }

    /**
     * Sets issg_or_rcvg_valuation_type
     *
     * @param string|null $issg_or_rcvg_valuation_type issg_or_rcvg_valuation_type
     *
     * @return self
     */
    public function setIssgOrRcvgValuationType($issg_or_rcvg_valuation_type)
    {
        if (is_null($issg_or_rcvg_valuation_type)) {
            array_push($this->openAPINullablesSetToNull, 'issg_or_rcvg_valuation_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issg_or_rcvg_valuation_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issg_or_rcvg_valuation_type) && (mb_strlen($issg_or_rcvg_valuation_type) > 10)) {
            throw new \InvalidArgumentException('invalid length for $issg_or_rcvg_valuation_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['issg_or_rcvg_valuation_type'] = $issg_or_rcvg_valuation_type;

        return $this;
    }

    /**
     * Gets issuing_or_receiving_plant
     *
     * @return string|null
     */
    public function getIssuingOrReceivingPlant()
    {
        return $this->container['issuing_or_receiving_plant'];
    }

    /**
     * Sets issuing_or_receiving_plant
     *
     * @param string|null $issuing_or_receiving_plant issuing_or_receiving_plant
     *
     * @return self
     */
    public function setIssuingOrReceivingPlant($issuing_or_receiving_plant)
    {
        if (is_null($issuing_or_receiving_plant)) {
            array_push($this->openAPINullablesSetToNull, 'issuing_or_receiving_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuing_or_receiving_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuing_or_receiving_plant) && (mb_strlen($issuing_or_receiving_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $issuing_or_receiving_plant when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['issuing_or_receiving_plant'] = $issuing_or_receiving_plant;

        return $this;
    }

    /**
     * Gets issuing_or_receiving_storage_loc
     *
     * @return string|null
     */
    public function getIssuingOrReceivingStorageLoc()
    {
        return $this->container['issuing_or_receiving_storage_loc'];
    }

    /**
     * Sets issuing_or_receiving_storage_loc
     *
     * @param string|null $issuing_or_receiving_storage_loc issuing_or_receiving_storage_loc
     *
     * @return self
     */
    public function setIssuingOrReceivingStorageLoc($issuing_or_receiving_storage_loc)
    {
        if (is_null($issuing_or_receiving_storage_loc)) {
            array_push($this->openAPINullablesSetToNull, 'issuing_or_receiving_storage_loc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuing_or_receiving_storage_loc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuing_or_receiving_storage_loc) && (mb_strlen($issuing_or_receiving_storage_loc) > 4)) {
            throw new \InvalidArgumentException('invalid length for $issuing_or_receiving_storage_loc when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['issuing_or_receiving_storage_loc'] = $issuing_or_receiving_storage_loc;

        return $this;
    }

    /**
     * Gets item_billing_block_reason
     *
     * @return string|null
     */
    public function getItemBillingBlockReason()
    {
        return $this->container['item_billing_block_reason'];
    }

    /**
     * Sets item_billing_block_reason
     *
     * @param string|null $item_billing_block_reason item_billing_block_reason
     *
     * @return self
     */
    public function setItemBillingBlockReason($item_billing_block_reason)
    {
        if (is_null($item_billing_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'item_billing_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_billing_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_billing_block_reason) && (mb_strlen($item_billing_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $item_billing_block_reason when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 2.');
        }

        $this->container['item_billing_block_reason'] = $item_billing_block_reason;

        return $this;
    }

    /**
     * Gets item_billing_incompletion_status
     *
     * @return string|null
     */
    public function getItemBillingIncompletionStatus()
    {
        return $this->container['item_billing_incompletion_status'];
    }

    /**
     * Sets item_billing_incompletion_status
     *
     * @param string|null $item_billing_incompletion_status item_billing_incompletion_status
     *
     * @return self
     */
    public function setItemBillingIncompletionStatus($item_billing_incompletion_status)
    {
        if (is_null($item_billing_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'item_billing_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_billing_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_billing_incompletion_status) && (mb_strlen($item_billing_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $item_billing_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['item_billing_incompletion_status'] = $item_billing_incompletion_status;

        return $this;
    }

    /**
     * Gets item_delivery_incompletion_status
     *
     * @return string|null
     */
    public function getItemDeliveryIncompletionStatus()
    {
        return $this->container['item_delivery_incompletion_status'];
    }

    /**
     * Sets item_delivery_incompletion_status
     *
     * @param string|null $item_delivery_incompletion_status item_delivery_incompletion_status
     *
     * @return self
     */
    public function setItemDeliveryIncompletionStatus($item_delivery_incompletion_status)
    {
        if (is_null($item_delivery_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'item_delivery_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_delivery_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_delivery_incompletion_status) && (mb_strlen($item_delivery_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $item_delivery_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['item_delivery_incompletion_status'] = $item_delivery_incompletion_status;

        return $this;
    }

    /**
     * Gets item_gds_mvt_incompletion_sts
     *
     * @return string|null
     */
    public function getItemGdsMvtIncompletionSts()
    {
        return $this->container['item_gds_mvt_incompletion_sts'];
    }

    /**
     * Sets item_gds_mvt_incompletion_sts
     *
     * @param string|null $item_gds_mvt_incompletion_sts item_gds_mvt_incompletion_sts
     *
     * @return self
     */
    public function setItemGdsMvtIncompletionSts($item_gds_mvt_incompletion_sts)
    {
        if (is_null($item_gds_mvt_incompletion_sts)) {
            array_push($this->openAPINullablesSetToNull, 'item_gds_mvt_incompletion_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_gds_mvt_incompletion_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_gds_mvt_incompletion_sts) && (mb_strlen($item_gds_mvt_incompletion_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $item_gds_mvt_incompletion_sts when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['item_gds_mvt_incompletion_sts'] = $item_gds_mvt_incompletion_sts;

        return $this;
    }

    /**
     * Gets item_general_incompletion_status
     *
     * @return string|null
     */
    public function getItemGeneralIncompletionStatus()
    {
        return $this->container['item_general_incompletion_status'];
    }

    /**
     * Sets item_general_incompletion_status
     *
     * @param string|null $item_general_incompletion_status item_general_incompletion_status
     *
     * @return self
     */
    public function setItemGeneralIncompletionStatus($item_general_incompletion_status)
    {
        if (is_null($item_general_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'item_general_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_general_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_general_incompletion_status) && (mb_strlen($item_general_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $item_general_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['item_general_incompletion_status'] = $item_general_incompletion_status;

        return $this;
    }

    /**
     * Gets item_gross_weight
     *
     * @return float|null
     */
    public function getItemGrossWeight()
    {
        return $this->container['item_gross_weight'];
    }

    /**
     * Sets item_gross_weight
     *
     * @param float|null $item_gross_weight item_gross_weight
     *
     * @return self
     */
    public function setItemGrossWeight($item_gross_weight)
    {
        if (is_null($item_gross_weight)) {
            array_push($this->openAPINullablesSetToNull, 'item_gross_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_gross_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_gross_weight'] = $item_gross_weight;

        return $this;
    }

    /**
     * Gets item_is_billing_relevant
     *
     * @return string|null
     */
    public function getItemIsBillingRelevant()
    {
        return $this->container['item_is_billing_relevant'];
    }

    /**
     * Sets item_is_billing_relevant
     *
     * @param string|null $item_is_billing_relevant item_is_billing_relevant
     *
     * @return self
     */
    public function setItemIsBillingRelevant($item_is_billing_relevant)
    {
        if (is_null($item_is_billing_relevant)) {
            array_push($this->openAPINullablesSetToNull, 'item_is_billing_relevant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_is_billing_relevant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_is_billing_relevant) && (mb_strlen($item_is_billing_relevant) > 1)) {
            throw new \InvalidArgumentException('invalid length for $item_is_billing_relevant when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['item_is_billing_relevant'] = $item_is_billing_relevant;

        return $this;
    }

    /**
     * Gets item_net_weight
     *
     * @return float|null
     */
    public function getItemNetWeight()
    {
        return $this->container['item_net_weight'];
    }

    /**
     * Sets item_net_weight
     *
     * @param float|null $item_net_weight item_net_weight
     *
     * @return self
     */
    public function setItemNetWeight($item_net_weight)
    {
        if (is_null($item_net_weight)) {
            array_push($this->openAPINullablesSetToNull, 'item_net_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_net_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_net_weight'] = $item_net_weight;

        return $this;
    }

    /**
     * Gets item_packing_incompletion_status
     *
     * @return string|null
     */
    public function getItemPackingIncompletionStatus()
    {
        return $this->container['item_packing_incompletion_status'];
    }

    /**
     * Sets item_packing_incompletion_status
     *
     * @param string|null $item_packing_incompletion_status item_packing_incompletion_status
     *
     * @return self
     */
    public function setItemPackingIncompletionStatus($item_packing_incompletion_status)
    {
        if (is_null($item_packing_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'item_packing_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_packing_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_packing_incompletion_status) && (mb_strlen($item_packing_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $item_packing_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['item_packing_incompletion_status'] = $item_packing_incompletion_status;

        return $this;
    }

    /**
     * Gets item_picking_incompletion_status
     *
     * @return string|null
     */
    public function getItemPickingIncompletionStatus()
    {
        return $this->container['item_picking_incompletion_status'];
    }

    /**
     * Sets item_picking_incompletion_status
     *
     * @param string|null $item_picking_incompletion_status item_picking_incompletion_status
     *
     * @return self
     */
    public function setItemPickingIncompletionStatus($item_picking_incompletion_status)
    {
        if (is_null($item_picking_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'item_picking_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_picking_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_picking_incompletion_status) && (mb_strlen($item_picking_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $item_picking_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['item_picking_incompletion_status'] = $item_picking_incompletion_status;

        return $this;
    }

    /**
     * Gets item_volume
     *
     * @return float|null
     */
    public function getItemVolume()
    {
        return $this->container['item_volume'];
    }

    /**
     * Sets item_volume
     *
     * @param float|null $item_volume item_volume
     *
     * @return self
     */
    public function setItemVolume($item_volume)
    {
        if (is_null($item_volume)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_volume'] = $item_volume;

        return $this;
    }

    /**
     * Gets item_volume_unit
     *
     * @return string|null
     */
    public function getItemVolumeUnit()
    {
        return $this->container['item_volume_unit'];
    }

    /**
     * Sets item_volume_unit
     *
     * @param string|null $item_volume_unit item_volume_unit
     *
     * @return self
     */
    public function setItemVolumeUnit($item_volume_unit)
    {
        if (is_null($item_volume_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_volume_unit) && (mb_strlen($item_volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_unit'] = $item_volume_unit;

        return $this;
    }

    /**
     * Gets item_weight_unit
     *
     * @return string|null
     */
    public function getItemWeightUnit()
    {
        return $this->container['item_weight_unit'];
    }

    /**
     * Sets item_weight_unit
     *
     * @param string|null $item_weight_unit item_weight_unit
     *
     * @return self
     */
    public function setItemWeightUnit($item_weight_unit)
    {
        if (is_null($item_weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_weight_unit) && (mb_strlen($item_weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_unit'] = $item_weight_unit;

        return $this;
    }

    /**
     * Gets last_change_date
     *
     * @return string|null
     */
    public function getLastChangeDate()
    {
        return $this->container['last_change_date'];
    }

    /**
     * Sets last_change_date
     *
     * @param string|null $last_change_date last_change_date
     *
     * @return self
     */
    public function setLastChangeDate($last_change_date)
    {
        if (is_null($last_change_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_change_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_change_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_change_date'] = $last_change_date;

        return $this;
    }

    /**
     * Gets loading_group
     *
     * @return string|null
     */
    public function getLoadingGroup()
    {
        return $this->container['loading_group'];
    }

    /**
     * Sets loading_group
     *
     * @param string|null $loading_group loading_group
     *
     * @return self
     */
    public function setLoadingGroup($loading_group)
    {
        if (is_null($loading_group)) {
            array_push($this->openAPINullablesSetToNull, 'loading_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loading_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($loading_group) && (mb_strlen($loading_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $loading_group when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['loading_group'] = $loading_group;

        return $this;
    }

    /**
     * Gets manufacture_date
     *
     * @return string|null
     */
    public function getManufactureDate()
    {
        return $this->container['manufacture_date'];
    }

    /**
     * Sets manufacture_date
     *
     * @param string|null $manufacture_date manufacture_date
     *
     * @return self
     */
    public function setManufactureDate($manufacture_date)
    {
        if (is_null($manufacture_date)) {
            array_push($this->openAPINullablesSetToNull, 'manufacture_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacture_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacture_date'] = $manufacture_date;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material material
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            array_push($this->openAPINullablesSetToNull, 'material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material) && (mb_strlen($material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $material when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 40.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets material_by_customer
     *
     * @return string|null
     */
    public function getMaterialByCustomer()
    {
        return $this->container['material_by_customer'];
    }

    /**
     * Sets material_by_customer
     *
     * @param string|null $material_by_customer material_by_customer
     *
     * @return self
     */
    public function setMaterialByCustomer($material_by_customer)
    {
        if (is_null($material_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'material_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_by_customer) && (mb_strlen($material_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $material_by_customer when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 35.');
        }

        $this->container['material_by_customer'] = $material_by_customer;

        return $this;
    }

    /**
     * Gets material_freight_group
     *
     * @return string|null
     */
    public function getMaterialFreightGroup()
    {
        return $this->container['material_freight_group'];
    }

    /**
     * Sets material_freight_group
     *
     * @param string|null $material_freight_group material_freight_group
     *
     * @return self
     */
    public function setMaterialFreightGroup($material_freight_group)
    {
        if (is_null($material_freight_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_freight_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_freight_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_freight_group) && (mb_strlen($material_freight_group) > 8)) {
            throw new \InvalidArgumentException('invalid length for $material_freight_group when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 8.');
        }

        $this->container['material_freight_group'] = $material_freight_group;

        return $this;
    }

    /**
     * Gets material_group
     *
     * @return string|null
     */
    public function getMaterialGroup()
    {
        return $this->container['material_group'];
    }

    /**
     * Sets material_group
     *
     * @param string|null $material_group material_group
     *
     * @return self
     */
    public function setMaterialGroup($material_group)
    {
        if (is_null($material_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_group) && (mb_strlen($material_group) > 9)) {
            throw new \InvalidArgumentException('invalid length for $material_group when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 9.');
        }

        $this->container['material_group'] = $material_group;

        return $this;
    }

    /**
     * Gets material_is_batch_managed
     *
     * @return bool|null
     */
    public function getMaterialIsBatchManaged()
    {
        return $this->container['material_is_batch_managed'];
    }

    /**
     * Sets material_is_batch_managed
     *
     * @param bool|null $material_is_batch_managed material_is_batch_managed
     *
     * @return self
     */
    public function setMaterialIsBatchManaged($material_is_batch_managed)
    {
        if (is_null($material_is_batch_managed)) {
            array_push($this->openAPINullablesSetToNull, 'material_is_batch_managed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_is_batch_managed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['material_is_batch_managed'] = $material_is_batch_managed;

        return $this;
    }

    /**
     * Gets material_is_int_batch_managed
     *
     * @return bool|null
     */
    public function getMaterialIsIntBatchManaged()
    {
        return $this->container['material_is_int_batch_managed'];
    }

    /**
     * Sets material_is_int_batch_managed
     *
     * @param bool|null $material_is_int_batch_managed material_is_int_batch_managed
     *
     * @return self
     */
    public function setMaterialIsIntBatchManaged($material_is_int_batch_managed)
    {
        if (is_null($material_is_int_batch_managed)) {
            array_push($this->openAPINullablesSetToNull, 'material_is_int_batch_managed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_is_int_batch_managed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['material_is_int_batch_managed'] = $material_is_int_batch_managed;

        return $this;
    }

    /**
     * Gets number_of_serial_numbers
     *
     * @return int|null
     */
    public function getNumberOfSerialNumbers()
    {
        return $this->container['number_of_serial_numbers'];
    }

    /**
     * Sets number_of_serial_numbers
     *
     * @param int|null $number_of_serial_numbers number_of_serial_numbers
     *
     * @return self
     */
    public function setNumberOfSerialNumbers($number_of_serial_numbers)
    {
        if (is_null($number_of_serial_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'number_of_serial_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_of_serial_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_of_serial_numbers'] = $number_of_serial_numbers;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_id) && (mb_strlen($order_id) > 12)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 12.');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_item
     *
     * @return string|null
     */
    public function getOrderItem()
    {
        return $this->container['order_item'];
    }

    /**
     * Sets order_item
     *
     * @param string|null $order_item order_item
     *
     * @return self
     */
    public function setOrderItem($order_item)
    {
        if (is_null($order_item)) {
            array_push($this->openAPINullablesSetToNull, 'order_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_item) && (mb_strlen($order_item) > 4)) {
            throw new \InvalidArgumentException('invalid length for $order_item when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['order_item'] = $order_item;

        return $this;
    }

    /**
     * Gets original_delivery_quantity
     *
     * @return float|null
     */
    public function getOriginalDeliveryQuantity()
    {
        return $this->container['original_delivery_quantity'];
    }

    /**
     * Sets original_delivery_quantity
     *
     * @param float|null $original_delivery_quantity original_delivery_quantity
     *
     * @return self
     */
    public function setOriginalDeliveryQuantity($original_delivery_quantity)
    {
        if (is_null($original_delivery_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'original_delivery_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_delivery_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['original_delivery_quantity'] = $original_delivery_quantity;

        return $this;
    }

    /**
     * Gets originally_requested_material
     *
     * @return string|null
     */
    public function getOriginallyRequestedMaterial()
    {
        return $this->container['originally_requested_material'];
    }

    /**
     * Sets originally_requested_material
     *
     * @param string|null $originally_requested_material originally_requested_material
     *
     * @return self
     */
    public function setOriginallyRequestedMaterial($originally_requested_material)
    {
        if (is_null($originally_requested_material)) {
            array_push($this->openAPINullablesSetToNull, 'originally_requested_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originally_requested_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($originally_requested_material) && (mb_strlen($originally_requested_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $originally_requested_material when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 40.');
        }

        $this->container['originally_requested_material'] = $originally_requested_material;

        return $this;
    }

    /**
     * Gets overdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return float|null
     */
    public function getOverdelivTolrtdLmtRatioInPct()
    {
        return $this->container['overdeliv_tolrtd_lmt_ratio_in_pct'];
    }

    /**
     * Sets overdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @param float|null $overdeliv_tolrtd_lmt_ratio_in_pct overdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return self
     */
    public function setOverdelivTolrtdLmtRatioInPct($overdeliv_tolrtd_lmt_ratio_in_pct)
    {
        if (is_null($overdeliv_tolrtd_lmt_ratio_in_pct)) {
            array_push($this->openAPINullablesSetToNull, 'overdeliv_tolrtd_lmt_ratio_in_pct');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overdeliv_tolrtd_lmt_ratio_in_pct', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['overdeliv_tolrtd_lmt_ratio_in_pct'] = $overdeliv_tolrtd_lmt_ratio_in_pct;

        return $this;
    }

    /**
     * Gets packing_status
     *
     * @return string|null
     */
    public function getPackingStatus()
    {
        return $this->container['packing_status'];
    }

    /**
     * Sets packing_status
     *
     * @param string|null $packing_status packing_status
     *
     * @return self
     */
    public function setPackingStatus($packing_status)
    {
        if (is_null($packing_status)) {
            array_push($this->openAPINullablesSetToNull, 'packing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($packing_status) && (mb_strlen($packing_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $packing_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['packing_status'] = $packing_status;

        return $this;
    }

    /**
     * Gets partial_delivery_is_allowed
     *
     * @return string|null
     */
    public function getPartialDeliveryIsAllowed()
    {
        return $this->container['partial_delivery_is_allowed'];
    }

    /**
     * Sets partial_delivery_is_allowed
     *
     * @param string|null $partial_delivery_is_allowed partial_delivery_is_allowed
     *
     * @return self
     */
    public function setPartialDeliveryIsAllowed($partial_delivery_is_allowed)
    {
        if (is_null($partial_delivery_is_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'partial_delivery_is_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partial_delivery_is_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($partial_delivery_is_allowed) && (mb_strlen($partial_delivery_is_allowed) > 1)) {
            throw new \InvalidArgumentException('invalid length for $partial_delivery_is_allowed when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['partial_delivery_is_allowed'] = $partial_delivery_is_allowed;

        return $this;
    }

    /**
     * Gets payment_guarantee_form
     *
     * @return string|null
     */
    public function getPaymentGuaranteeForm()
    {
        return $this->container['payment_guarantee_form'];
    }

    /**
     * Sets payment_guarantee_form
     *
     * @param string|null $payment_guarantee_form payment_guarantee_form
     *
     * @return self
     */
    public function setPaymentGuaranteeForm($payment_guarantee_form)
    {
        if (is_null($payment_guarantee_form)) {
            array_push($this->openAPINullablesSetToNull, 'payment_guarantee_form');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_guarantee_form', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_guarantee_form) && (mb_strlen($payment_guarantee_form) > 2)) {
            throw new \InvalidArgumentException('invalid length for $payment_guarantee_form when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 2.');
        }

        $this->container['payment_guarantee_form'] = $payment_guarantee_form;

        return $this;
    }

    /**
     * Gets picking_confirmation_status
     *
     * @return string|null
     */
    public function getPickingConfirmationStatus()
    {
        return $this->container['picking_confirmation_status'];
    }

    /**
     * Sets picking_confirmation_status
     *
     * @param string|null $picking_confirmation_status picking_confirmation_status
     *
     * @return self
     */
    public function setPickingConfirmationStatus($picking_confirmation_status)
    {
        if (is_null($picking_confirmation_status)) {
            array_push($this->openAPINullablesSetToNull, 'picking_confirmation_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picking_confirmation_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($picking_confirmation_status) && (mb_strlen($picking_confirmation_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $picking_confirmation_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['picking_confirmation_status'] = $picking_confirmation_status;

        return $this;
    }

    /**
     * Gets picking_control
     *
     * @return string|null
     */
    public function getPickingControl()
    {
        return $this->container['picking_control'];
    }

    /**
     * Sets picking_control
     *
     * @param string|null $picking_control picking_control
     *
     * @return self
     */
    public function setPickingControl($picking_control)
    {
        if (is_null($picking_control)) {
            array_push($this->openAPINullablesSetToNull, 'picking_control');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picking_control', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($picking_control) && (mb_strlen($picking_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $picking_control when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['picking_control'] = $picking_control;

        return $this;
    }

    /**
     * Gets picking_status
     *
     * @return string|null
     */
    public function getPickingStatus()
    {
        return $this->container['picking_status'];
    }

    /**
     * Sets picking_status
     *
     * @param string|null $picking_status picking_status
     *
     * @return self
     */
    public function setPickingStatus($picking_status)
    {
        if (is_null($picking_status)) {
            array_push($this->openAPINullablesSetToNull, 'picking_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picking_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($picking_status) && (mb_strlen($picking_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $picking_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['picking_status'] = $picking_status;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            array_push($this->openAPINullablesSetToNull, 'plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($plant) && (mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets primary_posting_switch
     *
     * @return string|null
     */
    public function getPrimaryPostingSwitch()
    {
        return $this->container['primary_posting_switch'];
    }

    /**
     * Sets primary_posting_switch
     *
     * @param string|null $primary_posting_switch primary_posting_switch
     *
     * @return self
     */
    public function setPrimaryPostingSwitch($primary_posting_switch)
    {
        if (is_null($primary_posting_switch)) {
            array_push($this->openAPINullablesSetToNull, 'primary_posting_switch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_posting_switch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($primary_posting_switch) && (mb_strlen($primary_posting_switch) > 1)) {
            throw new \InvalidArgumentException('invalid length for $primary_posting_switch when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['primary_posting_switch'] = $primary_posting_switch;

        return $this;
    }

    /**
     * Gets product_availability_date
     *
     * @return string|null
     */
    public function getProductAvailabilityDate()
    {
        return $this->container['product_availability_date'];
    }

    /**
     * Sets product_availability_date
     *
     * @param string|null $product_availability_date product_availability_date
     *
     * @return self
     */
    public function setProductAvailabilityDate($product_availability_date)
    {
        if (is_null($product_availability_date)) {
            array_push($this->openAPINullablesSetToNull, 'product_availability_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_availability_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_availability_date'] = $product_availability_date;

        return $this;
    }

    /**
     * Gets product_availability_time
     *
     * @return string|null
     */
    public function getProductAvailabilityTime()
    {
        return $this->container['product_availability_time'];
    }

    /**
     * Sets product_availability_time
     *
     * @param string|null $product_availability_time product_availability_time
     *
     * @return self
     */
    public function setProductAvailabilityTime($product_availability_time)
    {
        if (is_null($product_availability_time)) {
            array_push($this->openAPINullablesSetToNull, 'product_availability_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_availability_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_availability_time'] = $product_availability_time;

        return $this;
    }

    /**
     * Gets product_configuration
     *
     * @return string|null
     */
    public function getProductConfiguration()
    {
        return $this->container['product_configuration'];
    }

    /**
     * Sets product_configuration
     *
     * @param string|null $product_configuration product_configuration
     *
     * @return self
     */
    public function setProductConfiguration($product_configuration)
    {
        if (is_null($product_configuration)) {
            array_push($this->openAPINullablesSetToNull, 'product_configuration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_configuration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_configuration) && (mb_strlen($product_configuration) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product_configuration when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 18.');
        }

        $this->container['product_configuration'] = $product_configuration;

        return $this;
    }

    /**
     * Gets product_hierarchy_node
     *
     * @return string|null
     */
    public function getProductHierarchyNode()
    {
        return $this->container['product_hierarchy_node'];
    }

    /**
     * Sets product_hierarchy_node
     *
     * @param string|null $product_hierarchy_node product_hierarchy_node
     *
     * @return self
     */
    public function setProductHierarchyNode($product_hierarchy_node)
    {
        if (is_null($product_hierarchy_node)) {
            array_push($this->openAPINullablesSetToNull, 'product_hierarchy_node');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_hierarchy_node', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_hierarchy_node) && (mb_strlen($product_hierarchy_node) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product_hierarchy_node when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 18.');
        }

        $this->container['product_hierarchy_node'] = $product_hierarchy_node;

        return $this;
    }

    /**
     * Gets profitability_segment
     *
     * @return string|null
     */
    public function getProfitabilitySegment()
    {
        return $this->container['profitability_segment'];
    }

    /**
     * Sets profitability_segment
     *
     * @param string|null $profitability_segment profitability_segment
     *
     * @return self
     */
    public function setProfitabilitySegment($profitability_segment)
    {
        if (is_null($profitability_segment)) {
            array_push($this->openAPINullablesSetToNull, 'profitability_segment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profitability_segment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profitability_segment) && (mb_strlen($profitability_segment) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profitability_segment when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['profitability_segment'] = $profitability_segment;

        return $this;
    }

    /**
     * Gets profit_center
     *
     * @return string|null
     */
    public function getProfitCenter()
    {
        return $this->container['profit_center'];
    }

    /**
     * Sets profit_center
     *
     * @param string|null $profit_center profit_center
     *
     * @return self
     */
    public function setProfitCenter($profit_center)
    {
        if (is_null($profit_center)) {
            array_push($this->openAPINullablesSetToNull, 'profit_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profit_center) && (mb_strlen($profit_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profit_center when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['profit_center'] = $profit_center;

        return $this;
    }

    /**
     * Gets proof_of_delivery_relevance_code
     *
     * @return string|null
     */
    public function getProofOfDeliveryRelevanceCode()
    {
        return $this->container['proof_of_delivery_relevance_code'];
    }

    /**
     * Sets proof_of_delivery_relevance_code
     *
     * @param string|null $proof_of_delivery_relevance_code proof_of_delivery_relevance_code
     *
     * @return self
     */
    public function setProofOfDeliveryRelevanceCode($proof_of_delivery_relevance_code)
    {
        if (is_null($proof_of_delivery_relevance_code)) {
            array_push($this->openAPINullablesSetToNull, 'proof_of_delivery_relevance_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proof_of_delivery_relevance_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($proof_of_delivery_relevance_code) && (mb_strlen($proof_of_delivery_relevance_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $proof_of_delivery_relevance_code when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['proof_of_delivery_relevance_code'] = $proof_of_delivery_relevance_code;

        return $this;
    }

    /**
     * Gets proof_of_delivery_status
     *
     * @return string|null
     */
    public function getProofOfDeliveryStatus()
    {
        return $this->container['proof_of_delivery_status'];
    }

    /**
     * Sets proof_of_delivery_status
     *
     * @param string|null $proof_of_delivery_status proof_of_delivery_status
     *
     * @return self
     */
    public function setProofOfDeliveryStatus($proof_of_delivery_status)
    {
        if (is_null($proof_of_delivery_status)) {
            array_push($this->openAPINullablesSetToNull, 'proof_of_delivery_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proof_of_delivery_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($proof_of_delivery_status) && (mb_strlen($proof_of_delivery_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $proof_of_delivery_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['proof_of_delivery_status'] = $proof_of_delivery_status;

        return $this;
    }

    /**
     * Gets quantity_is_fixed
     *
     * @return bool|null
     */
    public function getQuantityIsFixed()
    {
        return $this->container['quantity_is_fixed'];
    }

    /**
     * Sets quantity_is_fixed
     *
     * @param bool|null $quantity_is_fixed quantity_is_fixed
     *
     * @return self
     */
    public function setQuantityIsFixed($quantity_is_fixed)
    {
        if (is_null($quantity_is_fixed)) {
            array_push($this->openAPINullablesSetToNull, 'quantity_is_fixed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity_is_fixed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity_is_fixed'] = $quantity_is_fixed;

        return $this;
    }

    /**
     * Gets receiving_point
     *
     * @return string|null
     */
    public function getReceivingPoint()
    {
        return $this->container['receiving_point'];
    }

    /**
     * Sets receiving_point
     *
     * @param string|null $receiving_point receiving_point
     *
     * @return self
     */
    public function setReceivingPoint($receiving_point)
    {
        if (is_null($receiving_point)) {
            array_push($this->openAPINullablesSetToNull, 'receiving_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receiving_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($receiving_point) && (mb_strlen($receiving_point) > 25)) {
            throw new \InvalidArgumentException('invalid length for $receiving_point when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 25.');
        }

        $this->container['receiving_point'] = $receiving_point;

        return $this;
    }

    /**
     * Gets reference_document_logical_system
     *
     * @return string|null
     */
    public function getReferenceDocumentLogicalSystem()
    {
        return $this->container['reference_document_logical_system'];
    }

    /**
     * Sets reference_document_logical_system
     *
     * @param string|null $reference_document_logical_system reference_document_logical_system
     *
     * @return self
     */
    public function setReferenceDocumentLogicalSystem($reference_document_logical_system)
    {
        if (is_null($reference_document_logical_system)) {
            array_push($this->openAPINullablesSetToNull, 'reference_document_logical_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_document_logical_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_document_logical_system) && (mb_strlen($reference_document_logical_system) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_document_logical_system when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['reference_document_logical_system'] = $reference_document_logical_system;

        return $this;
    }

    /**
     * Gets reference_sd_document
     *
     * @return string|null
     */
    public function getReferenceSdDocument()
    {
        return $this->container['reference_sd_document'];
    }

    /**
     * Sets reference_sd_document
     *
     * @param string|null $reference_sd_document reference_sd_document
     *
     * @return self
     */
    public function setReferenceSdDocument($reference_sd_document)
    {
        if (is_null($reference_sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document) && (mb_strlen($reference_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['reference_sd_document'] = $reference_sd_document;

        return $this;
    }

    /**
     * Gets reference_sd_document_category
     *
     * @return string|null
     */
    public function getReferenceSdDocumentCategory()
    {
        return $this->container['reference_sd_document_category'];
    }

    /**
     * Sets reference_sd_document_category
     *
     * @param string|null $reference_sd_document_category reference_sd_document_category
     *
     * @return self
     */
    public function setReferenceSdDocumentCategory($reference_sd_document_category)
    {
        if (is_null($reference_sd_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_category) && (mb_strlen($reference_sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_category when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['reference_sd_document_category'] = $reference_sd_document_category;

        return $this;
    }

    /**
     * Gets reference_sd_document_item
     *
     * @return string|null
     */
    public function getReferenceSdDocumentItem()
    {
        return $this->container['reference_sd_document_item'];
    }

    /**
     * Sets reference_sd_document_item
     *
     * @param string|null $reference_sd_document_item reference_sd_document_item
     *
     * @return self
     */
    public function setReferenceSdDocumentItem($reference_sd_document_item)
    {
        if (is_null($reference_sd_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_item) && (mb_strlen($reference_sd_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_item when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 6.');
        }

        $this->container['reference_sd_document_item'] = $reference_sd_document_item;

        return $this;
    }

    /**
     * Gets retail_promotion
     *
     * @return string|null
     */
    public function getRetailPromotion()
    {
        return $this->container['retail_promotion'];
    }

    /**
     * Sets retail_promotion
     *
     * @param string|null $retail_promotion retail_promotion
     *
     * @return self
     */
    public function setRetailPromotion($retail_promotion)
    {
        if (is_null($retail_promotion)) {
            array_push($this->openAPINullablesSetToNull, 'retail_promotion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retail_promotion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($retail_promotion) && (mb_strlen($retail_promotion) > 10)) {
            throw new \InvalidArgumentException('invalid length for $retail_promotion when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['retail_promotion'] = $retail_promotion;

        return $this;
    }

    /**
     * Gets sales_document_item_type
     *
     * @return string|null
     */
    public function getSalesDocumentItemType()
    {
        return $this->container['sales_document_item_type'];
    }

    /**
     * Sets sales_document_item_type
     *
     * @param string|null $sales_document_item_type sales_document_item_type
     *
     * @return self
     */
    public function setSalesDocumentItemType($sales_document_item_type)
    {
        if (is_null($sales_document_item_type)) {
            array_push($this->openAPINullablesSetToNull, 'sales_document_item_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_document_item_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_document_item_type) && (mb_strlen($sales_document_item_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_item_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['sales_document_item_type'] = $sales_document_item_type;

        return $this;
    }

    /**
     * Gets sales_group
     *
     * @return string|null
     */
    public function getSalesGroup()
    {
        return $this->container['sales_group'];
    }

    /**
     * Sets sales_group
     *
     * @param string|null $sales_group sales_group
     *
     * @return self
     */
    public function setSalesGroup($sales_group)
    {
        if (is_null($sales_group)) {
            array_push($this->openAPINullablesSetToNull, 'sales_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_group) && (mb_strlen($sales_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sales_group when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['sales_group'] = $sales_group;

        return $this;
    }

    /**
     * Gets sales_office
     *
     * @return string|null
     */
    public function getSalesOffice()
    {
        return $this->container['sales_office'];
    }

    /**
     * Sets sales_office
     *
     * @param string|null $sales_office sales_office
     *
     * @return self
     */
    public function setSalesOffice($sales_office)
    {
        if (is_null($sales_office)) {
            array_push($this->openAPINullablesSetToNull, 'sales_office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_office) && (mb_strlen($sales_office) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_office when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['sales_office'] = $sales_office;

        return $this;
    }

    /**
     * Gets sd_document_category
     *
     * @return string|null
     */
    public function getSdDocumentCategory()
    {
        return $this->container['sd_document_category'];
    }

    /**
     * Sets sd_document_category
     *
     * @param string|null $sd_document_category sd_document_category
     *
     * @return self
     */
    public function setSdDocumentCategory($sd_document_category)
    {
        if (is_null($sd_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'sd_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_document_category) && (mb_strlen($sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_category when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['sd_document_category'] = $sd_document_category;

        return $this;
    }

    /**
     * Gets sd_process_status
     *
     * @return string|null
     */
    public function getSdProcessStatus()
    {
        return $this->container['sd_process_status'];
    }

    /**
     * Sets sd_process_status
     *
     * @param string|null $sd_process_status sd_process_status
     *
     * @return self
     */
    public function setSdProcessStatus($sd_process_status)
    {
        if (is_null($sd_process_status)) {
            array_push($this->openAPINullablesSetToNull, 'sd_process_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_process_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_process_status) && (mb_strlen($sd_process_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sd_process_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['sd_process_status'] = $sd_process_status;

        return $this;
    }

    /**
     * Gets shelf_life_expiration_date
     *
     * @return string|null
     */
    public function getShelfLifeExpirationDate()
    {
        return $this->container['shelf_life_expiration_date'];
    }

    /**
     * Sets shelf_life_expiration_date
     *
     * @param string|null $shelf_life_expiration_date shelf_life_expiration_date
     *
     * @return self
     */
    public function setShelfLifeExpirationDate($shelf_life_expiration_date)
    {
        if (is_null($shelf_life_expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'shelf_life_expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shelf_life_expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shelf_life_expiration_date'] = $shelf_life_expiration_date;

        return $this;
    }

    /**
     * Gets statistics_date
     *
     * @return string|null
     */
    public function getStatisticsDate()
    {
        return $this->container['statistics_date'];
    }

    /**
     * Sets statistics_date
     *
     * @param string|null $statistics_date statistics_date
     *
     * @return self
     */
    public function setStatisticsDate($statistics_date)
    {
        if (is_null($statistics_date)) {
            array_push($this->openAPINullablesSetToNull, 'statistics_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statistics_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statistics_date'] = $statistics_date;

        return $this;
    }

    /**
     * Gets stock_type
     *
     * @return string|null
     */
    public function getStockType()
    {
        return $this->container['stock_type'];
    }

    /**
     * Sets stock_type
     *
     * @param string|null $stock_type stock_type
     *
     * @return self
     */
    public function setStockType($stock_type)
    {
        if (is_null($stock_type)) {
            array_push($this->openAPINullablesSetToNull, 'stock_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stock_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($stock_type) && (mb_strlen($stock_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $stock_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['stock_type'] = $stock_type;

        return $this;
    }

    /**
     * Gets storage_bin
     *
     * @return string|null
     */
    public function getStorageBin()
    {
        return $this->container['storage_bin'];
    }

    /**
     * Sets storage_bin
     *
     * @param string|null $storage_bin storage_bin
     *
     * @return self
     */
    public function setStorageBin($storage_bin)
    {
        if (is_null($storage_bin)) {
            array_push($this->openAPINullablesSetToNull, 'storage_bin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_bin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_bin) && (mb_strlen($storage_bin) > 10)) {
            throw new \InvalidArgumentException('invalid length for $storage_bin when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['storage_bin'] = $storage_bin;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            array_push($this->openAPINullablesSetToNull, 'storage_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_location) && (mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets storage_type
     *
     * @return string|null
     */
    public function getStorageType()
    {
        return $this->container['storage_type'];
    }

    /**
     * Sets storage_type
     *
     * @param string|null $storage_type storage_type
     *
     * @return self
     */
    public function setStorageType($storage_type)
    {
        if (is_null($storage_type)) {
            array_push($this->openAPINullablesSetToNull, 'storage_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_type) && (mb_strlen($storage_type) > 3)) {
            throw new \InvalidArgumentException('invalid length for $storage_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['storage_type'] = $storage_type;

        return $this;
    }

    /**
     * Gets subsequent_movement_type
     *
     * @return string|null
     */
    public function getSubsequentMovementType()
    {
        return $this->container['subsequent_movement_type'];
    }

    /**
     * Sets subsequent_movement_type
     *
     * @param string|null $subsequent_movement_type subsequent_movement_type
     *
     * @return self
     */
    public function setSubsequentMovementType($subsequent_movement_type)
    {
        if (is_null($subsequent_movement_type)) {
            array_push($this->openAPINullablesSetToNull, 'subsequent_movement_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subsequent_movement_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($subsequent_movement_type) && (mb_strlen($subsequent_movement_type) > 3)) {
            throw new \InvalidArgumentException('invalid length for $subsequent_movement_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['subsequent_movement_type'] = $subsequent_movement_type;

        return $this;
    }

    /**
     * Gets transportation_group
     *
     * @return string|null
     */
    public function getTransportationGroup()
    {
        return $this->container['transportation_group'];
    }

    /**
     * Sets transportation_group
     *
     * @param string|null $transportation_group transportation_group
     *
     * @return self
     */
    public function setTransportationGroup($transportation_group)
    {
        if (is_null($transportation_group)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transportation_group) && (mb_strlen($transportation_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $transportation_group when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 4.');
        }

        $this->container['transportation_group'] = $transportation_group;

        return $this;
    }

    /**
     * Gets underdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return float|null
     */
    public function getUnderdelivTolrtdLmtRatioInPct()
    {
        return $this->container['underdeliv_tolrtd_lmt_ratio_in_pct'];
    }

    /**
     * Sets underdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @param float|null $underdeliv_tolrtd_lmt_ratio_in_pct underdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return self
     */
    public function setUnderdelivTolrtdLmtRatioInPct($underdeliv_tolrtd_lmt_ratio_in_pct)
    {
        if (is_null($underdeliv_tolrtd_lmt_ratio_in_pct)) {
            array_push($this->openAPINullablesSetToNull, 'underdeliv_tolrtd_lmt_ratio_in_pct');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('underdeliv_tolrtd_lmt_ratio_in_pct', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['underdeliv_tolrtd_lmt_ratio_in_pct'] = $underdeliv_tolrtd_lmt_ratio_in_pct;

        return $this;
    }

    /**
     * Gets unlimited_overdelivery_is_allowed
     *
     * @return bool|null
     */
    public function getUnlimitedOverdeliveryIsAllowed()
    {
        return $this->container['unlimited_overdelivery_is_allowed'];
    }

    /**
     * Sets unlimited_overdelivery_is_allowed
     *
     * @param bool|null $unlimited_overdelivery_is_allowed unlimited_overdelivery_is_allowed
     *
     * @return self
     */
    public function setUnlimitedOverdeliveryIsAllowed($unlimited_overdelivery_is_allowed)
    {
        if (is_null($unlimited_overdelivery_is_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'unlimited_overdelivery_is_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unlimited_overdelivery_is_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unlimited_overdelivery_is_allowed'] = $unlimited_overdelivery_is_allowed;

        return $this;
    }

    /**
     * Gets varbl_shipg_procg_duration_in_days
     *
     * @return float|null
     */
    public function getVarblShipgProcgDurationInDays()
    {
        return $this->container['varbl_shipg_procg_duration_in_days'];
    }

    /**
     * Sets varbl_shipg_procg_duration_in_days
     *
     * @param float|null $varbl_shipg_procg_duration_in_days varbl_shipg_procg_duration_in_days
     *
     * @return self
     */
    public function setVarblShipgProcgDurationInDays($varbl_shipg_procg_duration_in_days)
    {
        if (is_null($varbl_shipg_procg_duration_in_days)) {
            array_push($this->openAPINullablesSetToNull, 'varbl_shipg_procg_duration_in_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('varbl_shipg_procg_duration_in_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['varbl_shipg_procg_duration_in_days'] = $varbl_shipg_procg_duration_in_days;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string|null
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string|null $warehouse warehouse
     *
     * @return self
     */
    public function setWarehouse($warehouse)
    {
        if (is_null($warehouse)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($warehouse) && (mb_strlen($warehouse) > 3)) {
            throw new \InvalidArgumentException('invalid length for $warehouse when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 3.');
        }

        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets warehouse_activity_status
     *
     * @return string|null
     */
    public function getWarehouseActivityStatus()
    {
        return $this->container['warehouse_activity_status'];
    }

    /**
     * Sets warehouse_activity_status
     *
     * @param string|null $warehouse_activity_status warehouse_activity_status
     *
     * @return self
     */
    public function setWarehouseActivityStatus($warehouse_activity_status)
    {
        if (is_null($warehouse_activity_status)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse_activity_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse_activity_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($warehouse_activity_status) && (mb_strlen($warehouse_activity_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_activity_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['warehouse_activity_status'] = $warehouse_activity_status;

        return $this;
    }

    /**
     * Gets warehouse_staging_area
     *
     * @return string|null
     */
    public function getWarehouseStagingArea()
    {
        return $this->container['warehouse_staging_area'];
    }

    /**
     * Sets warehouse_staging_area
     *
     * @param string|null $warehouse_staging_area warehouse_staging_area
     *
     * @return self
     */
    public function setWarehouseStagingArea($warehouse_staging_area)
    {
        if (is_null($warehouse_staging_area)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse_staging_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse_staging_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($warehouse_staging_area) && (mb_strlen($warehouse_staging_area) > 10)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_staging_area when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['warehouse_staging_area'] = $warehouse_staging_area;

        return $this;
    }

    /**
     * Gets warehouse_stock_category
     *
     * @return string|null
     */
    public function getWarehouseStockCategory()
    {
        return $this->container['warehouse_stock_category'];
    }

    /**
     * Sets warehouse_stock_category
     *
     * @param string|null $warehouse_stock_category warehouse_stock_category
     *
     * @return self
     */
    public function setWarehouseStockCategory($warehouse_stock_category)
    {
        if (is_null($warehouse_stock_category)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse_stock_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse_stock_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($warehouse_stock_category) && (mb_strlen($warehouse_stock_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_stock_category when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 1.');
        }

        $this->container['warehouse_stock_category'] = $warehouse_stock_category;

        return $this;
    }

    /**
     * Gets warehouse_storage_bin
     *
     * @return string|null
     */
    public function getWarehouseStorageBin()
    {
        return $this->container['warehouse_storage_bin'];
    }

    /**
     * Sets warehouse_storage_bin
     *
     * @param string|null $warehouse_storage_bin warehouse_storage_bin
     *
     * @return self
     */
    public function setWarehouseStorageBin($warehouse_storage_bin)
    {
        if (is_null($warehouse_storage_bin)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse_storage_bin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse_storage_bin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($warehouse_storage_bin) && (mb_strlen($warehouse_storage_bin) > 10)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_storage_bin when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemType., must be smaller than or equal to 10.');
        }

        $this->container['warehouse_storage_bin'] = $warehouse_storage_bin;

        return $this;
    }

    /**
     * Gets to_serial_delivery_item
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryType|null
     */
    public function getToSerialDeliveryItem()
    {
        return $this->container['to_serial_delivery_item'];
    }

    /**
     * Sets to_serial_delivery_item
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryType|null $to_serial_delivery_item to_serial_delivery_item
     *
     * @return self
     */
    public function setToSerialDeliveryItem($to_serial_delivery_item)
    {
        if (is_null($to_serial_delivery_item)) {
            array_push($this->openAPINullablesSetToNull, 'to_serial_delivery_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_serial_delivery_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_serial_delivery_item'] = $to_serial_delivery_item;

        return $this;
    }

    /**
     * Gets to_document_flow
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeToDocumentFlow|null
     */
    public function getToDocumentFlow()
    {
        return $this->container['to_document_flow'];
    }

    /**
     * Sets to_document_flow
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeToDocumentFlow|null $to_document_flow to_document_flow
     *
     * @return self
     */
    public function setToDocumentFlow($to_document_flow)
    {
        if (is_null($to_document_flow)) {
            throw new \InvalidArgumentException('non-nullable to_document_flow cannot be null');
        }
        $this->container['to_document_flow'] = $to_document_flow;

        return $this;
    }

    /**
     * Gets to_handling_unit_item_delivery
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeToHandlingUnitItemDelivery|null
     */
    public function getToHandlingUnitItemDelivery()
    {
        return $this->container['to_handling_unit_item_delivery'];
    }

    /**
     * Sets to_handling_unit_item_delivery
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeToHandlingUnitItemDelivery|null $to_handling_unit_item_delivery to_handling_unit_item_delivery
     *
     * @return self
     */
    public function setToHandlingUnitItemDelivery($to_handling_unit_item_delivery)
    {
        if (is_null($to_handling_unit_item_delivery)) {
            throw new \InvalidArgumentException('non-nullable to_handling_unit_item_delivery cannot be null');
        }
        $this->container['to_handling_unit_item_delivery'] = $to_handling_unit_item_delivery;

        return $this;
    }

    /**
     * Gets to_delivery_document_item_text
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeToDeliveryDocumentItemText|null
     */
    public function getToDeliveryDocumentItemText()
    {
        return $this->container['to_delivery_document_item_text'];
    }

    /**
     * Sets to_delivery_document_item_text
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeToDeliveryDocumentItemText|null $to_delivery_document_item_text to_delivery_document_item_text
     *
     * @return self
     */
    public function setToDeliveryDocumentItemText($to_delivery_document_item_text)
    {
        if (is_null($to_delivery_document_item_text)) {
            throw new \InvalidArgumentException('non-nullable to_delivery_document_item_text cannot be null');
        }
        $this->container['to_delivery_document_item_text'] = $to_delivery_document_item_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


