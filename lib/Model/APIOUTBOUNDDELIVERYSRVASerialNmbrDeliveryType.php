<?php
/**
 * APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_SerialNmbrDeliveryType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delivery_date' => 'string',
        'delivery_document' => 'string',
        'delivery_document_item' => 'string',
        'maintenance_item_object_list' => 'string',
        'sd_document_category' => 'string',
        'to_maintenance_item_object' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryTypeToMaintenanceItemObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'delivery_date' => null,
        'delivery_document' => null,
        'delivery_document_item' => null,
        'maintenance_item_object_list' => 'int64',
        'sd_document_category' => null,
        'to_maintenance_item_object' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'delivery_date' => false,
		'delivery_document' => false,
		'delivery_document_item' => false,
		'maintenance_item_object_list' => false,
		'sd_document_category' => false,
		'to_maintenance_item_object' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_date' => 'DeliveryDate',
        'delivery_document' => 'DeliveryDocument',
        'delivery_document_item' => 'DeliveryDocumentItem',
        'maintenance_item_object_list' => 'MaintenanceItemObjectList',
        'sd_document_category' => 'SDDocumentCategory',
        'to_maintenance_item_object' => 'to_MaintenanceItemObject'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_date' => 'setDeliveryDate',
        'delivery_document' => 'setDeliveryDocument',
        'delivery_document_item' => 'setDeliveryDocumentItem',
        'maintenance_item_object_list' => 'setMaintenanceItemObjectList',
        'sd_document_category' => 'setSdDocumentCategory',
        'to_maintenance_item_object' => 'setToMaintenanceItemObject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_date' => 'getDeliveryDate',
        'delivery_document' => 'getDeliveryDocument',
        'delivery_document_item' => 'getDeliveryDocumentItem',
        'maintenance_item_object_list' => 'getMaintenanceItemObjectList',
        'sd_document_category' => 'getSdDocumentCategory',
        'to_maintenance_item_object' => 'getToMaintenanceItemObject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('delivery_document', $data ?? [], null);
        $this->setIfExists('delivery_document_item', $data ?? [], null);
        $this->setIfExists('maintenance_item_object_list', $data ?? [], null);
        $this->setIfExists('sd_document_category', $data ?? [], null);
        $this->setIfExists('to_maintenance_item_object', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['delivery_document']) && (mb_strlen($this->container['delivery_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_document_item']) && (mb_strlen($this->container['delivery_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'delivery_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sd_document_category']) && (mb_strlen($this->container['sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sd_document_category', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_date
     *
     * @return string|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string|null $delivery_date delivery_date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets delivery_document
     *
     * @return string|null
     */
    public function getDeliveryDocument()
    {
        return $this->container['delivery_document'];
    }

    /**
     * Sets delivery_document
     *
     * @param string|null $delivery_document delivery_document
     *
     * @return self
     */
    public function setDeliveryDocument($delivery_document)
    {
        if (is_null($delivery_document)) {
            throw new \InvalidArgumentException('non-nullable delivery_document cannot be null');
        }
        if ((mb_strlen($delivery_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document when calling APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryType., must be smaller than or equal to 10.');
        }

        $this->container['delivery_document'] = $delivery_document;

        return $this;
    }

    /**
     * Gets delivery_document_item
     *
     * @return string|null
     */
    public function getDeliveryDocumentItem()
    {
        return $this->container['delivery_document_item'];
    }

    /**
     * Sets delivery_document_item
     *
     * @param string|null $delivery_document_item delivery_document_item
     *
     * @return self
     */
    public function setDeliveryDocumentItem($delivery_document_item)
    {
        if (is_null($delivery_document_item)) {
            throw new \InvalidArgumentException('non-nullable delivery_document_item cannot be null');
        }
        if ((mb_strlen($delivery_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document_item when calling APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryType., must be smaller than or equal to 6.');
        }

        $this->container['delivery_document_item'] = $delivery_document_item;

        return $this;
    }

    /**
     * Gets maintenance_item_object_list
     *
     * @return string|null
     */
    public function getMaintenanceItemObjectList()
    {
        return $this->container['maintenance_item_object_list'];
    }

    /**
     * Sets maintenance_item_object_list
     *
     * @param string|null $maintenance_item_object_list maintenance_item_object_list
     *
     * @return self
     */
    public function setMaintenanceItemObjectList($maintenance_item_object_list)
    {
        if (is_null($maintenance_item_object_list)) {
            throw new \InvalidArgumentException('non-nullable maintenance_item_object_list cannot be null');
        }
        $this->container['maintenance_item_object_list'] = $maintenance_item_object_list;

        return $this;
    }

    /**
     * Gets sd_document_category
     *
     * @return string|null
     */
    public function getSdDocumentCategory()
    {
        return $this->container['sd_document_category'];
    }

    /**
     * Sets sd_document_category
     *
     * @param string|null $sd_document_category sd_document_category
     *
     * @return self
     */
    public function setSdDocumentCategory($sd_document_category)
    {
        if (is_null($sd_document_category)) {
            throw new \InvalidArgumentException('non-nullable sd_document_category cannot be null');
        }
        if ((mb_strlen($sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_category when calling APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryType., must be smaller than or equal to 4.');
        }

        $this->container['sd_document_category'] = $sd_document_category;

        return $this;
    }

    /**
     * Gets to_maintenance_item_object
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryTypeToMaintenanceItemObject|null
     */
    public function getToMaintenanceItemObject()
    {
        return $this->container['to_maintenance_item_object'];
    }

    /**
     * Sets to_maintenance_item_object
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryTypeToMaintenanceItemObject|null $to_maintenance_item_object to_maintenance_item_object
     *
     * @return self
     */
    public function setToMaintenanceItemObject($to_maintenance_item_object)
    {
        if (is_null($to_maintenance_item_object)) {
            throw new \InvalidArgumentException('non-nullable to_maintenance_item_object cannot be null');
        }
        $this->container['to_maintenance_item_object'] = $to_maintenance_item_object;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


