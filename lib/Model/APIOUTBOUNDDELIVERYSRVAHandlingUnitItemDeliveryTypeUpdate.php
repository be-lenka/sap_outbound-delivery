<?php
/**
 * APIOUTBOUNDDELIVERYSRVAHandlingUnitItemDeliveryTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVAHandlingUnitItemDeliveryTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVAHandlingUnitItemDeliveryTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_HandlingUnitItemDeliveryType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'batch' => 'string',
        'handling_unit_external_id' => 'string',
        'handling_unit_nested_internal_id' => 'string',
        'handling_unit_quantity' => 'float',
        'handling_unit_quantity_unit' => 'string',
        'handling_unit_type_of_content' => 'string',
        'material' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'batch' => null,
        'handling_unit_external_id' => null,
        'handling_unit_nested_internal_id' => null,
        'handling_unit_quantity' => 'decimal',
        'handling_unit_quantity_unit' => null,
        'handling_unit_type_of_content' => null,
        'material' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'batch' => false,
		'handling_unit_external_id' => false,
		'handling_unit_nested_internal_id' => false,
		'handling_unit_quantity' => false,
		'handling_unit_quantity_unit' => false,
		'handling_unit_type_of_content' => false,
		'material' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batch' => 'Batch',
        'handling_unit_external_id' => 'HandlingUnitExternalId',
        'handling_unit_nested_internal_id' => 'HandlingUnitNestedInternalId',
        'handling_unit_quantity' => 'HandlingUnitQuantity',
        'handling_unit_quantity_unit' => 'HandlingUnitQuantityUnit',
        'handling_unit_type_of_content' => 'HandlingUnitTypeOfContent',
        'material' => 'Material'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batch' => 'setBatch',
        'handling_unit_external_id' => 'setHandlingUnitExternalId',
        'handling_unit_nested_internal_id' => 'setHandlingUnitNestedInternalId',
        'handling_unit_quantity' => 'setHandlingUnitQuantity',
        'handling_unit_quantity_unit' => 'setHandlingUnitQuantityUnit',
        'handling_unit_type_of_content' => 'setHandlingUnitTypeOfContent',
        'material' => 'setMaterial'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batch' => 'getBatch',
        'handling_unit_external_id' => 'getHandlingUnitExternalId',
        'handling_unit_nested_internal_id' => 'getHandlingUnitNestedInternalId',
        'handling_unit_quantity' => 'getHandlingUnitQuantity',
        'handling_unit_quantity_unit' => 'getHandlingUnitQuantityUnit',
        'handling_unit_type_of_content' => 'getHandlingUnitTypeOfContent',
        'material' => 'getMaterial'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('handling_unit_external_id', $data ?? [], null);
        $this->setIfExists('handling_unit_nested_internal_id', $data ?? [], null);
        $this->setIfExists('handling_unit_quantity', $data ?? [], null);
        $this->setIfExists('handling_unit_quantity_unit', $data ?? [], null);
        $this->setIfExists('handling_unit_type_of_content', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['handling_unit_external_id']) && (mb_strlen($this->container['handling_unit_external_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'handling_unit_external_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['handling_unit_nested_internal_id']) && (mb_strlen($this->container['handling_unit_nested_internal_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'handling_unit_nested_internal_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['handling_unit_quantity_unit']) && (mb_strlen($this->container['handling_unit_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'handling_unit_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['handling_unit_type_of_content']) && (mb_strlen($this->container['handling_unit_type_of_content']) > 1)) {
            $invalidProperties[] = "invalid value for 'handling_unit_type_of_content', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 40)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch batch
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            throw new \InvalidArgumentException('non-nullable batch cannot be null');
        }
        if ((mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitItemDeliveryTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets handling_unit_external_id
     *
     * @return string|null
     */
    public function getHandlingUnitExternalId()
    {
        return $this->container['handling_unit_external_id'];
    }

    /**
     * Sets handling_unit_external_id
     *
     * @param string|null $handling_unit_external_id handling_unit_external_id
     *
     * @return self
     */
    public function setHandlingUnitExternalId($handling_unit_external_id)
    {
        if (is_null($handling_unit_external_id)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_external_id cannot be null');
        }
        if ((mb_strlen($handling_unit_external_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_external_id when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitItemDeliveryTypeUpdate., must be smaller than or equal to 20.');
        }

        $this->container['handling_unit_external_id'] = $handling_unit_external_id;

        return $this;
    }

    /**
     * Gets handling_unit_nested_internal_id
     *
     * @return string|null
     */
    public function getHandlingUnitNestedInternalId()
    {
        return $this->container['handling_unit_nested_internal_id'];
    }

    /**
     * Sets handling_unit_nested_internal_id
     *
     * @param string|null $handling_unit_nested_internal_id handling_unit_nested_internal_id
     *
     * @return self
     */
    public function setHandlingUnitNestedInternalId($handling_unit_nested_internal_id)
    {
        if (is_null($handling_unit_nested_internal_id)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_nested_internal_id cannot be null');
        }
        if ((mb_strlen($handling_unit_nested_internal_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_nested_internal_id when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitItemDeliveryTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['handling_unit_nested_internal_id'] = $handling_unit_nested_internal_id;

        return $this;
    }

    /**
     * Gets handling_unit_quantity
     *
     * @return float|null
     */
    public function getHandlingUnitQuantity()
    {
        return $this->container['handling_unit_quantity'];
    }

    /**
     * Sets handling_unit_quantity
     *
     * @param float|null $handling_unit_quantity handling_unit_quantity
     *
     * @return self
     */
    public function setHandlingUnitQuantity($handling_unit_quantity)
    {
        if (is_null($handling_unit_quantity)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_quantity cannot be null');
        }


        $this->container['handling_unit_quantity'] = $handling_unit_quantity;

        return $this;
    }

    /**
     * Gets handling_unit_quantity_unit
     *
     * @return string|null
     */
    public function getHandlingUnitQuantityUnit()
    {
        return $this->container['handling_unit_quantity_unit'];
    }

    /**
     * Sets handling_unit_quantity_unit
     *
     * @param string|null $handling_unit_quantity_unit handling_unit_quantity_unit
     *
     * @return self
     */
    public function setHandlingUnitQuantityUnit($handling_unit_quantity_unit)
    {
        if (is_null($handling_unit_quantity_unit)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_quantity_unit cannot be null');
        }
        if ((mb_strlen($handling_unit_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_quantity_unit when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitItemDeliveryTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['handling_unit_quantity_unit'] = $handling_unit_quantity_unit;

        return $this;
    }

    /**
     * Gets handling_unit_type_of_content
     *
     * @return string|null
     */
    public function getHandlingUnitTypeOfContent()
    {
        return $this->container['handling_unit_type_of_content'];
    }

    /**
     * Sets handling_unit_type_of_content
     *
     * @param string|null $handling_unit_type_of_content handling_unit_type_of_content
     *
     * @return self
     */
    public function setHandlingUnitTypeOfContent($handling_unit_type_of_content)
    {
        if (is_null($handling_unit_type_of_content)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_type_of_content cannot be null');
        }
        if ((mb_strlen($handling_unit_type_of_content) > 1)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_type_of_content when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitItemDeliveryTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['handling_unit_type_of_content'] = $handling_unit_type_of_content;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material material
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            throw new \InvalidArgumentException('non-nullable material cannot be null');
        }
        if ((mb_strlen($material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $material when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitItemDeliveryTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['material'] = $material;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


