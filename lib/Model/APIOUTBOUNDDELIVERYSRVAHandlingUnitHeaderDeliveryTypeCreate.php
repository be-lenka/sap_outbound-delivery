<?php
/**
 * APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_HandlingUnitHeaderDeliveryType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delivery_document' => 'string',
        'gross_volume' => 'float',
        'gross_weight' => 'float',
        'handling_unit_base_unit_of_measure' => 'string',
        'handling_unit_content_description' => 'string',
        'handling_unit_external_id' => 'string',
        'handling_unit_height' => 'float',
        'handling_unit_internal_id' => 'string',
        'handling_unit_length' => 'float',
        'handling_unit_max_volume' => 'float',
        'handling_unit_max_weight' => 'float',
        'handling_unit_net_volume' => 'float',
        'handling_unit_second_external_id' => 'string',
        'handling_unit_tare_volume' => 'float',
        'handling_unit_tare_volume_unit' => 'string',
        'handling_unit_tare_weight' => 'float',
        'handling_unit_tare_weight_unit' => 'string',
        'handling_unit_uo_m_dimension' => 'string',
        'handling_unit_width' => 'float',
        'net_weight' => 'float',
        'packaging_material' => 'string',
        'volume_unit' => 'string',
        'weight_unit' => 'string',
        'to_handling_unit_item_delivery' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreateToHandlingUnitItemDelivery'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'delivery_document' => null,
        'gross_volume' => 'decimal',
        'gross_weight' => 'decimal',
        'handling_unit_base_unit_of_measure' => null,
        'handling_unit_content_description' => null,
        'handling_unit_external_id' => null,
        'handling_unit_height' => 'decimal',
        'handling_unit_internal_id' => null,
        'handling_unit_length' => 'decimal',
        'handling_unit_max_volume' => 'decimal',
        'handling_unit_max_weight' => 'decimal',
        'handling_unit_net_volume' => 'decimal',
        'handling_unit_second_external_id' => null,
        'handling_unit_tare_volume' => 'decimal',
        'handling_unit_tare_volume_unit' => null,
        'handling_unit_tare_weight' => 'decimal',
        'handling_unit_tare_weight_unit' => null,
        'handling_unit_uo_m_dimension' => null,
        'handling_unit_width' => 'decimal',
        'net_weight' => 'decimal',
        'packaging_material' => null,
        'volume_unit' => null,
        'weight_unit' => null,
        'to_handling_unit_item_delivery' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'delivery_document' => false,
		'gross_volume' => false,
		'gross_weight' => false,
		'handling_unit_base_unit_of_measure' => false,
		'handling_unit_content_description' => false,
		'handling_unit_external_id' => false,
		'handling_unit_height' => false,
		'handling_unit_internal_id' => false,
		'handling_unit_length' => false,
		'handling_unit_max_volume' => false,
		'handling_unit_max_weight' => false,
		'handling_unit_net_volume' => false,
		'handling_unit_second_external_id' => false,
		'handling_unit_tare_volume' => false,
		'handling_unit_tare_volume_unit' => false,
		'handling_unit_tare_weight' => false,
		'handling_unit_tare_weight_unit' => false,
		'handling_unit_uo_m_dimension' => false,
		'handling_unit_width' => false,
		'net_weight' => false,
		'packaging_material' => false,
		'volume_unit' => false,
		'weight_unit' => false,
		'to_handling_unit_item_delivery' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_document' => 'DeliveryDocument',
        'gross_volume' => 'GrossVolume',
        'gross_weight' => 'GrossWeight',
        'handling_unit_base_unit_of_measure' => 'HandlingUnitBaseUnitOfMeasure',
        'handling_unit_content_description' => 'HandlingUnitContentDescription',
        'handling_unit_external_id' => 'HandlingUnitExternalId',
        'handling_unit_height' => 'HandlingUnitHeight',
        'handling_unit_internal_id' => 'HandlingUnitInternalId',
        'handling_unit_length' => 'HandlingUnitLength',
        'handling_unit_max_volume' => 'HandlingUnitMaxVolume',
        'handling_unit_max_weight' => 'HandlingUnitMaxWeight',
        'handling_unit_net_volume' => 'HandlingUnitNetVolume',
        'handling_unit_second_external_id' => 'HandlingUnitSecondExternalId',
        'handling_unit_tare_volume' => 'HandlingUnitTareVolume',
        'handling_unit_tare_volume_unit' => 'HandlingUnitTareVolumeUnit',
        'handling_unit_tare_weight' => 'HandlingUnitTareWeight',
        'handling_unit_tare_weight_unit' => 'HandlingUnitTareWeightUnit',
        'handling_unit_uo_m_dimension' => 'HandlingUnitUoMDimension',
        'handling_unit_width' => 'HandlingUnitWidth',
        'net_weight' => 'NetWeight',
        'packaging_material' => 'PackagingMaterial',
        'volume_unit' => 'VolumeUnit',
        'weight_unit' => 'WeightUnit',
        'to_handling_unit_item_delivery' => 'to_HandlingUnitItemDelivery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_document' => 'setDeliveryDocument',
        'gross_volume' => 'setGrossVolume',
        'gross_weight' => 'setGrossWeight',
        'handling_unit_base_unit_of_measure' => 'setHandlingUnitBaseUnitOfMeasure',
        'handling_unit_content_description' => 'setHandlingUnitContentDescription',
        'handling_unit_external_id' => 'setHandlingUnitExternalId',
        'handling_unit_height' => 'setHandlingUnitHeight',
        'handling_unit_internal_id' => 'setHandlingUnitInternalId',
        'handling_unit_length' => 'setHandlingUnitLength',
        'handling_unit_max_volume' => 'setHandlingUnitMaxVolume',
        'handling_unit_max_weight' => 'setHandlingUnitMaxWeight',
        'handling_unit_net_volume' => 'setHandlingUnitNetVolume',
        'handling_unit_second_external_id' => 'setHandlingUnitSecondExternalId',
        'handling_unit_tare_volume' => 'setHandlingUnitTareVolume',
        'handling_unit_tare_volume_unit' => 'setHandlingUnitTareVolumeUnit',
        'handling_unit_tare_weight' => 'setHandlingUnitTareWeight',
        'handling_unit_tare_weight_unit' => 'setHandlingUnitTareWeightUnit',
        'handling_unit_uo_m_dimension' => 'setHandlingUnitUoMDimension',
        'handling_unit_width' => 'setHandlingUnitWidth',
        'net_weight' => 'setNetWeight',
        'packaging_material' => 'setPackagingMaterial',
        'volume_unit' => 'setVolumeUnit',
        'weight_unit' => 'setWeightUnit',
        'to_handling_unit_item_delivery' => 'setToHandlingUnitItemDelivery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_document' => 'getDeliveryDocument',
        'gross_volume' => 'getGrossVolume',
        'gross_weight' => 'getGrossWeight',
        'handling_unit_base_unit_of_measure' => 'getHandlingUnitBaseUnitOfMeasure',
        'handling_unit_content_description' => 'getHandlingUnitContentDescription',
        'handling_unit_external_id' => 'getHandlingUnitExternalId',
        'handling_unit_height' => 'getHandlingUnitHeight',
        'handling_unit_internal_id' => 'getHandlingUnitInternalId',
        'handling_unit_length' => 'getHandlingUnitLength',
        'handling_unit_max_volume' => 'getHandlingUnitMaxVolume',
        'handling_unit_max_weight' => 'getHandlingUnitMaxWeight',
        'handling_unit_net_volume' => 'getHandlingUnitNetVolume',
        'handling_unit_second_external_id' => 'getHandlingUnitSecondExternalId',
        'handling_unit_tare_volume' => 'getHandlingUnitTareVolume',
        'handling_unit_tare_volume_unit' => 'getHandlingUnitTareVolumeUnit',
        'handling_unit_tare_weight' => 'getHandlingUnitTareWeight',
        'handling_unit_tare_weight_unit' => 'getHandlingUnitTareWeightUnit',
        'handling_unit_uo_m_dimension' => 'getHandlingUnitUoMDimension',
        'handling_unit_width' => 'getHandlingUnitWidth',
        'net_weight' => 'getNetWeight',
        'packaging_material' => 'getPackagingMaterial',
        'volume_unit' => 'getVolumeUnit',
        'weight_unit' => 'getWeightUnit',
        'to_handling_unit_item_delivery' => 'getToHandlingUnitItemDelivery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('delivery_document', $data ?? [], null);
        $this->setIfExists('gross_volume', $data ?? [], null);
        $this->setIfExists('gross_weight', $data ?? [], null);
        $this->setIfExists('handling_unit_base_unit_of_measure', $data ?? [], null);
        $this->setIfExists('handling_unit_content_description', $data ?? [], null);
        $this->setIfExists('handling_unit_external_id', $data ?? [], null);
        $this->setIfExists('handling_unit_height', $data ?? [], null);
        $this->setIfExists('handling_unit_internal_id', $data ?? [], null);
        $this->setIfExists('handling_unit_length', $data ?? [], null);
        $this->setIfExists('handling_unit_max_volume', $data ?? [], null);
        $this->setIfExists('handling_unit_max_weight', $data ?? [], null);
        $this->setIfExists('handling_unit_net_volume', $data ?? [], null);
        $this->setIfExists('handling_unit_second_external_id', $data ?? [], null);
        $this->setIfExists('handling_unit_tare_volume', $data ?? [], null);
        $this->setIfExists('handling_unit_tare_volume_unit', $data ?? [], null);
        $this->setIfExists('handling_unit_tare_weight', $data ?? [], null);
        $this->setIfExists('handling_unit_tare_weight_unit', $data ?? [], null);
        $this->setIfExists('handling_unit_uo_m_dimension', $data ?? [], null);
        $this->setIfExists('handling_unit_width', $data ?? [], null);
        $this->setIfExists('net_weight', $data ?? [], null);
        $this->setIfExists('packaging_material', $data ?? [], null);
        $this->setIfExists('volume_unit', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('to_handling_unit_item_delivery', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['delivery_document']) && (mb_strlen($this->container['delivery_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['handling_unit_base_unit_of_measure']) && (mb_strlen($this->container['handling_unit_base_unit_of_measure']) > 3)) {
            $invalidProperties[] = "invalid value for 'handling_unit_base_unit_of_measure', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['handling_unit_content_description']) && (mb_strlen($this->container['handling_unit_content_description']) > 40)) {
            $invalidProperties[] = "invalid value for 'handling_unit_content_description', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['handling_unit_external_id']) && (mb_strlen($this->container['handling_unit_external_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'handling_unit_external_id', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['handling_unit_internal_id'] === null) {
            $invalidProperties[] = "'handling_unit_internal_id' can't be null";
        }
        if ((mb_strlen($this->container['handling_unit_internal_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'handling_unit_internal_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['handling_unit_second_external_id']) && (mb_strlen($this->container['handling_unit_second_external_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'handling_unit_second_external_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['handling_unit_tare_volume_unit']) && (mb_strlen($this->container['handling_unit_tare_volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'handling_unit_tare_volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['handling_unit_tare_weight_unit']) && (mb_strlen($this->container['handling_unit_tare_weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'handling_unit_tare_weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['handling_unit_uo_m_dimension']) && (mb_strlen($this->container['handling_unit_uo_m_dimension']) > 3)) {
            $invalidProperties[] = "invalid value for 'handling_unit_uo_m_dimension', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['packaging_material']) && (mb_strlen($this->container['packaging_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'packaging_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['volume_unit']) && (mb_strlen($this->container['volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['weight_unit']) && (mb_strlen($this->container['weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'weight_unit', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_document
     *
     * @return string|null
     */
    public function getDeliveryDocument()
    {
        return $this->container['delivery_document'];
    }

    /**
     * Sets delivery_document
     *
     * @param string|null $delivery_document delivery_document
     *
     * @return self
     */
    public function setDeliveryDocument($delivery_document)
    {
        if (is_null($delivery_document)) {
            throw new \InvalidArgumentException('non-nullable delivery_document cannot be null');
        }
        if ((mb_strlen($delivery_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['delivery_document'] = $delivery_document;

        return $this;
    }

    /**
     * Gets gross_volume
     *
     * @return float|null
     */
    public function getGrossVolume()
    {
        return $this->container['gross_volume'];
    }

    /**
     * Sets gross_volume
     *
     * @param float|null $gross_volume gross_volume
     *
     * @return self
     */
    public function setGrossVolume($gross_volume)
    {
        if (is_null($gross_volume)) {
            throw new \InvalidArgumentException('non-nullable gross_volume cannot be null');
        }


        $this->container['gross_volume'] = $gross_volume;

        return $this;
    }

    /**
     * Gets gross_weight
     *
     * @return float|null
     */
    public function getGrossWeight()
    {
        return $this->container['gross_weight'];
    }

    /**
     * Sets gross_weight
     *
     * @param float|null $gross_weight gross_weight
     *
     * @return self
     */
    public function setGrossWeight($gross_weight)
    {
        if (is_null($gross_weight)) {
            throw new \InvalidArgumentException('non-nullable gross_weight cannot be null');
        }


        $this->container['gross_weight'] = $gross_weight;

        return $this;
    }

    /**
     * Gets handling_unit_base_unit_of_measure
     *
     * @return string|null
     */
    public function getHandlingUnitBaseUnitOfMeasure()
    {
        return $this->container['handling_unit_base_unit_of_measure'];
    }

    /**
     * Sets handling_unit_base_unit_of_measure
     *
     * @param string|null $handling_unit_base_unit_of_measure handling_unit_base_unit_of_measure
     *
     * @return self
     */
    public function setHandlingUnitBaseUnitOfMeasure($handling_unit_base_unit_of_measure)
    {
        if (is_null($handling_unit_base_unit_of_measure)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_base_unit_of_measure cannot be null');
        }
        if ((mb_strlen($handling_unit_base_unit_of_measure) > 3)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_base_unit_of_measure when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['handling_unit_base_unit_of_measure'] = $handling_unit_base_unit_of_measure;

        return $this;
    }

    /**
     * Gets handling_unit_content_description
     *
     * @return string|null
     */
    public function getHandlingUnitContentDescription()
    {
        return $this->container['handling_unit_content_description'];
    }

    /**
     * Sets handling_unit_content_description
     *
     * @param string|null $handling_unit_content_description handling_unit_content_description
     *
     * @return self
     */
    public function setHandlingUnitContentDescription($handling_unit_content_description)
    {
        if (is_null($handling_unit_content_description)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_content_description cannot be null');
        }
        if ((mb_strlen($handling_unit_content_description) > 40)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_content_description when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['handling_unit_content_description'] = $handling_unit_content_description;

        return $this;
    }

    /**
     * Gets handling_unit_external_id
     *
     * @return string|null
     */
    public function getHandlingUnitExternalId()
    {
        return $this->container['handling_unit_external_id'];
    }

    /**
     * Sets handling_unit_external_id
     *
     * @param string|null $handling_unit_external_id handling_unit_external_id
     *
     * @return self
     */
    public function setHandlingUnitExternalId($handling_unit_external_id)
    {
        if (is_null($handling_unit_external_id)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_external_id cannot be null');
        }
        if ((mb_strlen($handling_unit_external_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_external_id when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 20.');
        }

        $this->container['handling_unit_external_id'] = $handling_unit_external_id;

        return $this;
    }

    /**
     * Gets handling_unit_height
     *
     * @return float|null
     */
    public function getHandlingUnitHeight()
    {
        return $this->container['handling_unit_height'];
    }

    /**
     * Sets handling_unit_height
     *
     * @param float|null $handling_unit_height handling_unit_height
     *
     * @return self
     */
    public function setHandlingUnitHeight($handling_unit_height)
    {
        if (is_null($handling_unit_height)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_height cannot be null');
        }


        $this->container['handling_unit_height'] = $handling_unit_height;

        return $this;
    }

    /**
     * Gets handling_unit_internal_id
     *
     * @return string
     */
    public function getHandlingUnitInternalId()
    {
        return $this->container['handling_unit_internal_id'];
    }

    /**
     * Sets handling_unit_internal_id
     *
     * @param string $handling_unit_internal_id handling_unit_internal_id
     *
     * @return self
     */
    public function setHandlingUnitInternalId($handling_unit_internal_id)
    {
        if (is_null($handling_unit_internal_id)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_internal_id cannot be null');
        }
        if ((mb_strlen($handling_unit_internal_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_internal_id when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['handling_unit_internal_id'] = $handling_unit_internal_id;

        return $this;
    }

    /**
     * Gets handling_unit_length
     *
     * @return float|null
     */
    public function getHandlingUnitLength()
    {
        return $this->container['handling_unit_length'];
    }

    /**
     * Sets handling_unit_length
     *
     * @param float|null $handling_unit_length handling_unit_length
     *
     * @return self
     */
    public function setHandlingUnitLength($handling_unit_length)
    {
        if (is_null($handling_unit_length)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_length cannot be null');
        }


        $this->container['handling_unit_length'] = $handling_unit_length;

        return $this;
    }

    /**
     * Gets handling_unit_max_volume
     *
     * @return float|null
     */
    public function getHandlingUnitMaxVolume()
    {
        return $this->container['handling_unit_max_volume'];
    }

    /**
     * Sets handling_unit_max_volume
     *
     * @param float|null $handling_unit_max_volume handling_unit_max_volume
     *
     * @return self
     */
    public function setHandlingUnitMaxVolume($handling_unit_max_volume)
    {
        if (is_null($handling_unit_max_volume)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_max_volume cannot be null');
        }


        $this->container['handling_unit_max_volume'] = $handling_unit_max_volume;

        return $this;
    }

    /**
     * Gets handling_unit_max_weight
     *
     * @return float|null
     */
    public function getHandlingUnitMaxWeight()
    {
        return $this->container['handling_unit_max_weight'];
    }

    /**
     * Sets handling_unit_max_weight
     *
     * @param float|null $handling_unit_max_weight handling_unit_max_weight
     *
     * @return self
     */
    public function setHandlingUnitMaxWeight($handling_unit_max_weight)
    {
        if (is_null($handling_unit_max_weight)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_max_weight cannot be null');
        }


        $this->container['handling_unit_max_weight'] = $handling_unit_max_weight;

        return $this;
    }

    /**
     * Gets handling_unit_net_volume
     *
     * @return float|null
     */
    public function getHandlingUnitNetVolume()
    {
        return $this->container['handling_unit_net_volume'];
    }

    /**
     * Sets handling_unit_net_volume
     *
     * @param float|null $handling_unit_net_volume handling_unit_net_volume
     *
     * @return self
     */
    public function setHandlingUnitNetVolume($handling_unit_net_volume)
    {
        if (is_null($handling_unit_net_volume)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_net_volume cannot be null');
        }


        $this->container['handling_unit_net_volume'] = $handling_unit_net_volume;

        return $this;
    }

    /**
     * Gets handling_unit_second_external_id
     *
     * @return string|null
     */
    public function getHandlingUnitSecondExternalId()
    {
        return $this->container['handling_unit_second_external_id'];
    }

    /**
     * Sets handling_unit_second_external_id
     *
     * @param string|null $handling_unit_second_external_id handling_unit_second_external_id
     *
     * @return self
     */
    public function setHandlingUnitSecondExternalId($handling_unit_second_external_id)
    {
        if (is_null($handling_unit_second_external_id)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_second_external_id cannot be null');
        }
        if ((mb_strlen($handling_unit_second_external_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_second_external_id when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 20.');
        }

        $this->container['handling_unit_second_external_id'] = $handling_unit_second_external_id;

        return $this;
    }

    /**
     * Gets handling_unit_tare_volume
     *
     * @return float|null
     */
    public function getHandlingUnitTareVolume()
    {
        return $this->container['handling_unit_tare_volume'];
    }

    /**
     * Sets handling_unit_tare_volume
     *
     * @param float|null $handling_unit_tare_volume handling_unit_tare_volume
     *
     * @return self
     */
    public function setHandlingUnitTareVolume($handling_unit_tare_volume)
    {
        if (is_null($handling_unit_tare_volume)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_tare_volume cannot be null');
        }


        $this->container['handling_unit_tare_volume'] = $handling_unit_tare_volume;

        return $this;
    }

    /**
     * Gets handling_unit_tare_volume_unit
     *
     * @return string|null
     */
    public function getHandlingUnitTareVolumeUnit()
    {
        return $this->container['handling_unit_tare_volume_unit'];
    }

    /**
     * Sets handling_unit_tare_volume_unit
     *
     * @param string|null $handling_unit_tare_volume_unit handling_unit_tare_volume_unit
     *
     * @return self
     */
    public function setHandlingUnitTareVolumeUnit($handling_unit_tare_volume_unit)
    {
        if (is_null($handling_unit_tare_volume_unit)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_tare_volume_unit cannot be null');
        }
        if ((mb_strlen($handling_unit_tare_volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_tare_volume_unit when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['handling_unit_tare_volume_unit'] = $handling_unit_tare_volume_unit;

        return $this;
    }

    /**
     * Gets handling_unit_tare_weight
     *
     * @return float|null
     */
    public function getHandlingUnitTareWeight()
    {
        return $this->container['handling_unit_tare_weight'];
    }

    /**
     * Sets handling_unit_tare_weight
     *
     * @param float|null $handling_unit_tare_weight handling_unit_tare_weight
     *
     * @return self
     */
    public function setHandlingUnitTareWeight($handling_unit_tare_weight)
    {
        if (is_null($handling_unit_tare_weight)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_tare_weight cannot be null');
        }


        $this->container['handling_unit_tare_weight'] = $handling_unit_tare_weight;

        return $this;
    }

    /**
     * Gets handling_unit_tare_weight_unit
     *
     * @return string|null
     */
    public function getHandlingUnitTareWeightUnit()
    {
        return $this->container['handling_unit_tare_weight_unit'];
    }

    /**
     * Sets handling_unit_tare_weight_unit
     *
     * @param string|null $handling_unit_tare_weight_unit handling_unit_tare_weight_unit
     *
     * @return self
     */
    public function setHandlingUnitTareWeightUnit($handling_unit_tare_weight_unit)
    {
        if (is_null($handling_unit_tare_weight_unit)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_tare_weight_unit cannot be null');
        }
        if ((mb_strlen($handling_unit_tare_weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_tare_weight_unit when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['handling_unit_tare_weight_unit'] = $handling_unit_tare_weight_unit;

        return $this;
    }

    /**
     * Gets handling_unit_uo_m_dimension
     *
     * @return string|null
     */
    public function getHandlingUnitUoMDimension()
    {
        return $this->container['handling_unit_uo_m_dimension'];
    }

    /**
     * Sets handling_unit_uo_m_dimension
     *
     * @param string|null $handling_unit_uo_m_dimension handling_unit_uo_m_dimension
     *
     * @return self
     */
    public function setHandlingUnitUoMDimension($handling_unit_uo_m_dimension)
    {
        if (is_null($handling_unit_uo_m_dimension)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_uo_m_dimension cannot be null');
        }
        if ((mb_strlen($handling_unit_uo_m_dimension) > 3)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_uo_m_dimension when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['handling_unit_uo_m_dimension'] = $handling_unit_uo_m_dimension;

        return $this;
    }

    /**
     * Gets handling_unit_width
     *
     * @return float|null
     */
    public function getHandlingUnitWidth()
    {
        return $this->container['handling_unit_width'];
    }

    /**
     * Sets handling_unit_width
     *
     * @param float|null $handling_unit_width handling_unit_width
     *
     * @return self
     */
    public function setHandlingUnitWidth($handling_unit_width)
    {
        if (is_null($handling_unit_width)) {
            throw new \InvalidArgumentException('non-nullable handling_unit_width cannot be null');
        }


        $this->container['handling_unit_width'] = $handling_unit_width;

        return $this;
    }

    /**
     * Gets net_weight
     *
     * @return float|null
     */
    public function getNetWeight()
    {
        return $this->container['net_weight'];
    }

    /**
     * Sets net_weight
     *
     * @param float|null $net_weight net_weight
     *
     * @return self
     */
    public function setNetWeight($net_weight)
    {
        if (is_null($net_weight)) {
            throw new \InvalidArgumentException('non-nullable net_weight cannot be null');
        }


        $this->container['net_weight'] = $net_weight;

        return $this;
    }

    /**
     * Gets packaging_material
     *
     * @return string|null
     */
    public function getPackagingMaterial()
    {
        return $this->container['packaging_material'];
    }

    /**
     * Sets packaging_material
     *
     * @param string|null $packaging_material packaging_material
     *
     * @return self
     */
    public function setPackagingMaterial($packaging_material)
    {
        if (is_null($packaging_material)) {
            throw new \InvalidArgumentException('non-nullable packaging_material cannot be null');
        }
        if ((mb_strlen($packaging_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $packaging_material when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['packaging_material'] = $packaging_material;

        return $this;
    }

    /**
     * Gets volume_unit
     *
     * @return string|null
     */
    public function getVolumeUnit()
    {
        return $this->container['volume_unit'];
    }

    /**
     * Sets volume_unit
     *
     * @param string|null $volume_unit volume_unit
     *
     * @return self
     */
    public function setVolumeUnit($volume_unit)
    {
        if (is_null($volume_unit)) {
            throw new \InvalidArgumentException('non-nullable volume_unit cannot be null');
        }
        if ((mb_strlen($volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $volume_unit when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['volume_unit'] = $volume_unit;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        if ((mb_strlen($weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $weight_unit when calling APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets to_handling_unit_item_delivery
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreateToHandlingUnitItemDelivery|null
     */
    public function getToHandlingUnitItemDelivery()
    {
        return $this->container['to_handling_unit_item_delivery'];
    }

    /**
     * Sets to_handling_unit_item_delivery
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreateToHandlingUnitItemDelivery|null $to_handling_unit_item_delivery to_handling_unit_item_delivery
     *
     * @return self
     */
    public function setToHandlingUnitItemDelivery($to_handling_unit_item_delivery)
    {
        if (is_null($to_handling_unit_item_delivery)) {
            throw new \InvalidArgumentException('non-nullable to_handling_unit_item_delivery cannot be null');
        }
        $this->container['to_handling_unit_item_delivery'] = $to_handling_unit_item_delivery;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


