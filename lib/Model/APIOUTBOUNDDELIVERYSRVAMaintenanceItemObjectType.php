<?php
/**
 * APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_MaintenanceItemObjectType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assembly' => 'string',
        'equipment' => 'string',
        'functional_location' => 'string',
        'maintenance_item_object' => 'int',
        'maintenance_item_object_list' => 'string',
        'maintenance_notification' => 'string',
        'maint_object_loc_acct_assgmt_nmbr' => 'string',
        'material' => 'string',
        'serial_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assembly' => null,
        'equipment' => null,
        'functional_location' => null,
        'maintenance_item_object' => 'int32',
        'maintenance_item_object_list' => 'int64',
        'maintenance_notification' => null,
        'maint_object_loc_acct_assgmt_nmbr' => null,
        'material' => null,
        'serial_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assembly' => false,
		'equipment' => false,
		'functional_location' => false,
		'maintenance_item_object' => false,
		'maintenance_item_object_list' => false,
		'maintenance_notification' => false,
		'maint_object_loc_acct_assgmt_nmbr' => false,
		'material' => false,
		'serial_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assembly' => 'Assembly',
        'equipment' => 'Equipment',
        'functional_location' => 'FunctionalLocation',
        'maintenance_item_object' => 'MaintenanceItemObject',
        'maintenance_item_object_list' => 'MaintenanceItemObjectList',
        'maintenance_notification' => 'MaintenanceNotification',
        'maint_object_loc_acct_assgmt_nmbr' => 'MaintObjectLocAcctAssgmtNmbr',
        'material' => 'Material',
        'serial_number' => 'SerialNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assembly' => 'setAssembly',
        'equipment' => 'setEquipment',
        'functional_location' => 'setFunctionalLocation',
        'maintenance_item_object' => 'setMaintenanceItemObject',
        'maintenance_item_object_list' => 'setMaintenanceItemObjectList',
        'maintenance_notification' => 'setMaintenanceNotification',
        'maint_object_loc_acct_assgmt_nmbr' => 'setMaintObjectLocAcctAssgmtNmbr',
        'material' => 'setMaterial',
        'serial_number' => 'setSerialNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assembly' => 'getAssembly',
        'equipment' => 'getEquipment',
        'functional_location' => 'getFunctionalLocation',
        'maintenance_item_object' => 'getMaintenanceItemObject',
        'maintenance_item_object_list' => 'getMaintenanceItemObjectList',
        'maintenance_notification' => 'getMaintenanceNotification',
        'maint_object_loc_acct_assgmt_nmbr' => 'getMaintObjectLocAcctAssgmtNmbr',
        'material' => 'getMaterial',
        'serial_number' => 'getSerialNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('assembly', $data ?? [], null);
        $this->setIfExists('equipment', $data ?? [], null);
        $this->setIfExists('functional_location', $data ?? [], null);
        $this->setIfExists('maintenance_item_object', $data ?? [], null);
        $this->setIfExists('maintenance_item_object_list', $data ?? [], null);
        $this->setIfExists('maintenance_notification', $data ?? [], null);
        $this->setIfExists('maint_object_loc_acct_assgmt_nmbr', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['assembly']) && (mb_strlen($this->container['assembly']) > 40)) {
            $invalidProperties[] = "invalid value for 'assembly', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['equipment']) && (mb_strlen($this->container['equipment']) > 18)) {
            $invalidProperties[] = "invalid value for 'equipment', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['functional_location']) && (mb_strlen($this->container['functional_location']) > 30)) {
            $invalidProperties[] = "invalid value for 'functional_location', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['maintenance_notification']) && (mb_strlen($this->container['maintenance_notification']) > 12)) {
            $invalidProperties[] = "invalid value for 'maintenance_notification', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['maint_object_loc_acct_assgmt_nmbr']) && (mb_strlen($this->container['maint_object_loc_acct_assgmt_nmbr']) > 12)) {
            $invalidProperties[] = "invalid value for 'maint_object_loc_acct_assgmt_nmbr', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 40)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['serial_number']) && (mb_strlen($this->container['serial_number']) > 18)) {
            $invalidProperties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 18.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assembly
     *
     * @return string|null
     */
    public function getAssembly()
    {
        return $this->container['assembly'];
    }

    /**
     * Sets assembly
     *
     * @param string|null $assembly assembly
     *
     * @return self
     */
    public function setAssembly($assembly)
    {
        if (is_null($assembly)) {
            throw new \InvalidArgumentException('non-nullable assembly cannot be null');
        }
        if ((mb_strlen($assembly) > 40)) {
            throw new \InvalidArgumentException('invalid length for $assembly when calling APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType., must be smaller than or equal to 40.');
        }

        $this->container['assembly'] = $assembly;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return string|null
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param string|null $equipment equipment
     *
     * @return self
     */
    public function setEquipment($equipment)
    {
        if (is_null($equipment)) {
            throw new \InvalidArgumentException('non-nullable equipment cannot be null');
        }
        if ((mb_strlen($equipment) > 18)) {
            throw new \InvalidArgumentException('invalid length for $equipment when calling APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType., must be smaller than or equal to 18.');
        }

        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets functional_location
     *
     * @return string|null
     */
    public function getFunctionalLocation()
    {
        return $this->container['functional_location'];
    }

    /**
     * Sets functional_location
     *
     * @param string|null $functional_location functional_location
     *
     * @return self
     */
    public function setFunctionalLocation($functional_location)
    {
        if (is_null($functional_location)) {
            throw new \InvalidArgumentException('non-nullable functional_location cannot be null');
        }
        if ((mb_strlen($functional_location) > 30)) {
            throw new \InvalidArgumentException('invalid length for $functional_location when calling APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType., must be smaller than or equal to 30.');
        }

        $this->container['functional_location'] = $functional_location;

        return $this;
    }

    /**
     * Gets maintenance_item_object
     *
     * @return int|null
     */
    public function getMaintenanceItemObject()
    {
        return $this->container['maintenance_item_object'];
    }

    /**
     * Sets maintenance_item_object
     *
     * @param int|null $maintenance_item_object maintenance_item_object
     *
     * @return self
     */
    public function setMaintenanceItemObject($maintenance_item_object)
    {
        if (is_null($maintenance_item_object)) {
            throw new \InvalidArgumentException('non-nullable maintenance_item_object cannot be null');
        }
        $this->container['maintenance_item_object'] = $maintenance_item_object;

        return $this;
    }

    /**
     * Gets maintenance_item_object_list
     *
     * @return string|null
     */
    public function getMaintenanceItemObjectList()
    {
        return $this->container['maintenance_item_object_list'];
    }

    /**
     * Sets maintenance_item_object_list
     *
     * @param string|null $maintenance_item_object_list maintenance_item_object_list
     *
     * @return self
     */
    public function setMaintenanceItemObjectList($maintenance_item_object_list)
    {
        if (is_null($maintenance_item_object_list)) {
            throw new \InvalidArgumentException('non-nullable maintenance_item_object_list cannot be null');
        }
        $this->container['maintenance_item_object_list'] = $maintenance_item_object_list;

        return $this;
    }

    /**
     * Gets maintenance_notification
     *
     * @return string|null
     */
    public function getMaintenanceNotification()
    {
        return $this->container['maintenance_notification'];
    }

    /**
     * Sets maintenance_notification
     *
     * @param string|null $maintenance_notification maintenance_notification
     *
     * @return self
     */
    public function setMaintenanceNotification($maintenance_notification)
    {
        if (is_null($maintenance_notification)) {
            throw new \InvalidArgumentException('non-nullable maintenance_notification cannot be null');
        }
        if ((mb_strlen($maintenance_notification) > 12)) {
            throw new \InvalidArgumentException('invalid length for $maintenance_notification when calling APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType., must be smaller than or equal to 12.');
        }

        $this->container['maintenance_notification'] = $maintenance_notification;

        return $this;
    }

    /**
     * Gets maint_object_loc_acct_assgmt_nmbr
     *
     * @return string|null
     */
    public function getMaintObjectLocAcctAssgmtNmbr()
    {
        return $this->container['maint_object_loc_acct_assgmt_nmbr'];
    }

    /**
     * Sets maint_object_loc_acct_assgmt_nmbr
     *
     * @param string|null $maint_object_loc_acct_assgmt_nmbr maint_object_loc_acct_assgmt_nmbr
     *
     * @return self
     */
    public function setMaintObjectLocAcctAssgmtNmbr($maint_object_loc_acct_assgmt_nmbr)
    {
        if (is_null($maint_object_loc_acct_assgmt_nmbr)) {
            throw new \InvalidArgumentException('non-nullable maint_object_loc_acct_assgmt_nmbr cannot be null');
        }
        if ((mb_strlen($maint_object_loc_acct_assgmt_nmbr) > 12)) {
            throw new \InvalidArgumentException('invalid length for $maint_object_loc_acct_assgmt_nmbr when calling APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType., must be smaller than or equal to 12.');
        }

        $this->container['maint_object_loc_acct_assgmt_nmbr'] = $maint_object_loc_acct_assgmt_nmbr;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material material
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            throw new \InvalidArgumentException('non-nullable material cannot be null');
        }
        if ((mb_strlen($material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $material when calling APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType., must be smaller than or equal to 40.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number serial_number
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        if ((mb_strlen($serial_number) > 18)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling APIOUTBOUNDDELIVERYSRVAMaintenanceItemObjectType., must be smaller than or equal to 18.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


