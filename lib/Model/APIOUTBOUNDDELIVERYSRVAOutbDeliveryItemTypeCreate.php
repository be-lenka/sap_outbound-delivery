<?php
/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_OutbDeliveryItemType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actual_delivered_qty_in_base_unit' => 'float',
        'actual_delivery_quantity' => 'float',
        'batch' => 'string',
        'delivery_document' => 'string',
        'delivery_document_item_text' => 'string',
        'delivery_quantity_unit' => 'string',
        'eu_delivery_item_arc_status' => 'string',
        'inventory_valuation_type' => 'string',
        'item_gross_weight' => 'float',
        'item_net_weight' => 'float',
        'item_volume' => 'float',
        'item_volume_unit' => 'string',
        'item_weight_unit' => 'string',
        'manufacture_date' => 'string',
        'material_by_customer' => 'string',
        'reference_sd_document' => 'string',
        'reference_sd_document_item' => 'string',
        'shelf_life_expiration_date' => 'string',
        'storage_location' => 'string',
        'to_serial_delivery_item' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryTypeCreate',
        'to_document_flow' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreateToDocumentFlow',
        'to_handling_unit_item_delivery' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreateToHandlingUnitItemDelivery',
        'to_delivery_document_item_text' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreateToDeliveryDocumentItemText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actual_delivered_qty_in_base_unit' => 'decimal',
        'actual_delivery_quantity' => 'decimal',
        'batch' => null,
        'delivery_document' => null,
        'delivery_document_item_text' => null,
        'delivery_quantity_unit' => null,
        'eu_delivery_item_arc_status' => null,
        'inventory_valuation_type' => null,
        'item_gross_weight' => 'decimal',
        'item_net_weight' => 'decimal',
        'item_volume' => 'decimal',
        'item_volume_unit' => null,
        'item_weight_unit' => null,
        'manufacture_date' => null,
        'material_by_customer' => null,
        'reference_sd_document' => null,
        'reference_sd_document_item' => null,
        'shelf_life_expiration_date' => null,
        'storage_location' => null,
        'to_serial_delivery_item' => null,
        'to_document_flow' => null,
        'to_handling_unit_item_delivery' => null,
        'to_delivery_document_item_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actual_delivered_qty_in_base_unit' => true,
		'actual_delivery_quantity' => true,
		'batch' => true,
		'delivery_document' => false,
		'delivery_document_item_text' => true,
		'delivery_quantity_unit' => true,
		'eu_delivery_item_arc_status' => true,
		'inventory_valuation_type' => true,
		'item_gross_weight' => true,
		'item_net_weight' => true,
		'item_volume' => true,
		'item_volume_unit' => true,
		'item_weight_unit' => true,
		'manufacture_date' => true,
		'material_by_customer' => true,
		'reference_sd_document' => true,
		'reference_sd_document_item' => true,
		'shelf_life_expiration_date' => true,
		'storage_location' => true,
		'to_serial_delivery_item' => true,
		'to_document_flow' => false,
		'to_handling_unit_item_delivery' => false,
		'to_delivery_document_item_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_delivered_qty_in_base_unit' => 'ActualDeliveredQtyInBaseUnit',
        'actual_delivery_quantity' => 'ActualDeliveryQuantity',
        'batch' => 'Batch',
        'delivery_document' => 'DeliveryDocument',
        'delivery_document_item_text' => 'DeliveryDocumentItemText',
        'delivery_quantity_unit' => 'DeliveryQuantityUnit',
        'eu_delivery_item_arc_status' => 'EUDeliveryItemARCStatus',
        'inventory_valuation_type' => 'InventoryValuationType',
        'item_gross_weight' => 'ItemGrossWeight',
        'item_net_weight' => 'ItemNetWeight',
        'item_volume' => 'ItemVolume',
        'item_volume_unit' => 'ItemVolumeUnit',
        'item_weight_unit' => 'ItemWeightUnit',
        'manufacture_date' => 'ManufactureDate',
        'material_by_customer' => 'MaterialByCustomer',
        'reference_sd_document' => 'ReferenceSDDocument',
        'reference_sd_document_item' => 'ReferenceSDDocumentItem',
        'shelf_life_expiration_date' => 'ShelfLifeExpirationDate',
        'storage_location' => 'StorageLocation',
        'to_serial_delivery_item' => 'to_SerialDeliveryItem',
        'to_document_flow' => 'to_DocumentFlow',
        'to_handling_unit_item_delivery' => 'to_HandlingUnitItemDelivery',
        'to_delivery_document_item_text' => 'to_DeliveryDocumentItemText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_delivered_qty_in_base_unit' => 'setActualDeliveredQtyInBaseUnit',
        'actual_delivery_quantity' => 'setActualDeliveryQuantity',
        'batch' => 'setBatch',
        'delivery_document' => 'setDeliveryDocument',
        'delivery_document_item_text' => 'setDeliveryDocumentItemText',
        'delivery_quantity_unit' => 'setDeliveryQuantityUnit',
        'eu_delivery_item_arc_status' => 'setEuDeliveryItemArcStatus',
        'inventory_valuation_type' => 'setInventoryValuationType',
        'item_gross_weight' => 'setItemGrossWeight',
        'item_net_weight' => 'setItemNetWeight',
        'item_volume' => 'setItemVolume',
        'item_volume_unit' => 'setItemVolumeUnit',
        'item_weight_unit' => 'setItemWeightUnit',
        'manufacture_date' => 'setManufactureDate',
        'material_by_customer' => 'setMaterialByCustomer',
        'reference_sd_document' => 'setReferenceSdDocument',
        'reference_sd_document_item' => 'setReferenceSdDocumentItem',
        'shelf_life_expiration_date' => 'setShelfLifeExpirationDate',
        'storage_location' => 'setStorageLocation',
        'to_serial_delivery_item' => 'setToSerialDeliveryItem',
        'to_document_flow' => 'setToDocumentFlow',
        'to_handling_unit_item_delivery' => 'setToHandlingUnitItemDelivery',
        'to_delivery_document_item_text' => 'setToDeliveryDocumentItemText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_delivered_qty_in_base_unit' => 'getActualDeliveredQtyInBaseUnit',
        'actual_delivery_quantity' => 'getActualDeliveryQuantity',
        'batch' => 'getBatch',
        'delivery_document' => 'getDeliveryDocument',
        'delivery_document_item_text' => 'getDeliveryDocumentItemText',
        'delivery_quantity_unit' => 'getDeliveryQuantityUnit',
        'eu_delivery_item_arc_status' => 'getEuDeliveryItemArcStatus',
        'inventory_valuation_type' => 'getInventoryValuationType',
        'item_gross_weight' => 'getItemGrossWeight',
        'item_net_weight' => 'getItemNetWeight',
        'item_volume' => 'getItemVolume',
        'item_volume_unit' => 'getItemVolumeUnit',
        'item_weight_unit' => 'getItemWeightUnit',
        'manufacture_date' => 'getManufactureDate',
        'material_by_customer' => 'getMaterialByCustomer',
        'reference_sd_document' => 'getReferenceSdDocument',
        'reference_sd_document_item' => 'getReferenceSdDocumentItem',
        'shelf_life_expiration_date' => 'getShelfLifeExpirationDate',
        'storage_location' => 'getStorageLocation',
        'to_serial_delivery_item' => 'getToSerialDeliveryItem',
        'to_document_flow' => 'getToDocumentFlow',
        'to_handling_unit_item_delivery' => 'getToHandlingUnitItemDelivery',
        'to_delivery_document_item_text' => 'getToDeliveryDocumentItemText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('actual_delivered_qty_in_base_unit', $data ?? [], null);
        $this->setIfExists('actual_delivery_quantity', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('delivery_document', $data ?? [], null);
        $this->setIfExists('delivery_document_item_text', $data ?? [], null);
        $this->setIfExists('delivery_quantity_unit', $data ?? [], null);
        $this->setIfExists('eu_delivery_item_arc_status', $data ?? [], null);
        $this->setIfExists('inventory_valuation_type', $data ?? [], null);
        $this->setIfExists('item_gross_weight', $data ?? [], null);
        $this->setIfExists('item_net_weight', $data ?? [], null);
        $this->setIfExists('item_volume', $data ?? [], null);
        $this->setIfExists('item_volume_unit', $data ?? [], null);
        $this->setIfExists('item_weight_unit', $data ?? [], null);
        $this->setIfExists('manufacture_date', $data ?? [], null);
        $this->setIfExists('material_by_customer', $data ?? [], null);
        $this->setIfExists('reference_sd_document', $data ?? [], null);
        $this->setIfExists('reference_sd_document_item', $data ?? [], null);
        $this->setIfExists('shelf_life_expiration_date', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('to_serial_delivery_item', $data ?? [], null);
        $this->setIfExists('to_document_flow', $data ?? [], null);
        $this->setIfExists('to_handling_unit_item_delivery', $data ?? [], null);
        $this->setIfExists('to_delivery_document_item_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['delivery_document'] === null) {
            $invalidProperties[] = "'delivery_document' can't be null";
        }
        if ((mb_strlen($this->container['delivery_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_document_item_text']) && (mb_strlen($this->container['delivery_document_item_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'delivery_document_item_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['delivery_quantity_unit']) && (mb_strlen($this->container['delivery_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'delivery_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['eu_delivery_item_arc_status']) && (mb_strlen($this->container['eu_delivery_item_arc_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'eu_delivery_item_arc_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['inventory_valuation_type']) && (mb_strlen($this->container['inventory_valuation_type']) > 10)) {
            $invalidProperties[] = "invalid value for 'inventory_valuation_type', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['item_volume_unit']) && (mb_strlen($this->container['item_volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_unit']) && (mb_strlen($this->container['item_weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['material_by_customer']) && (mb_strlen($this->container['material_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'material_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['reference_sd_document']) && (mb_strlen($this->container['reference_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document_item']) && (mb_strlen($this->container['reference_sd_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_delivered_qty_in_base_unit
     *
     * @return float|null
     */
    public function getActualDeliveredQtyInBaseUnit()
    {
        return $this->container['actual_delivered_qty_in_base_unit'];
    }

    /**
     * Sets actual_delivered_qty_in_base_unit
     *
     * @param float|null $actual_delivered_qty_in_base_unit actual_delivered_qty_in_base_unit
     *
     * @return self
     */
    public function setActualDeliveredQtyInBaseUnit($actual_delivered_qty_in_base_unit)
    {
        if (is_null($actual_delivered_qty_in_base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'actual_delivered_qty_in_base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_delivered_qty_in_base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['actual_delivered_qty_in_base_unit'] = $actual_delivered_qty_in_base_unit;

        return $this;
    }

    /**
     * Gets actual_delivery_quantity
     *
     * @return float|null
     */
    public function getActualDeliveryQuantity()
    {
        return $this->container['actual_delivery_quantity'];
    }

    /**
     * Sets actual_delivery_quantity
     *
     * @param float|null $actual_delivery_quantity actual_delivery_quantity
     *
     * @return self
     */
    public function setActualDeliveryQuantity($actual_delivery_quantity)
    {
        if (is_null($actual_delivery_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'actual_delivery_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_delivery_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['actual_delivery_quantity'] = $actual_delivery_quantity;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch batch
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch) && (mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets delivery_document
     *
     * @return string
     */
    public function getDeliveryDocument()
    {
        return $this->container['delivery_document'];
    }

    /**
     * Sets delivery_document
     *
     * @param string $delivery_document delivery_document
     *
     * @return self
     */
    public function setDeliveryDocument($delivery_document)
    {
        if (is_null($delivery_document)) {
            throw new \InvalidArgumentException('non-nullable delivery_document cannot be null');
        }
        if ((mb_strlen($delivery_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['delivery_document'] = $delivery_document;

        return $this;
    }

    /**
     * Gets delivery_document_item_text
     *
     * @return string|null
     */
    public function getDeliveryDocumentItemText()
    {
        return $this->container['delivery_document_item_text'];
    }

    /**
     * Sets delivery_document_item_text
     *
     * @param string|null $delivery_document_item_text delivery_document_item_text
     *
     * @return self
     */
    public function setDeliveryDocumentItemText($delivery_document_item_text)
    {
        if (is_null($delivery_document_item_text)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_document_item_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_document_item_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_document_item_text) && (mb_strlen($delivery_document_item_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document_item_text when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['delivery_document_item_text'] = $delivery_document_item_text;

        return $this;
    }

    /**
     * Gets delivery_quantity_unit
     *
     * @return string|null
     */
    public function getDeliveryQuantityUnit()
    {
        return $this->container['delivery_quantity_unit'];
    }

    /**
     * Sets delivery_quantity_unit
     *
     * @param string|null $delivery_quantity_unit delivery_quantity_unit
     *
     * @return self
     */
    public function setDeliveryQuantityUnit($delivery_quantity_unit)
    {
        if (is_null($delivery_quantity_unit)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_quantity_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_quantity_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_quantity_unit) && (mb_strlen($delivery_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $delivery_quantity_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['delivery_quantity_unit'] = $delivery_quantity_unit;

        return $this;
    }

    /**
     * Gets eu_delivery_item_arc_status
     *
     * @return string|null
     */
    public function getEuDeliveryItemArcStatus()
    {
        return $this->container['eu_delivery_item_arc_status'];
    }

    /**
     * Sets eu_delivery_item_arc_status
     *
     * @param string|null $eu_delivery_item_arc_status eu_delivery_item_arc_status
     *
     * @return self
     */
    public function setEuDeliveryItemArcStatus($eu_delivery_item_arc_status)
    {
        if (is_null($eu_delivery_item_arc_status)) {
            array_push($this->openAPINullablesSetToNull, 'eu_delivery_item_arc_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eu_delivery_item_arc_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($eu_delivery_item_arc_status) && (mb_strlen($eu_delivery_item_arc_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $eu_delivery_item_arc_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['eu_delivery_item_arc_status'] = $eu_delivery_item_arc_status;

        return $this;
    }

    /**
     * Gets inventory_valuation_type
     *
     * @return string|null
     */
    public function getInventoryValuationType()
    {
        return $this->container['inventory_valuation_type'];
    }

    /**
     * Sets inventory_valuation_type
     *
     * @param string|null $inventory_valuation_type inventory_valuation_type
     *
     * @return self
     */
    public function setInventoryValuationType($inventory_valuation_type)
    {
        if (is_null($inventory_valuation_type)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_valuation_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_valuation_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_valuation_type) && (mb_strlen($inventory_valuation_type) > 10)) {
            throw new \InvalidArgumentException('invalid length for $inventory_valuation_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['inventory_valuation_type'] = $inventory_valuation_type;

        return $this;
    }

    /**
     * Gets item_gross_weight
     *
     * @return float|null
     */
    public function getItemGrossWeight()
    {
        return $this->container['item_gross_weight'];
    }

    /**
     * Sets item_gross_weight
     *
     * @param float|null $item_gross_weight item_gross_weight
     *
     * @return self
     */
    public function setItemGrossWeight($item_gross_weight)
    {
        if (is_null($item_gross_weight)) {
            array_push($this->openAPINullablesSetToNull, 'item_gross_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_gross_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_gross_weight'] = $item_gross_weight;

        return $this;
    }

    /**
     * Gets item_net_weight
     *
     * @return float|null
     */
    public function getItemNetWeight()
    {
        return $this->container['item_net_weight'];
    }

    /**
     * Sets item_net_weight
     *
     * @param float|null $item_net_weight item_net_weight
     *
     * @return self
     */
    public function setItemNetWeight($item_net_weight)
    {
        if (is_null($item_net_weight)) {
            array_push($this->openAPINullablesSetToNull, 'item_net_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_net_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_net_weight'] = $item_net_weight;

        return $this;
    }

    /**
     * Gets item_volume
     *
     * @return float|null
     */
    public function getItemVolume()
    {
        return $this->container['item_volume'];
    }

    /**
     * Sets item_volume
     *
     * @param float|null $item_volume item_volume
     *
     * @return self
     */
    public function setItemVolume($item_volume)
    {
        if (is_null($item_volume)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_volume'] = $item_volume;

        return $this;
    }

    /**
     * Gets item_volume_unit
     *
     * @return string|null
     */
    public function getItemVolumeUnit()
    {
        return $this->container['item_volume_unit'];
    }

    /**
     * Sets item_volume_unit
     *
     * @param string|null $item_volume_unit item_volume_unit
     *
     * @return self
     */
    public function setItemVolumeUnit($item_volume_unit)
    {
        if (is_null($item_volume_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_volume_unit) && (mb_strlen($item_volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_unit'] = $item_volume_unit;

        return $this;
    }

    /**
     * Gets item_weight_unit
     *
     * @return string|null
     */
    public function getItemWeightUnit()
    {
        return $this->container['item_weight_unit'];
    }

    /**
     * Sets item_weight_unit
     *
     * @param string|null $item_weight_unit item_weight_unit
     *
     * @return self
     */
    public function setItemWeightUnit($item_weight_unit)
    {
        if (is_null($item_weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_weight_unit) && (mb_strlen($item_weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_unit'] = $item_weight_unit;

        return $this;
    }

    /**
     * Gets manufacture_date
     *
     * @return string|null
     */
    public function getManufactureDate()
    {
        return $this->container['manufacture_date'];
    }

    /**
     * Sets manufacture_date
     *
     * @param string|null $manufacture_date manufacture_date
     *
     * @return self
     */
    public function setManufactureDate($manufacture_date)
    {
        if (is_null($manufacture_date)) {
            array_push($this->openAPINullablesSetToNull, 'manufacture_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacture_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacture_date'] = $manufacture_date;

        return $this;
    }

    /**
     * Gets material_by_customer
     *
     * @return string|null
     */
    public function getMaterialByCustomer()
    {
        return $this->container['material_by_customer'];
    }

    /**
     * Sets material_by_customer
     *
     * @param string|null $material_by_customer material_by_customer
     *
     * @return self
     */
    public function setMaterialByCustomer($material_by_customer)
    {
        if (is_null($material_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'material_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_by_customer) && (mb_strlen($material_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $material_by_customer when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 35.');
        }

        $this->container['material_by_customer'] = $material_by_customer;

        return $this;
    }

    /**
     * Gets reference_sd_document
     *
     * @return string|null
     */
    public function getReferenceSdDocument()
    {
        return $this->container['reference_sd_document'];
    }

    /**
     * Sets reference_sd_document
     *
     * @param string|null $reference_sd_document reference_sd_document
     *
     * @return self
     */
    public function setReferenceSdDocument($reference_sd_document)
    {
        if (is_null($reference_sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document) && (mb_strlen($reference_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['reference_sd_document'] = $reference_sd_document;

        return $this;
    }

    /**
     * Gets reference_sd_document_item
     *
     * @return string|null
     */
    public function getReferenceSdDocumentItem()
    {
        return $this->container['reference_sd_document_item'];
    }

    /**
     * Sets reference_sd_document_item
     *
     * @param string|null $reference_sd_document_item reference_sd_document_item
     *
     * @return self
     */
    public function setReferenceSdDocumentItem($reference_sd_document_item)
    {
        if (is_null($reference_sd_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_item) && (mb_strlen($reference_sd_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_item when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['reference_sd_document_item'] = $reference_sd_document_item;

        return $this;
    }

    /**
     * Gets shelf_life_expiration_date
     *
     * @return string|null
     */
    public function getShelfLifeExpirationDate()
    {
        return $this->container['shelf_life_expiration_date'];
    }

    /**
     * Sets shelf_life_expiration_date
     *
     * @param string|null $shelf_life_expiration_date shelf_life_expiration_date
     *
     * @return self
     */
    public function setShelfLifeExpirationDate($shelf_life_expiration_date)
    {
        if (is_null($shelf_life_expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'shelf_life_expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shelf_life_expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shelf_life_expiration_date'] = $shelf_life_expiration_date;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            array_push($this->openAPINullablesSetToNull, 'storage_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_location) && (mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets to_serial_delivery_item
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryTypeCreate|null
     */
    public function getToSerialDeliveryItem()
    {
        return $this->container['to_serial_delivery_item'];
    }

    /**
     * Sets to_serial_delivery_item
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVASerialNmbrDeliveryTypeCreate|null $to_serial_delivery_item to_serial_delivery_item
     *
     * @return self
     */
    public function setToSerialDeliveryItem($to_serial_delivery_item)
    {
        if (is_null($to_serial_delivery_item)) {
            array_push($this->openAPINullablesSetToNull, 'to_serial_delivery_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_serial_delivery_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_serial_delivery_item'] = $to_serial_delivery_item;

        return $this;
    }

    /**
     * Gets to_document_flow
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreateToDocumentFlow|null
     */
    public function getToDocumentFlow()
    {
        return $this->container['to_document_flow'];
    }

    /**
     * Sets to_document_flow
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreateToDocumentFlow|null $to_document_flow to_document_flow
     *
     * @return self
     */
    public function setToDocumentFlow($to_document_flow)
    {
        if (is_null($to_document_flow)) {
            throw new \InvalidArgumentException('non-nullable to_document_flow cannot be null');
        }
        $this->container['to_document_flow'] = $to_document_flow;

        return $this;
    }

    /**
     * Gets to_handling_unit_item_delivery
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreateToHandlingUnitItemDelivery|null
     */
    public function getToHandlingUnitItemDelivery()
    {
        return $this->container['to_handling_unit_item_delivery'];
    }

    /**
     * Sets to_handling_unit_item_delivery
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAHandlingUnitHeaderDeliveryTypeCreateToHandlingUnitItemDelivery|null $to_handling_unit_item_delivery to_handling_unit_item_delivery
     *
     * @return self
     */
    public function setToHandlingUnitItemDelivery($to_handling_unit_item_delivery)
    {
        if (is_null($to_handling_unit_item_delivery)) {
            throw new \InvalidArgumentException('non-nullable to_handling_unit_item_delivery cannot be null');
        }
        $this->container['to_handling_unit_item_delivery'] = $to_handling_unit_item_delivery;

        return $this;
    }

    /**
     * Gets to_delivery_document_item_text
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreateToDeliveryDocumentItemText|null
     */
    public function getToDeliveryDocumentItemText()
    {
        return $this->container['to_delivery_document_item_text'];
    }

    /**
     * Sets to_delivery_document_item_text
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTypeCreateToDeliveryDocumentItemText|null $to_delivery_document_item_text to_delivery_document_item_text
     *
     * @return self
     */
    public function setToDeliveryDocumentItemText($to_delivery_document_item_text)
    {
        if (is_null($to_delivery_document_item_text)) {
            throw new \InvalidArgumentException('non-nullable to_delivery_document_item_text cannot be null');
        }
        $this->container['to_delivery_document_item_text'] = $to_delivery_document_item_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


