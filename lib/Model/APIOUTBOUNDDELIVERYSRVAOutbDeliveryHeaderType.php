<?php
/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_OutbDeliveryHeaderType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actual_delivery_route' => 'string',
        'shippinglocationtimezone' => 'string',
        'actual_goods_movement_date' => 'string',
        'receivinglocationtimezone' => 'string',
        'actual_goods_movement_time' => 'string',
        'billing_document_date' => 'string',
        'bill_of_lading' => 'string',
        'complete_delivery_is_defined' => 'bool',
        'confirmation_time' => 'string',
        'created_by_user' => 'string',
        'creation_date' => 'string',
        'creation_time' => 'string',
        'customer_group' => 'string',
        'delivery_block_reason' => 'string',
        'delivery_date' => 'string',
        'delivery_document' => 'string',
        'delivery_document_by_supplier' => 'string',
        'delivery_document_type' => 'string',
        'delivery_is_in_plant' => 'bool',
        'delivery_priority' => 'string',
        'delivery_time' => 'string',
        'delivery_version' => 'string',
        'depreciation_percentage' => 'float',
        'distr_status_by_decentralized_wrhs' => 'string',
        'document_date' => 'string',
        'external_identification_type' => 'string',
        'external_transport_system' => 'string',
        'factory_calendar_by_customer' => 'string',
        'goods_issue_or_receipt_slip_number' => 'string',
        'goods_issue_time' => 'string',
        'handling_unit_in_stock' => 'string',
        'hdr_general_incompletion_status' => 'string',
        'hdr_goods_mvt_incompletion_status' => 'string',
        'header_billg_incompletion_status' => 'string',
        'header_billing_block_reason' => 'string',
        'header_deliv_incompletion_status' => 'string',
        'header_gross_weight' => 'float',
        'header_net_weight' => 'float',
        'header_packing_incompletion_sts' => 'string',
        'header_pickg_incompletion_status' => 'string',
        'header_volume' => 'float',
        'header_volume_unit' => 'string',
        'header_weight_unit' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'intercompany_billing_date' => 'string',
        'internal_financial_document' => 'string',
        'is_delivery_for_single_warehouse' => 'string',
        'is_export_delivery' => 'string',
        'last_change_date' => 'string',
        'last_changed_by_user' => 'string',
        'loading_date' => 'string',
        'loading_point' => 'string',
        'loading_time' => 'string',
        'means_of_transport' => 'string',
        'means_of_transport_ref_material' => 'string',
        'means_of_transport_type' => 'string',
        'order_combination_is_allowed' => 'bool',
        'order_id' => 'string',
        'overall_deliv_conf_status' => 'string',
        'overall_deliv_reltd_billg_status' => 'string',
        'overall_goods_movement_status' => 'string',
        'overall_intco_billing_status' => 'string',
        'overall_packing_status' => 'string',
        'overall_picking_conf_status' => 'string',
        'overall_picking_status' => 'string',
        'overall_proof_of_delivery_status' => 'string',
        'overall_sd_process_status' => 'string',
        'overall_warehouse_activity_status' => 'string',
        'ovrl_itm_deliv_incompletion_sts' => 'string',
        'ovrl_itm_gds_mvt_incompletion_sts' => 'string',
        'ovrl_itm_general_incompletion_sts' => 'string',
        'ovrl_itm_packing_incompletion_sts' => 'string',
        'ovrl_itm_picking_incompletion_sts' => 'string',
        'payment_guarantee_procedure' => 'string',
        'picked_items_location' => 'string',
        'picking_date' => 'string',
        'picking_time' => 'string',
        'planned_goods_issue_date' => 'string',
        'proof_of_delivery_date' => 'string',
        'proposed_delivery_route' => 'string',
        'receiving_plant' => 'string',
        'route_schedule' => 'string',
        'sales_district' => 'string',
        'sales_office' => 'string',
        'sales_organization' => 'string',
        'sd_document_category' => 'string',
        'shipment_block_reason' => 'string',
        'shipping_condition' => 'string',
        'shipping_point' => 'string',
        'shipping_type' => 'string',
        'ship_to_party' => 'string',
        'sold_to_party' => 'string',
        'special_processing_code' => 'string',
        'statistics_currency' => 'string',
        'supplier' => 'string',
        'total_block_status' => 'string',
        'total_credit_check_status' => 'string',
        'total_number_of_package' => 'string',
        'transaction_currency' => 'string',
        'transportation_group' => 'string',
        'transportation_planning_date' => 'string',
        'transportation_planning_status' => 'string',
        'transportation_planning_time' => 'string',
        'unloading_point_name' => 'string',
        'warehouse' => 'string',
        'warehouse_gate' => 'string',
        'warehouse_staging_area' => 'string',
        'to_delivery_document_text' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToDeliveryDocumentText',
        'to_handling_unit_header_delivery' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToHandlingUnitHeaderDelivery',
        'to_delivery_document_partner' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToDeliveryDocumentPartner',
        'to_delivery_document_item' => '\BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToDeliveryDocumentItem'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actual_delivery_route' => null,
        'shippinglocationtimezone' => null,
        'actual_goods_movement_date' => null,
        'receivinglocationtimezone' => null,
        'actual_goods_movement_time' => null,
        'billing_document_date' => null,
        'bill_of_lading' => null,
        'complete_delivery_is_defined' => null,
        'confirmation_time' => null,
        'created_by_user' => null,
        'creation_date' => null,
        'creation_time' => null,
        'customer_group' => null,
        'delivery_block_reason' => null,
        'delivery_date' => null,
        'delivery_document' => null,
        'delivery_document_by_supplier' => null,
        'delivery_document_type' => null,
        'delivery_is_in_plant' => null,
        'delivery_priority' => null,
        'delivery_time' => null,
        'delivery_version' => null,
        'depreciation_percentage' => 'decimal',
        'distr_status_by_decentralized_wrhs' => null,
        'document_date' => null,
        'external_identification_type' => null,
        'external_transport_system' => null,
        'factory_calendar_by_customer' => null,
        'goods_issue_or_receipt_slip_number' => null,
        'goods_issue_time' => null,
        'handling_unit_in_stock' => null,
        'hdr_general_incompletion_status' => null,
        'hdr_goods_mvt_incompletion_status' => null,
        'header_billg_incompletion_status' => null,
        'header_billing_block_reason' => null,
        'header_deliv_incompletion_status' => null,
        'header_gross_weight' => 'decimal',
        'header_net_weight' => 'decimal',
        'header_packing_incompletion_sts' => null,
        'header_pickg_incompletion_status' => null,
        'header_volume' => 'decimal',
        'header_volume_unit' => null,
        'header_weight_unit' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'intercompany_billing_date' => null,
        'internal_financial_document' => null,
        'is_delivery_for_single_warehouse' => null,
        'is_export_delivery' => null,
        'last_change_date' => null,
        'last_changed_by_user' => null,
        'loading_date' => null,
        'loading_point' => null,
        'loading_time' => null,
        'means_of_transport' => null,
        'means_of_transport_ref_material' => null,
        'means_of_transport_type' => null,
        'order_combination_is_allowed' => null,
        'order_id' => null,
        'overall_deliv_conf_status' => null,
        'overall_deliv_reltd_billg_status' => null,
        'overall_goods_movement_status' => null,
        'overall_intco_billing_status' => null,
        'overall_packing_status' => null,
        'overall_picking_conf_status' => null,
        'overall_picking_status' => null,
        'overall_proof_of_delivery_status' => null,
        'overall_sd_process_status' => null,
        'overall_warehouse_activity_status' => null,
        'ovrl_itm_deliv_incompletion_sts' => null,
        'ovrl_itm_gds_mvt_incompletion_sts' => null,
        'ovrl_itm_general_incompletion_sts' => null,
        'ovrl_itm_packing_incompletion_sts' => null,
        'ovrl_itm_picking_incompletion_sts' => null,
        'payment_guarantee_procedure' => null,
        'picked_items_location' => null,
        'picking_date' => null,
        'picking_time' => null,
        'planned_goods_issue_date' => null,
        'proof_of_delivery_date' => null,
        'proposed_delivery_route' => null,
        'receiving_plant' => null,
        'route_schedule' => null,
        'sales_district' => null,
        'sales_office' => null,
        'sales_organization' => null,
        'sd_document_category' => null,
        'shipment_block_reason' => null,
        'shipping_condition' => null,
        'shipping_point' => null,
        'shipping_type' => null,
        'ship_to_party' => null,
        'sold_to_party' => null,
        'special_processing_code' => null,
        'statistics_currency' => null,
        'supplier' => null,
        'total_block_status' => null,
        'total_credit_check_status' => null,
        'total_number_of_package' => null,
        'transaction_currency' => null,
        'transportation_group' => null,
        'transportation_planning_date' => null,
        'transportation_planning_status' => null,
        'transportation_planning_time' => null,
        'unloading_point_name' => null,
        'warehouse' => null,
        'warehouse_gate' => null,
        'warehouse_staging_area' => null,
        'to_delivery_document_text' => null,
        'to_handling_unit_header_delivery' => null,
        'to_delivery_document_partner' => null,
        'to_delivery_document_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actual_delivery_route' => true,
		'shippinglocationtimezone' => false,
		'actual_goods_movement_date' => true,
		'receivinglocationtimezone' => false,
		'actual_goods_movement_time' => true,
		'billing_document_date' => true,
		'bill_of_lading' => true,
		'complete_delivery_is_defined' => true,
		'confirmation_time' => true,
		'created_by_user' => true,
		'creation_date' => true,
		'creation_time' => true,
		'customer_group' => true,
		'delivery_block_reason' => true,
		'delivery_date' => true,
		'delivery_document' => false,
		'delivery_document_by_supplier' => true,
		'delivery_document_type' => true,
		'delivery_is_in_plant' => true,
		'delivery_priority' => true,
		'delivery_time' => true,
		'delivery_version' => true,
		'depreciation_percentage' => true,
		'distr_status_by_decentralized_wrhs' => true,
		'document_date' => true,
		'external_identification_type' => true,
		'external_transport_system' => true,
		'factory_calendar_by_customer' => true,
		'goods_issue_or_receipt_slip_number' => true,
		'goods_issue_time' => true,
		'handling_unit_in_stock' => true,
		'hdr_general_incompletion_status' => true,
		'hdr_goods_mvt_incompletion_status' => true,
		'header_billg_incompletion_status' => true,
		'header_billing_block_reason' => true,
		'header_deliv_incompletion_status' => true,
		'header_gross_weight' => true,
		'header_net_weight' => true,
		'header_packing_incompletion_sts' => true,
		'header_pickg_incompletion_status' => true,
		'header_volume' => true,
		'header_volume_unit' => true,
		'header_weight_unit' => true,
		'incoterms_classification' => true,
		'incoterms_transfer_location' => true,
		'intercompany_billing_date' => true,
		'internal_financial_document' => true,
		'is_delivery_for_single_warehouse' => true,
		'is_export_delivery' => true,
		'last_change_date' => true,
		'last_changed_by_user' => true,
		'loading_date' => true,
		'loading_point' => true,
		'loading_time' => true,
		'means_of_transport' => true,
		'means_of_transport_ref_material' => true,
		'means_of_transport_type' => true,
		'order_combination_is_allowed' => true,
		'order_id' => true,
		'overall_deliv_conf_status' => true,
		'overall_deliv_reltd_billg_status' => true,
		'overall_goods_movement_status' => true,
		'overall_intco_billing_status' => true,
		'overall_packing_status' => true,
		'overall_picking_conf_status' => true,
		'overall_picking_status' => true,
		'overall_proof_of_delivery_status' => true,
		'overall_sd_process_status' => true,
		'overall_warehouse_activity_status' => true,
		'ovrl_itm_deliv_incompletion_sts' => true,
		'ovrl_itm_gds_mvt_incompletion_sts' => true,
		'ovrl_itm_general_incompletion_sts' => true,
		'ovrl_itm_packing_incompletion_sts' => true,
		'ovrl_itm_picking_incompletion_sts' => true,
		'payment_guarantee_procedure' => true,
		'picked_items_location' => true,
		'picking_date' => true,
		'picking_time' => true,
		'planned_goods_issue_date' => true,
		'proof_of_delivery_date' => true,
		'proposed_delivery_route' => true,
		'receiving_plant' => true,
		'route_schedule' => true,
		'sales_district' => true,
		'sales_office' => true,
		'sales_organization' => true,
		'sd_document_category' => true,
		'shipment_block_reason' => true,
		'shipping_condition' => true,
		'shipping_point' => true,
		'shipping_type' => true,
		'ship_to_party' => true,
		'sold_to_party' => true,
		'special_processing_code' => true,
		'statistics_currency' => true,
		'supplier' => true,
		'total_block_status' => true,
		'total_credit_check_status' => true,
		'total_number_of_package' => true,
		'transaction_currency' => true,
		'transportation_group' => true,
		'transportation_planning_date' => true,
		'transportation_planning_status' => true,
		'transportation_planning_time' => true,
		'unloading_point_name' => true,
		'warehouse' => true,
		'warehouse_gate' => true,
		'warehouse_staging_area' => true,
		'to_delivery_document_text' => false,
		'to_handling_unit_header_delivery' => false,
		'to_delivery_document_partner' => false,
		'to_delivery_document_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_delivery_route' => 'ActualDeliveryRoute',
        'shippinglocationtimezone' => 'Shippinglocationtimezone',
        'actual_goods_movement_date' => 'ActualGoodsMovementDate',
        'receivinglocationtimezone' => 'Receivinglocationtimezone',
        'actual_goods_movement_time' => 'ActualGoodsMovementTime',
        'billing_document_date' => 'BillingDocumentDate',
        'bill_of_lading' => 'BillOfLading',
        'complete_delivery_is_defined' => 'CompleteDeliveryIsDefined',
        'confirmation_time' => 'ConfirmationTime',
        'created_by_user' => 'CreatedByUser',
        'creation_date' => 'CreationDate',
        'creation_time' => 'CreationTime',
        'customer_group' => 'CustomerGroup',
        'delivery_block_reason' => 'DeliveryBlockReason',
        'delivery_date' => 'DeliveryDate',
        'delivery_document' => 'DeliveryDocument',
        'delivery_document_by_supplier' => 'DeliveryDocumentBySupplier',
        'delivery_document_type' => 'DeliveryDocumentType',
        'delivery_is_in_plant' => 'DeliveryIsInPlant',
        'delivery_priority' => 'DeliveryPriority',
        'delivery_time' => 'DeliveryTime',
        'delivery_version' => 'DeliveryVersion',
        'depreciation_percentage' => 'DepreciationPercentage',
        'distr_status_by_decentralized_wrhs' => 'DistrStatusByDecentralizedWrhs',
        'document_date' => 'DocumentDate',
        'external_identification_type' => 'ExternalIdentificationType',
        'external_transport_system' => 'ExternalTransportSystem',
        'factory_calendar_by_customer' => 'FactoryCalendarByCustomer',
        'goods_issue_or_receipt_slip_number' => 'GoodsIssueOrReceiptSlipNumber',
        'goods_issue_time' => 'GoodsIssueTime',
        'handling_unit_in_stock' => 'HandlingUnitInStock',
        'hdr_general_incompletion_status' => 'HdrGeneralIncompletionStatus',
        'hdr_goods_mvt_incompletion_status' => 'HdrGoodsMvtIncompletionStatus',
        'header_billg_incompletion_status' => 'HeaderBillgIncompletionStatus',
        'header_billing_block_reason' => 'HeaderBillingBlockReason',
        'header_deliv_incompletion_status' => 'HeaderDelivIncompletionStatus',
        'header_gross_weight' => 'HeaderGrossWeight',
        'header_net_weight' => 'HeaderNetWeight',
        'header_packing_incompletion_sts' => 'HeaderPackingIncompletionSts',
        'header_pickg_incompletion_status' => 'HeaderPickgIncompletionStatus',
        'header_volume' => 'HeaderVolume',
        'header_volume_unit' => 'HeaderVolumeUnit',
        'header_weight_unit' => 'HeaderWeightUnit',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'intercompany_billing_date' => 'IntercompanyBillingDate',
        'internal_financial_document' => 'InternalFinancialDocument',
        'is_delivery_for_single_warehouse' => 'IsDeliveryForSingleWarehouse',
        'is_export_delivery' => 'IsExportDelivery',
        'last_change_date' => 'LastChangeDate',
        'last_changed_by_user' => 'LastChangedByUser',
        'loading_date' => 'LoadingDate',
        'loading_point' => 'LoadingPoint',
        'loading_time' => 'LoadingTime',
        'means_of_transport' => 'MeansOfTransport',
        'means_of_transport_ref_material' => 'MeansOfTransportRefMaterial',
        'means_of_transport_type' => 'MeansOfTransportType',
        'order_combination_is_allowed' => 'OrderCombinationIsAllowed',
        'order_id' => 'OrderID',
        'overall_deliv_conf_status' => 'OverallDelivConfStatus',
        'overall_deliv_reltd_billg_status' => 'OverallDelivReltdBillgStatus',
        'overall_goods_movement_status' => 'OverallGoodsMovementStatus',
        'overall_intco_billing_status' => 'OverallIntcoBillingStatus',
        'overall_packing_status' => 'OverallPackingStatus',
        'overall_picking_conf_status' => 'OverallPickingConfStatus',
        'overall_picking_status' => 'OverallPickingStatus',
        'overall_proof_of_delivery_status' => 'OverallProofOfDeliveryStatus',
        'overall_sd_process_status' => 'OverallSDProcessStatus',
        'overall_warehouse_activity_status' => 'OverallWarehouseActivityStatus',
        'ovrl_itm_deliv_incompletion_sts' => 'OvrlItmDelivIncompletionSts',
        'ovrl_itm_gds_mvt_incompletion_sts' => 'OvrlItmGdsMvtIncompletionSts',
        'ovrl_itm_general_incompletion_sts' => 'OvrlItmGeneralIncompletionSts',
        'ovrl_itm_packing_incompletion_sts' => 'OvrlItmPackingIncompletionSts',
        'ovrl_itm_picking_incompletion_sts' => 'OvrlItmPickingIncompletionSts',
        'payment_guarantee_procedure' => 'PaymentGuaranteeProcedure',
        'picked_items_location' => 'PickedItemsLocation',
        'picking_date' => 'PickingDate',
        'picking_time' => 'PickingTime',
        'planned_goods_issue_date' => 'PlannedGoodsIssueDate',
        'proof_of_delivery_date' => 'ProofOfDeliveryDate',
        'proposed_delivery_route' => 'ProposedDeliveryRoute',
        'receiving_plant' => 'ReceivingPlant',
        'route_schedule' => 'RouteSchedule',
        'sales_district' => 'SalesDistrict',
        'sales_office' => 'SalesOffice',
        'sales_organization' => 'SalesOrganization',
        'sd_document_category' => 'SDDocumentCategory',
        'shipment_block_reason' => 'ShipmentBlockReason',
        'shipping_condition' => 'ShippingCondition',
        'shipping_point' => 'ShippingPoint',
        'shipping_type' => 'ShippingType',
        'ship_to_party' => 'ShipToParty',
        'sold_to_party' => 'SoldToParty',
        'special_processing_code' => 'SpecialProcessingCode',
        'statistics_currency' => 'StatisticsCurrency',
        'supplier' => 'Supplier',
        'total_block_status' => 'TotalBlockStatus',
        'total_credit_check_status' => 'TotalCreditCheckStatus',
        'total_number_of_package' => 'TotalNumberOfPackage',
        'transaction_currency' => 'TransactionCurrency',
        'transportation_group' => 'TransportationGroup',
        'transportation_planning_date' => 'TransportationPlanningDate',
        'transportation_planning_status' => 'TransportationPlanningStatus',
        'transportation_planning_time' => 'TransportationPlanningTime',
        'unloading_point_name' => 'UnloadingPointName',
        'warehouse' => 'Warehouse',
        'warehouse_gate' => 'WarehouseGate',
        'warehouse_staging_area' => 'WarehouseStagingArea',
        'to_delivery_document_text' => 'to_DeliveryDocumentText',
        'to_handling_unit_header_delivery' => 'to_HandlingUnitHeaderDelivery',
        'to_delivery_document_partner' => 'to_DeliveryDocumentPartner',
        'to_delivery_document_item' => 'to_DeliveryDocumentItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_delivery_route' => 'setActualDeliveryRoute',
        'shippinglocationtimezone' => 'setShippinglocationtimezone',
        'actual_goods_movement_date' => 'setActualGoodsMovementDate',
        'receivinglocationtimezone' => 'setReceivinglocationtimezone',
        'actual_goods_movement_time' => 'setActualGoodsMovementTime',
        'billing_document_date' => 'setBillingDocumentDate',
        'bill_of_lading' => 'setBillOfLading',
        'complete_delivery_is_defined' => 'setCompleteDeliveryIsDefined',
        'confirmation_time' => 'setConfirmationTime',
        'created_by_user' => 'setCreatedByUser',
        'creation_date' => 'setCreationDate',
        'creation_time' => 'setCreationTime',
        'customer_group' => 'setCustomerGroup',
        'delivery_block_reason' => 'setDeliveryBlockReason',
        'delivery_date' => 'setDeliveryDate',
        'delivery_document' => 'setDeliveryDocument',
        'delivery_document_by_supplier' => 'setDeliveryDocumentBySupplier',
        'delivery_document_type' => 'setDeliveryDocumentType',
        'delivery_is_in_plant' => 'setDeliveryIsInPlant',
        'delivery_priority' => 'setDeliveryPriority',
        'delivery_time' => 'setDeliveryTime',
        'delivery_version' => 'setDeliveryVersion',
        'depreciation_percentage' => 'setDepreciationPercentage',
        'distr_status_by_decentralized_wrhs' => 'setDistrStatusByDecentralizedWrhs',
        'document_date' => 'setDocumentDate',
        'external_identification_type' => 'setExternalIdentificationType',
        'external_transport_system' => 'setExternalTransportSystem',
        'factory_calendar_by_customer' => 'setFactoryCalendarByCustomer',
        'goods_issue_or_receipt_slip_number' => 'setGoodsIssueOrReceiptSlipNumber',
        'goods_issue_time' => 'setGoodsIssueTime',
        'handling_unit_in_stock' => 'setHandlingUnitInStock',
        'hdr_general_incompletion_status' => 'setHdrGeneralIncompletionStatus',
        'hdr_goods_mvt_incompletion_status' => 'setHdrGoodsMvtIncompletionStatus',
        'header_billg_incompletion_status' => 'setHeaderBillgIncompletionStatus',
        'header_billing_block_reason' => 'setHeaderBillingBlockReason',
        'header_deliv_incompletion_status' => 'setHeaderDelivIncompletionStatus',
        'header_gross_weight' => 'setHeaderGrossWeight',
        'header_net_weight' => 'setHeaderNetWeight',
        'header_packing_incompletion_sts' => 'setHeaderPackingIncompletionSts',
        'header_pickg_incompletion_status' => 'setHeaderPickgIncompletionStatus',
        'header_volume' => 'setHeaderVolume',
        'header_volume_unit' => 'setHeaderVolumeUnit',
        'header_weight_unit' => 'setHeaderWeightUnit',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'intercompany_billing_date' => 'setIntercompanyBillingDate',
        'internal_financial_document' => 'setInternalFinancialDocument',
        'is_delivery_for_single_warehouse' => 'setIsDeliveryForSingleWarehouse',
        'is_export_delivery' => 'setIsExportDelivery',
        'last_change_date' => 'setLastChangeDate',
        'last_changed_by_user' => 'setLastChangedByUser',
        'loading_date' => 'setLoadingDate',
        'loading_point' => 'setLoadingPoint',
        'loading_time' => 'setLoadingTime',
        'means_of_transport' => 'setMeansOfTransport',
        'means_of_transport_ref_material' => 'setMeansOfTransportRefMaterial',
        'means_of_transport_type' => 'setMeansOfTransportType',
        'order_combination_is_allowed' => 'setOrderCombinationIsAllowed',
        'order_id' => 'setOrderId',
        'overall_deliv_conf_status' => 'setOverallDelivConfStatus',
        'overall_deliv_reltd_billg_status' => 'setOverallDelivReltdBillgStatus',
        'overall_goods_movement_status' => 'setOverallGoodsMovementStatus',
        'overall_intco_billing_status' => 'setOverallIntcoBillingStatus',
        'overall_packing_status' => 'setOverallPackingStatus',
        'overall_picking_conf_status' => 'setOverallPickingConfStatus',
        'overall_picking_status' => 'setOverallPickingStatus',
        'overall_proof_of_delivery_status' => 'setOverallProofOfDeliveryStatus',
        'overall_sd_process_status' => 'setOverallSdProcessStatus',
        'overall_warehouse_activity_status' => 'setOverallWarehouseActivityStatus',
        'ovrl_itm_deliv_incompletion_sts' => 'setOvrlItmDelivIncompletionSts',
        'ovrl_itm_gds_mvt_incompletion_sts' => 'setOvrlItmGdsMvtIncompletionSts',
        'ovrl_itm_general_incompletion_sts' => 'setOvrlItmGeneralIncompletionSts',
        'ovrl_itm_packing_incompletion_sts' => 'setOvrlItmPackingIncompletionSts',
        'ovrl_itm_picking_incompletion_sts' => 'setOvrlItmPickingIncompletionSts',
        'payment_guarantee_procedure' => 'setPaymentGuaranteeProcedure',
        'picked_items_location' => 'setPickedItemsLocation',
        'picking_date' => 'setPickingDate',
        'picking_time' => 'setPickingTime',
        'planned_goods_issue_date' => 'setPlannedGoodsIssueDate',
        'proof_of_delivery_date' => 'setProofOfDeliveryDate',
        'proposed_delivery_route' => 'setProposedDeliveryRoute',
        'receiving_plant' => 'setReceivingPlant',
        'route_schedule' => 'setRouteSchedule',
        'sales_district' => 'setSalesDistrict',
        'sales_office' => 'setSalesOffice',
        'sales_organization' => 'setSalesOrganization',
        'sd_document_category' => 'setSdDocumentCategory',
        'shipment_block_reason' => 'setShipmentBlockReason',
        'shipping_condition' => 'setShippingCondition',
        'shipping_point' => 'setShippingPoint',
        'shipping_type' => 'setShippingType',
        'ship_to_party' => 'setShipToParty',
        'sold_to_party' => 'setSoldToParty',
        'special_processing_code' => 'setSpecialProcessingCode',
        'statistics_currency' => 'setStatisticsCurrency',
        'supplier' => 'setSupplier',
        'total_block_status' => 'setTotalBlockStatus',
        'total_credit_check_status' => 'setTotalCreditCheckStatus',
        'total_number_of_package' => 'setTotalNumberOfPackage',
        'transaction_currency' => 'setTransactionCurrency',
        'transportation_group' => 'setTransportationGroup',
        'transportation_planning_date' => 'setTransportationPlanningDate',
        'transportation_planning_status' => 'setTransportationPlanningStatus',
        'transportation_planning_time' => 'setTransportationPlanningTime',
        'unloading_point_name' => 'setUnloadingPointName',
        'warehouse' => 'setWarehouse',
        'warehouse_gate' => 'setWarehouseGate',
        'warehouse_staging_area' => 'setWarehouseStagingArea',
        'to_delivery_document_text' => 'setToDeliveryDocumentText',
        'to_handling_unit_header_delivery' => 'setToHandlingUnitHeaderDelivery',
        'to_delivery_document_partner' => 'setToDeliveryDocumentPartner',
        'to_delivery_document_item' => 'setToDeliveryDocumentItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_delivery_route' => 'getActualDeliveryRoute',
        'shippinglocationtimezone' => 'getShippinglocationtimezone',
        'actual_goods_movement_date' => 'getActualGoodsMovementDate',
        'receivinglocationtimezone' => 'getReceivinglocationtimezone',
        'actual_goods_movement_time' => 'getActualGoodsMovementTime',
        'billing_document_date' => 'getBillingDocumentDate',
        'bill_of_lading' => 'getBillOfLading',
        'complete_delivery_is_defined' => 'getCompleteDeliveryIsDefined',
        'confirmation_time' => 'getConfirmationTime',
        'created_by_user' => 'getCreatedByUser',
        'creation_date' => 'getCreationDate',
        'creation_time' => 'getCreationTime',
        'customer_group' => 'getCustomerGroup',
        'delivery_block_reason' => 'getDeliveryBlockReason',
        'delivery_date' => 'getDeliveryDate',
        'delivery_document' => 'getDeliveryDocument',
        'delivery_document_by_supplier' => 'getDeliveryDocumentBySupplier',
        'delivery_document_type' => 'getDeliveryDocumentType',
        'delivery_is_in_plant' => 'getDeliveryIsInPlant',
        'delivery_priority' => 'getDeliveryPriority',
        'delivery_time' => 'getDeliveryTime',
        'delivery_version' => 'getDeliveryVersion',
        'depreciation_percentage' => 'getDepreciationPercentage',
        'distr_status_by_decentralized_wrhs' => 'getDistrStatusByDecentralizedWrhs',
        'document_date' => 'getDocumentDate',
        'external_identification_type' => 'getExternalIdentificationType',
        'external_transport_system' => 'getExternalTransportSystem',
        'factory_calendar_by_customer' => 'getFactoryCalendarByCustomer',
        'goods_issue_or_receipt_slip_number' => 'getGoodsIssueOrReceiptSlipNumber',
        'goods_issue_time' => 'getGoodsIssueTime',
        'handling_unit_in_stock' => 'getHandlingUnitInStock',
        'hdr_general_incompletion_status' => 'getHdrGeneralIncompletionStatus',
        'hdr_goods_mvt_incompletion_status' => 'getHdrGoodsMvtIncompletionStatus',
        'header_billg_incompletion_status' => 'getHeaderBillgIncompletionStatus',
        'header_billing_block_reason' => 'getHeaderBillingBlockReason',
        'header_deliv_incompletion_status' => 'getHeaderDelivIncompletionStatus',
        'header_gross_weight' => 'getHeaderGrossWeight',
        'header_net_weight' => 'getHeaderNetWeight',
        'header_packing_incompletion_sts' => 'getHeaderPackingIncompletionSts',
        'header_pickg_incompletion_status' => 'getHeaderPickgIncompletionStatus',
        'header_volume' => 'getHeaderVolume',
        'header_volume_unit' => 'getHeaderVolumeUnit',
        'header_weight_unit' => 'getHeaderWeightUnit',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'intercompany_billing_date' => 'getIntercompanyBillingDate',
        'internal_financial_document' => 'getInternalFinancialDocument',
        'is_delivery_for_single_warehouse' => 'getIsDeliveryForSingleWarehouse',
        'is_export_delivery' => 'getIsExportDelivery',
        'last_change_date' => 'getLastChangeDate',
        'last_changed_by_user' => 'getLastChangedByUser',
        'loading_date' => 'getLoadingDate',
        'loading_point' => 'getLoadingPoint',
        'loading_time' => 'getLoadingTime',
        'means_of_transport' => 'getMeansOfTransport',
        'means_of_transport_ref_material' => 'getMeansOfTransportRefMaterial',
        'means_of_transport_type' => 'getMeansOfTransportType',
        'order_combination_is_allowed' => 'getOrderCombinationIsAllowed',
        'order_id' => 'getOrderId',
        'overall_deliv_conf_status' => 'getOverallDelivConfStatus',
        'overall_deliv_reltd_billg_status' => 'getOverallDelivReltdBillgStatus',
        'overall_goods_movement_status' => 'getOverallGoodsMovementStatus',
        'overall_intco_billing_status' => 'getOverallIntcoBillingStatus',
        'overall_packing_status' => 'getOverallPackingStatus',
        'overall_picking_conf_status' => 'getOverallPickingConfStatus',
        'overall_picking_status' => 'getOverallPickingStatus',
        'overall_proof_of_delivery_status' => 'getOverallProofOfDeliveryStatus',
        'overall_sd_process_status' => 'getOverallSdProcessStatus',
        'overall_warehouse_activity_status' => 'getOverallWarehouseActivityStatus',
        'ovrl_itm_deliv_incompletion_sts' => 'getOvrlItmDelivIncompletionSts',
        'ovrl_itm_gds_mvt_incompletion_sts' => 'getOvrlItmGdsMvtIncompletionSts',
        'ovrl_itm_general_incompletion_sts' => 'getOvrlItmGeneralIncompletionSts',
        'ovrl_itm_packing_incompletion_sts' => 'getOvrlItmPackingIncompletionSts',
        'ovrl_itm_picking_incompletion_sts' => 'getOvrlItmPickingIncompletionSts',
        'payment_guarantee_procedure' => 'getPaymentGuaranteeProcedure',
        'picked_items_location' => 'getPickedItemsLocation',
        'picking_date' => 'getPickingDate',
        'picking_time' => 'getPickingTime',
        'planned_goods_issue_date' => 'getPlannedGoodsIssueDate',
        'proof_of_delivery_date' => 'getProofOfDeliveryDate',
        'proposed_delivery_route' => 'getProposedDeliveryRoute',
        'receiving_plant' => 'getReceivingPlant',
        'route_schedule' => 'getRouteSchedule',
        'sales_district' => 'getSalesDistrict',
        'sales_office' => 'getSalesOffice',
        'sales_organization' => 'getSalesOrganization',
        'sd_document_category' => 'getSdDocumentCategory',
        'shipment_block_reason' => 'getShipmentBlockReason',
        'shipping_condition' => 'getShippingCondition',
        'shipping_point' => 'getShippingPoint',
        'shipping_type' => 'getShippingType',
        'ship_to_party' => 'getShipToParty',
        'sold_to_party' => 'getSoldToParty',
        'special_processing_code' => 'getSpecialProcessingCode',
        'statistics_currency' => 'getStatisticsCurrency',
        'supplier' => 'getSupplier',
        'total_block_status' => 'getTotalBlockStatus',
        'total_credit_check_status' => 'getTotalCreditCheckStatus',
        'total_number_of_package' => 'getTotalNumberOfPackage',
        'transaction_currency' => 'getTransactionCurrency',
        'transportation_group' => 'getTransportationGroup',
        'transportation_planning_date' => 'getTransportationPlanningDate',
        'transportation_planning_status' => 'getTransportationPlanningStatus',
        'transportation_planning_time' => 'getTransportationPlanningTime',
        'unloading_point_name' => 'getUnloadingPointName',
        'warehouse' => 'getWarehouse',
        'warehouse_gate' => 'getWarehouseGate',
        'warehouse_staging_area' => 'getWarehouseStagingArea',
        'to_delivery_document_text' => 'getToDeliveryDocumentText',
        'to_handling_unit_header_delivery' => 'getToHandlingUnitHeaderDelivery',
        'to_delivery_document_partner' => 'getToDeliveryDocumentPartner',
        'to_delivery_document_item' => 'getToDeliveryDocumentItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('actual_delivery_route', $data ?? [], null);
        $this->setIfExists('shippinglocationtimezone', $data ?? [], null);
        $this->setIfExists('actual_goods_movement_date', $data ?? [], null);
        $this->setIfExists('receivinglocationtimezone', $data ?? [], null);
        $this->setIfExists('actual_goods_movement_time', $data ?? [], null);
        $this->setIfExists('billing_document_date', $data ?? [], null);
        $this->setIfExists('bill_of_lading', $data ?? [], null);
        $this->setIfExists('complete_delivery_is_defined', $data ?? [], null);
        $this->setIfExists('confirmation_time', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('customer_group', $data ?? [], null);
        $this->setIfExists('delivery_block_reason', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('delivery_document', $data ?? [], null);
        $this->setIfExists('delivery_document_by_supplier', $data ?? [], null);
        $this->setIfExists('delivery_document_type', $data ?? [], null);
        $this->setIfExists('delivery_is_in_plant', $data ?? [], null);
        $this->setIfExists('delivery_priority', $data ?? [], null);
        $this->setIfExists('delivery_time', $data ?? [], null);
        $this->setIfExists('delivery_version', $data ?? [], null);
        $this->setIfExists('depreciation_percentage', $data ?? [], null);
        $this->setIfExists('distr_status_by_decentralized_wrhs', $data ?? [], null);
        $this->setIfExists('document_date', $data ?? [], null);
        $this->setIfExists('external_identification_type', $data ?? [], null);
        $this->setIfExists('external_transport_system', $data ?? [], null);
        $this->setIfExists('factory_calendar_by_customer', $data ?? [], null);
        $this->setIfExists('goods_issue_or_receipt_slip_number', $data ?? [], null);
        $this->setIfExists('goods_issue_time', $data ?? [], null);
        $this->setIfExists('handling_unit_in_stock', $data ?? [], null);
        $this->setIfExists('hdr_general_incompletion_status', $data ?? [], null);
        $this->setIfExists('hdr_goods_mvt_incompletion_status', $data ?? [], null);
        $this->setIfExists('header_billg_incompletion_status', $data ?? [], null);
        $this->setIfExists('header_billing_block_reason', $data ?? [], null);
        $this->setIfExists('header_deliv_incompletion_status', $data ?? [], null);
        $this->setIfExists('header_gross_weight', $data ?? [], null);
        $this->setIfExists('header_net_weight', $data ?? [], null);
        $this->setIfExists('header_packing_incompletion_sts', $data ?? [], null);
        $this->setIfExists('header_pickg_incompletion_status', $data ?? [], null);
        $this->setIfExists('header_volume', $data ?? [], null);
        $this->setIfExists('header_volume_unit', $data ?? [], null);
        $this->setIfExists('header_weight_unit', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('intercompany_billing_date', $data ?? [], null);
        $this->setIfExists('internal_financial_document', $data ?? [], null);
        $this->setIfExists('is_delivery_for_single_warehouse', $data ?? [], null);
        $this->setIfExists('is_export_delivery', $data ?? [], null);
        $this->setIfExists('last_change_date', $data ?? [], null);
        $this->setIfExists('last_changed_by_user', $data ?? [], null);
        $this->setIfExists('loading_date', $data ?? [], null);
        $this->setIfExists('loading_point', $data ?? [], null);
        $this->setIfExists('loading_time', $data ?? [], null);
        $this->setIfExists('means_of_transport', $data ?? [], null);
        $this->setIfExists('means_of_transport_ref_material', $data ?? [], null);
        $this->setIfExists('means_of_transport_type', $data ?? [], null);
        $this->setIfExists('order_combination_is_allowed', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('overall_deliv_conf_status', $data ?? [], null);
        $this->setIfExists('overall_deliv_reltd_billg_status', $data ?? [], null);
        $this->setIfExists('overall_goods_movement_status', $data ?? [], null);
        $this->setIfExists('overall_intco_billing_status', $data ?? [], null);
        $this->setIfExists('overall_packing_status', $data ?? [], null);
        $this->setIfExists('overall_picking_conf_status', $data ?? [], null);
        $this->setIfExists('overall_picking_status', $data ?? [], null);
        $this->setIfExists('overall_proof_of_delivery_status', $data ?? [], null);
        $this->setIfExists('overall_sd_process_status', $data ?? [], null);
        $this->setIfExists('overall_warehouse_activity_status', $data ?? [], null);
        $this->setIfExists('ovrl_itm_deliv_incompletion_sts', $data ?? [], null);
        $this->setIfExists('ovrl_itm_gds_mvt_incompletion_sts', $data ?? [], null);
        $this->setIfExists('ovrl_itm_general_incompletion_sts', $data ?? [], null);
        $this->setIfExists('ovrl_itm_packing_incompletion_sts', $data ?? [], null);
        $this->setIfExists('ovrl_itm_picking_incompletion_sts', $data ?? [], null);
        $this->setIfExists('payment_guarantee_procedure', $data ?? [], null);
        $this->setIfExists('picked_items_location', $data ?? [], null);
        $this->setIfExists('picking_date', $data ?? [], null);
        $this->setIfExists('picking_time', $data ?? [], null);
        $this->setIfExists('planned_goods_issue_date', $data ?? [], null);
        $this->setIfExists('proof_of_delivery_date', $data ?? [], null);
        $this->setIfExists('proposed_delivery_route', $data ?? [], null);
        $this->setIfExists('receiving_plant', $data ?? [], null);
        $this->setIfExists('route_schedule', $data ?? [], null);
        $this->setIfExists('sales_district', $data ?? [], null);
        $this->setIfExists('sales_office', $data ?? [], null);
        $this->setIfExists('sales_organization', $data ?? [], null);
        $this->setIfExists('sd_document_category', $data ?? [], null);
        $this->setIfExists('shipment_block_reason', $data ?? [], null);
        $this->setIfExists('shipping_condition', $data ?? [], null);
        $this->setIfExists('shipping_point', $data ?? [], null);
        $this->setIfExists('shipping_type', $data ?? [], null);
        $this->setIfExists('ship_to_party', $data ?? [], null);
        $this->setIfExists('sold_to_party', $data ?? [], null);
        $this->setIfExists('special_processing_code', $data ?? [], null);
        $this->setIfExists('statistics_currency', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('total_block_status', $data ?? [], null);
        $this->setIfExists('total_credit_check_status', $data ?? [], null);
        $this->setIfExists('total_number_of_package', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('transportation_group', $data ?? [], null);
        $this->setIfExists('transportation_planning_date', $data ?? [], null);
        $this->setIfExists('transportation_planning_status', $data ?? [], null);
        $this->setIfExists('transportation_planning_time', $data ?? [], null);
        $this->setIfExists('unloading_point_name', $data ?? [], null);
        $this->setIfExists('warehouse', $data ?? [], null);
        $this->setIfExists('warehouse_gate', $data ?? [], null);
        $this->setIfExists('warehouse_staging_area', $data ?? [], null);
        $this->setIfExists('to_delivery_document_text', $data ?? [], null);
        $this->setIfExists('to_handling_unit_header_delivery', $data ?? [], null);
        $this->setIfExists('to_delivery_document_partner', $data ?? [], null);
        $this->setIfExists('to_delivery_document_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['actual_delivery_route']) && (mb_strlen($this->container['actual_delivery_route']) > 6)) {
            $invalidProperties[] = "invalid value for 'actual_delivery_route', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['shippinglocationtimezone']) && (mb_strlen($this->container['shippinglocationtimezone']) > 6)) {
            $invalidProperties[] = "invalid value for 'shippinglocationtimezone', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['receivinglocationtimezone']) && (mb_strlen($this->container['receivinglocationtimezone']) > 6)) {
            $invalidProperties[] = "invalid value for 'receivinglocationtimezone', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['bill_of_lading']) && (mb_strlen($this->container['bill_of_lading']) > 35)) {
            $invalidProperties[] = "invalid value for 'bill_of_lading', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['created_by_user']) && (mb_strlen($this->container['created_by_user']) > 12)) {
            $invalidProperties[] = "invalid value for 'created_by_user', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['customer_group']) && (mb_strlen($this->container['customer_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_block_reason']) && (mb_strlen($this->container['delivery_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_document']) && (mb_strlen($this->container['delivery_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_document_by_supplier']) && (mb_strlen($this->container['delivery_document_by_supplier']) > 35)) {
            $invalidProperties[] = "invalid value for 'delivery_document_by_supplier', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['delivery_document_type']) && (mb_strlen($this->container['delivery_document_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'delivery_document_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['delivery_priority']) && (mb_strlen($this->container['delivery_priority']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_priority', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_version']) && (mb_strlen($this->container['delivery_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'delivery_version', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['distr_status_by_decentralized_wrhs']) && (mb_strlen($this->container['distr_status_by_decentralized_wrhs']) > 1)) {
            $invalidProperties[] = "invalid value for 'distr_status_by_decentralized_wrhs', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['external_identification_type']) && (mb_strlen($this->container['external_identification_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'external_identification_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['external_transport_system']) && (mb_strlen($this->container['external_transport_system']) > 5)) {
            $invalidProperties[] = "invalid value for 'external_transport_system', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['factory_calendar_by_customer']) && (mb_strlen($this->container['factory_calendar_by_customer']) > 2)) {
            $invalidProperties[] = "invalid value for 'factory_calendar_by_customer', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['goods_issue_or_receipt_slip_number']) && (mb_strlen($this->container['goods_issue_or_receipt_slip_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'goods_issue_or_receipt_slip_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['handling_unit_in_stock']) && (mb_strlen($this->container['handling_unit_in_stock']) > 1)) {
            $invalidProperties[] = "invalid value for 'handling_unit_in_stock', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['hdr_general_incompletion_status']) && (mb_strlen($this->container['hdr_general_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'hdr_general_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['hdr_goods_mvt_incompletion_status']) && (mb_strlen($this->container['hdr_goods_mvt_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'hdr_goods_mvt_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['header_billg_incompletion_status']) && (mb_strlen($this->container['header_billg_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'header_billg_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['header_billing_block_reason']) && (mb_strlen($this->container['header_billing_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'header_billing_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['header_deliv_incompletion_status']) && (mb_strlen($this->container['header_deliv_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'header_deliv_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['header_packing_incompletion_sts']) && (mb_strlen($this->container['header_packing_incompletion_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'header_packing_incompletion_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['header_pickg_incompletion_status']) && (mb_strlen($this->container['header_pickg_incompletion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'header_pickg_incompletion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['header_volume_unit']) && (mb_strlen($this->container['header_volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'header_volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['header_weight_unit']) && (mb_strlen($this->container['header_weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'header_weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['internal_financial_document']) && (mb_strlen($this->container['internal_financial_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'internal_financial_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['is_delivery_for_single_warehouse']) && (mb_strlen($this->container['is_delivery_for_single_warehouse']) > 1)) {
            $invalidProperties[] = "invalid value for 'is_delivery_for_single_warehouse', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['is_export_delivery']) && (mb_strlen($this->container['is_export_delivery']) > 1)) {
            $invalidProperties[] = "invalid value for 'is_export_delivery', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['last_changed_by_user']) && (mb_strlen($this->container['last_changed_by_user']) > 12)) {
            $invalidProperties[] = "invalid value for 'last_changed_by_user', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['loading_point']) && (mb_strlen($this->container['loading_point']) > 2)) {
            $invalidProperties[] = "invalid value for 'loading_point', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['means_of_transport']) && (mb_strlen($this->container['means_of_transport']) > 20)) {
            $invalidProperties[] = "invalid value for 'means_of_transport', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['means_of_transport_ref_material']) && (mb_strlen($this->container['means_of_transport_ref_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'means_of_transport_ref_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['means_of_transport_type']) && (mb_strlen($this->container['means_of_transport_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'means_of_transport_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) > 12)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['overall_deliv_conf_status']) && (mb_strlen($this->container['overall_deliv_conf_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_deliv_conf_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_deliv_reltd_billg_status']) && (mb_strlen($this->container['overall_deliv_reltd_billg_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_deliv_reltd_billg_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_goods_movement_status']) && (mb_strlen($this->container['overall_goods_movement_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_goods_movement_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_intco_billing_status']) && (mb_strlen($this->container['overall_intco_billing_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_intco_billing_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_packing_status']) && (mb_strlen($this->container['overall_packing_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_packing_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_picking_conf_status']) && (mb_strlen($this->container['overall_picking_conf_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_picking_conf_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_picking_status']) && (mb_strlen($this->container['overall_picking_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_picking_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_proof_of_delivery_status']) && (mb_strlen($this->container['overall_proof_of_delivery_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_proof_of_delivery_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_sd_process_status']) && (mb_strlen($this->container['overall_sd_process_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_sd_process_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_warehouse_activity_status']) && (mb_strlen($this->container['overall_warehouse_activity_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_warehouse_activity_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['ovrl_itm_deliv_incompletion_sts']) && (mb_strlen($this->container['ovrl_itm_deliv_incompletion_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'ovrl_itm_deliv_incompletion_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['ovrl_itm_gds_mvt_incompletion_sts']) && (mb_strlen($this->container['ovrl_itm_gds_mvt_incompletion_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'ovrl_itm_gds_mvt_incompletion_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['ovrl_itm_general_incompletion_sts']) && (mb_strlen($this->container['ovrl_itm_general_incompletion_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'ovrl_itm_general_incompletion_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['ovrl_itm_packing_incompletion_sts']) && (mb_strlen($this->container['ovrl_itm_packing_incompletion_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'ovrl_itm_packing_incompletion_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['ovrl_itm_picking_incompletion_sts']) && (mb_strlen($this->container['ovrl_itm_picking_incompletion_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'ovrl_itm_picking_incompletion_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['payment_guarantee_procedure']) && (mb_strlen($this->container['payment_guarantee_procedure']) > 6)) {
            $invalidProperties[] = "invalid value for 'payment_guarantee_procedure', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['picked_items_location']) && (mb_strlen($this->container['picked_items_location']) > 20)) {
            $invalidProperties[] = "invalid value for 'picked_items_location', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['proposed_delivery_route']) && (mb_strlen($this->container['proposed_delivery_route']) > 6)) {
            $invalidProperties[] = "invalid value for 'proposed_delivery_route', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['receiving_plant']) && (mb_strlen($this->container['receiving_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'receiving_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['route_schedule']) && (mb_strlen($this->container['route_schedule']) > 10)) {
            $invalidProperties[] = "invalid value for 'route_schedule', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_district']) && (mb_strlen($this->container['sales_district']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_district', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_office']) && (mb_strlen($this->container['sales_office']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_office', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_organization']) && (mb_strlen($this->container['sales_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sd_document_category']) && (mb_strlen($this->container['sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipment_block_reason']) && (mb_strlen($this->container['shipment_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipment_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipping_condition']) && (mb_strlen($this->container['shipping_condition']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_condition', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipping_point']) && (mb_strlen($this->container['shipping_point']) > 4)) {
            $invalidProperties[] = "invalid value for 'shipping_point', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipping_type']) && (mb_strlen($this->container['shipping_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ship_to_party']) && (mb_strlen($this->container['ship_to_party']) > 10)) {
            $invalidProperties[] = "invalid value for 'ship_to_party', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sold_to_party']) && (mb_strlen($this->container['sold_to_party']) > 10)) {
            $invalidProperties[] = "invalid value for 'sold_to_party', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['special_processing_code']) && (mb_strlen($this->container['special_processing_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'special_processing_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['statistics_currency']) && (mb_strlen($this->container['statistics_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'statistics_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['supplier']) && (mb_strlen($this->container['supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['total_block_status']) && (mb_strlen($this->container['total_block_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'total_block_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['total_credit_check_status']) && (mb_strlen($this->container['total_credit_check_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'total_credit_check_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['total_number_of_package']) && (mb_strlen($this->container['total_number_of_package']) > 5)) {
            $invalidProperties[] = "invalid value for 'total_number_of_package', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['transportation_group']) && (mb_strlen($this->container['transportation_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'transportation_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['transportation_planning_status']) && (mb_strlen($this->container['transportation_planning_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'transportation_planning_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['unloading_point_name']) && (mb_strlen($this->container['unloading_point_name']) > 25)) {
            $invalidProperties[] = "invalid value for 'unloading_point_name', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['warehouse']) && (mb_strlen($this->container['warehouse']) > 3)) {
            $invalidProperties[] = "invalid value for 'warehouse', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['warehouse_gate']) && (mb_strlen($this->container['warehouse_gate']) > 3)) {
            $invalidProperties[] = "invalid value for 'warehouse_gate', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['warehouse_staging_area']) && (mb_strlen($this->container['warehouse_staging_area']) > 10)) {
            $invalidProperties[] = "invalid value for 'warehouse_staging_area', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_delivery_route
     *
     * @return string|null
     */
    public function getActualDeliveryRoute()
    {
        return $this->container['actual_delivery_route'];
    }

    /**
     * Sets actual_delivery_route
     *
     * @param string|null $actual_delivery_route actual_delivery_route
     *
     * @return self
     */
    public function setActualDeliveryRoute($actual_delivery_route)
    {
        if (is_null($actual_delivery_route)) {
            array_push($this->openAPINullablesSetToNull, 'actual_delivery_route');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_delivery_route', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($actual_delivery_route) && (mb_strlen($actual_delivery_route) > 6)) {
            throw new \InvalidArgumentException('invalid length for $actual_delivery_route when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 6.');
        }

        $this->container['actual_delivery_route'] = $actual_delivery_route;

        return $this;
    }

    /**
     * Gets shippinglocationtimezone
     *
     * @return string|null
     */
    public function getShippinglocationtimezone()
    {
        return $this->container['shippinglocationtimezone'];
    }

    /**
     * Sets shippinglocationtimezone
     *
     * @param string|null $shippinglocationtimezone shippinglocationtimezone
     *
     * @return self
     */
    public function setShippinglocationtimezone($shippinglocationtimezone)
    {
        if (is_null($shippinglocationtimezone)) {
            throw new \InvalidArgumentException('non-nullable shippinglocationtimezone cannot be null');
        }
        if ((mb_strlen($shippinglocationtimezone) > 6)) {
            throw new \InvalidArgumentException('invalid length for $shippinglocationtimezone when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 6.');
        }

        $this->container['shippinglocationtimezone'] = $shippinglocationtimezone;

        return $this;
    }

    /**
     * Gets actual_goods_movement_date
     *
     * @return string|null
     */
    public function getActualGoodsMovementDate()
    {
        return $this->container['actual_goods_movement_date'];
    }

    /**
     * Sets actual_goods_movement_date
     *
     * @param string|null $actual_goods_movement_date actual_goods_movement_date
     *
     * @return self
     */
    public function setActualGoodsMovementDate($actual_goods_movement_date)
    {
        if (is_null($actual_goods_movement_date)) {
            array_push($this->openAPINullablesSetToNull, 'actual_goods_movement_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_goods_movement_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['actual_goods_movement_date'] = $actual_goods_movement_date;

        return $this;
    }

    /**
     * Gets receivinglocationtimezone
     *
     * @return string|null
     */
    public function getReceivinglocationtimezone()
    {
        return $this->container['receivinglocationtimezone'];
    }

    /**
     * Sets receivinglocationtimezone
     *
     * @param string|null $receivinglocationtimezone receivinglocationtimezone
     *
     * @return self
     */
    public function setReceivinglocationtimezone($receivinglocationtimezone)
    {
        if (is_null($receivinglocationtimezone)) {
            throw new \InvalidArgumentException('non-nullable receivinglocationtimezone cannot be null');
        }
        if ((mb_strlen($receivinglocationtimezone) > 6)) {
            throw new \InvalidArgumentException('invalid length for $receivinglocationtimezone when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 6.');
        }

        $this->container['receivinglocationtimezone'] = $receivinglocationtimezone;

        return $this;
    }

    /**
     * Gets actual_goods_movement_time
     *
     * @return string|null
     */
    public function getActualGoodsMovementTime()
    {
        return $this->container['actual_goods_movement_time'];
    }

    /**
     * Sets actual_goods_movement_time
     *
     * @param string|null $actual_goods_movement_time actual_goods_movement_time
     *
     * @return self
     */
    public function setActualGoodsMovementTime($actual_goods_movement_time)
    {
        if (is_null($actual_goods_movement_time)) {
            array_push($this->openAPINullablesSetToNull, 'actual_goods_movement_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_goods_movement_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['actual_goods_movement_time'] = $actual_goods_movement_time;

        return $this;
    }

    /**
     * Gets billing_document_date
     *
     * @return string|null
     */
    public function getBillingDocumentDate()
    {
        return $this->container['billing_document_date'];
    }

    /**
     * Sets billing_document_date
     *
     * @param string|null $billing_document_date billing_document_date
     *
     * @return self
     */
    public function setBillingDocumentDate($billing_document_date)
    {
        if (is_null($billing_document_date)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_document_date'] = $billing_document_date;

        return $this;
    }

    /**
     * Gets bill_of_lading
     *
     * @return string|null
     */
    public function getBillOfLading()
    {
        return $this->container['bill_of_lading'];
    }

    /**
     * Sets bill_of_lading
     *
     * @param string|null $bill_of_lading bill_of_lading
     *
     * @return self
     */
    public function setBillOfLading($bill_of_lading)
    {
        if (is_null($bill_of_lading)) {
            array_push($this->openAPINullablesSetToNull, 'bill_of_lading');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_of_lading', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bill_of_lading) && (mb_strlen($bill_of_lading) > 35)) {
            throw new \InvalidArgumentException('invalid length for $bill_of_lading when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 35.');
        }

        $this->container['bill_of_lading'] = $bill_of_lading;

        return $this;
    }

    /**
     * Gets complete_delivery_is_defined
     *
     * @return bool|null
     */
    public function getCompleteDeliveryIsDefined()
    {
        return $this->container['complete_delivery_is_defined'];
    }

    /**
     * Sets complete_delivery_is_defined
     *
     * @param bool|null $complete_delivery_is_defined complete_delivery_is_defined
     *
     * @return self
     */
    public function setCompleteDeliveryIsDefined($complete_delivery_is_defined)
    {
        if (is_null($complete_delivery_is_defined)) {
            array_push($this->openAPINullablesSetToNull, 'complete_delivery_is_defined');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complete_delivery_is_defined', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['complete_delivery_is_defined'] = $complete_delivery_is_defined;

        return $this;
    }

    /**
     * Gets confirmation_time
     *
     * @return string|null
     */
    public function getConfirmationTime()
    {
        return $this->container['confirmation_time'];
    }

    /**
     * Sets confirmation_time
     *
     * @param string|null $confirmation_time confirmation_time
     *
     * @return self
     */
    public function setConfirmationTime($confirmation_time)
    {
        if (is_null($confirmation_time)) {
            array_push($this->openAPINullablesSetToNull, 'confirmation_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirmation_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirmation_time'] = $confirmation_time;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user created_by_user
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($created_by_user) && (mb_strlen($created_by_user) > 12)) {
            throw new \InvalidArgumentException('invalid length for $created_by_user when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 12.');
        }

        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string|null $creation_time creation_time
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            array_push($this->openAPINullablesSetToNull, 'creation_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets customer_group
     *
     * @return string|null
     */
    public function getCustomerGroup()
    {
        return $this->container['customer_group'];
    }

    /**
     * Sets customer_group
     *
     * @param string|null $customer_group customer_group
     *
     * @return self
     */
    public function setCustomerGroup($customer_group)
    {
        if (is_null($customer_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_group) && (mb_strlen($customer_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_group when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['customer_group'] = $customer_group;

        return $this;
    }

    /**
     * Gets delivery_block_reason
     *
     * @return string|null
     */
    public function getDeliveryBlockReason()
    {
        return $this->container['delivery_block_reason'];
    }

    /**
     * Sets delivery_block_reason
     *
     * @param string|null $delivery_block_reason delivery_block_reason
     *
     * @return self
     */
    public function setDeliveryBlockReason($delivery_block_reason)
    {
        if (is_null($delivery_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_block_reason) && (mb_strlen($delivery_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_block_reason when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['delivery_block_reason'] = $delivery_block_reason;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string|null $delivery_date delivery_date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets delivery_document
     *
     * @return string|null
     */
    public function getDeliveryDocument()
    {
        return $this->container['delivery_document'];
    }

    /**
     * Sets delivery_document
     *
     * @param string|null $delivery_document delivery_document
     *
     * @return self
     */
    public function setDeliveryDocument($delivery_document)
    {
        if (is_null($delivery_document)) {
            throw new \InvalidArgumentException('non-nullable delivery_document cannot be null');
        }
        if ((mb_strlen($delivery_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 10.');
        }

        $this->container['delivery_document'] = $delivery_document;

        return $this;
    }

    /**
     * Gets delivery_document_by_supplier
     *
     * @return string|null
     */
    public function getDeliveryDocumentBySupplier()
    {
        return $this->container['delivery_document_by_supplier'];
    }

    /**
     * Sets delivery_document_by_supplier
     *
     * @param string|null $delivery_document_by_supplier delivery_document_by_supplier
     *
     * @return self
     */
    public function setDeliveryDocumentBySupplier($delivery_document_by_supplier)
    {
        if (is_null($delivery_document_by_supplier)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_document_by_supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_document_by_supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_document_by_supplier) && (mb_strlen($delivery_document_by_supplier) > 35)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document_by_supplier when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 35.');
        }

        $this->container['delivery_document_by_supplier'] = $delivery_document_by_supplier;

        return $this;
    }

    /**
     * Gets delivery_document_type
     *
     * @return string|null
     */
    public function getDeliveryDocumentType()
    {
        return $this->container['delivery_document_type'];
    }

    /**
     * Sets delivery_document_type
     *
     * @param string|null $delivery_document_type delivery_document_type
     *
     * @return self
     */
    public function setDeliveryDocumentType($delivery_document_type)
    {
        if (is_null($delivery_document_type)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_document_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_document_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_document_type) && (mb_strlen($delivery_document_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['delivery_document_type'] = $delivery_document_type;

        return $this;
    }

    /**
     * Gets delivery_is_in_plant
     *
     * @return bool|null
     */
    public function getDeliveryIsInPlant()
    {
        return $this->container['delivery_is_in_plant'];
    }

    /**
     * Sets delivery_is_in_plant
     *
     * @param bool|null $delivery_is_in_plant delivery_is_in_plant
     *
     * @return self
     */
    public function setDeliveryIsInPlant($delivery_is_in_plant)
    {
        if (is_null($delivery_is_in_plant)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_is_in_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_is_in_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_is_in_plant'] = $delivery_is_in_plant;

        return $this;
    }

    /**
     * Gets delivery_priority
     *
     * @return string|null
     */
    public function getDeliveryPriority()
    {
        return $this->container['delivery_priority'];
    }

    /**
     * Sets delivery_priority
     *
     * @param string|null $delivery_priority delivery_priority
     *
     * @return self
     */
    public function setDeliveryPriority($delivery_priority)
    {
        if (is_null($delivery_priority)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_priority) && (mb_strlen($delivery_priority) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_priority when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['delivery_priority'] = $delivery_priority;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return string|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param string|null $delivery_time delivery_time
     *
     * @return self
     */
    public function setDeliveryTime($delivery_time)
    {
        if (is_null($delivery_time)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets delivery_version
     *
     * @return string|null
     */
    public function getDeliveryVersion()
    {
        return $this->container['delivery_version'];
    }

    /**
     * Sets delivery_version
     *
     * @param string|null $delivery_version delivery_version
     *
     * @return self
     */
    public function setDeliveryVersion($delivery_version)
    {
        if (is_null($delivery_version)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_version) && (mb_strlen($delivery_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $delivery_version when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['delivery_version'] = $delivery_version;

        return $this;
    }

    /**
     * Gets depreciation_percentage
     *
     * @return float|null
     */
    public function getDepreciationPercentage()
    {
        return $this->container['depreciation_percentage'];
    }

    /**
     * Sets depreciation_percentage
     *
     * @param float|null $depreciation_percentage depreciation_percentage
     *
     * @return self
     */
    public function setDepreciationPercentage($depreciation_percentage)
    {
        if (is_null($depreciation_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'depreciation_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depreciation_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['depreciation_percentage'] = $depreciation_percentage;

        return $this;
    }

    /**
     * Gets distr_status_by_decentralized_wrhs
     *
     * @return string|null
     */
    public function getDistrStatusByDecentralizedWrhs()
    {
        return $this->container['distr_status_by_decentralized_wrhs'];
    }

    /**
     * Sets distr_status_by_decentralized_wrhs
     *
     * @param string|null $distr_status_by_decentralized_wrhs distr_status_by_decentralized_wrhs
     *
     * @return self
     */
    public function setDistrStatusByDecentralizedWrhs($distr_status_by_decentralized_wrhs)
    {
        if (is_null($distr_status_by_decentralized_wrhs)) {
            array_push($this->openAPINullablesSetToNull, 'distr_status_by_decentralized_wrhs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distr_status_by_decentralized_wrhs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($distr_status_by_decentralized_wrhs) && (mb_strlen($distr_status_by_decentralized_wrhs) > 1)) {
            throw new \InvalidArgumentException('invalid length for $distr_status_by_decentralized_wrhs when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['distr_status_by_decentralized_wrhs'] = $distr_status_by_decentralized_wrhs;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return string|null
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param string|null $document_date document_date
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {
        if (is_null($document_date)) {
            array_push($this->openAPINullablesSetToNull, 'document_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets external_identification_type
     *
     * @return string|null
     */
    public function getExternalIdentificationType()
    {
        return $this->container['external_identification_type'];
    }

    /**
     * Sets external_identification_type
     *
     * @param string|null $external_identification_type external_identification_type
     *
     * @return self
     */
    public function setExternalIdentificationType($external_identification_type)
    {
        if (is_null($external_identification_type)) {
            array_push($this->openAPINullablesSetToNull, 'external_identification_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_identification_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($external_identification_type) && (mb_strlen($external_identification_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $external_identification_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['external_identification_type'] = $external_identification_type;

        return $this;
    }

    /**
     * Gets external_transport_system
     *
     * @return string|null
     */
    public function getExternalTransportSystem()
    {
        return $this->container['external_transport_system'];
    }

    /**
     * Sets external_transport_system
     *
     * @param string|null $external_transport_system external_transport_system
     *
     * @return self
     */
    public function setExternalTransportSystem($external_transport_system)
    {
        if (is_null($external_transport_system)) {
            array_push($this->openAPINullablesSetToNull, 'external_transport_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_transport_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($external_transport_system) && (mb_strlen($external_transport_system) > 5)) {
            throw new \InvalidArgumentException('invalid length for $external_transport_system when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 5.');
        }

        $this->container['external_transport_system'] = $external_transport_system;

        return $this;
    }

    /**
     * Gets factory_calendar_by_customer
     *
     * @return string|null
     */
    public function getFactoryCalendarByCustomer()
    {
        return $this->container['factory_calendar_by_customer'];
    }

    /**
     * Sets factory_calendar_by_customer
     *
     * @param string|null $factory_calendar_by_customer factory_calendar_by_customer
     *
     * @return self
     */
    public function setFactoryCalendarByCustomer($factory_calendar_by_customer)
    {
        if (is_null($factory_calendar_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'factory_calendar_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('factory_calendar_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($factory_calendar_by_customer) && (mb_strlen($factory_calendar_by_customer) > 2)) {
            throw new \InvalidArgumentException('invalid length for $factory_calendar_by_customer when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['factory_calendar_by_customer'] = $factory_calendar_by_customer;

        return $this;
    }

    /**
     * Gets goods_issue_or_receipt_slip_number
     *
     * @return string|null
     */
    public function getGoodsIssueOrReceiptSlipNumber()
    {
        return $this->container['goods_issue_or_receipt_slip_number'];
    }

    /**
     * Sets goods_issue_or_receipt_slip_number
     *
     * @param string|null $goods_issue_or_receipt_slip_number goods_issue_or_receipt_slip_number
     *
     * @return self
     */
    public function setGoodsIssueOrReceiptSlipNumber($goods_issue_or_receipt_slip_number)
    {
        if (is_null($goods_issue_or_receipt_slip_number)) {
            array_push($this->openAPINullablesSetToNull, 'goods_issue_or_receipt_slip_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_issue_or_receipt_slip_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($goods_issue_or_receipt_slip_number) && (mb_strlen($goods_issue_or_receipt_slip_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $goods_issue_or_receipt_slip_number when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 10.');
        }

        $this->container['goods_issue_or_receipt_slip_number'] = $goods_issue_or_receipt_slip_number;

        return $this;
    }

    /**
     * Gets goods_issue_time
     *
     * @return string|null
     */
    public function getGoodsIssueTime()
    {
        return $this->container['goods_issue_time'];
    }

    /**
     * Sets goods_issue_time
     *
     * @param string|null $goods_issue_time goods_issue_time
     *
     * @return self
     */
    public function setGoodsIssueTime($goods_issue_time)
    {
        if (is_null($goods_issue_time)) {
            array_push($this->openAPINullablesSetToNull, 'goods_issue_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_issue_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['goods_issue_time'] = $goods_issue_time;

        return $this;
    }

    /**
     * Gets handling_unit_in_stock
     *
     * @return string|null
     */
    public function getHandlingUnitInStock()
    {
        return $this->container['handling_unit_in_stock'];
    }

    /**
     * Sets handling_unit_in_stock
     *
     * @param string|null $handling_unit_in_stock handling_unit_in_stock
     *
     * @return self
     */
    public function setHandlingUnitInStock($handling_unit_in_stock)
    {
        if (is_null($handling_unit_in_stock)) {
            array_push($this->openAPINullablesSetToNull, 'handling_unit_in_stock');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('handling_unit_in_stock', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($handling_unit_in_stock) && (mb_strlen($handling_unit_in_stock) > 1)) {
            throw new \InvalidArgumentException('invalid length for $handling_unit_in_stock when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['handling_unit_in_stock'] = $handling_unit_in_stock;

        return $this;
    }

    /**
     * Gets hdr_general_incompletion_status
     *
     * @return string|null
     */
    public function getHdrGeneralIncompletionStatus()
    {
        return $this->container['hdr_general_incompletion_status'];
    }

    /**
     * Sets hdr_general_incompletion_status
     *
     * @param string|null $hdr_general_incompletion_status hdr_general_incompletion_status
     *
     * @return self
     */
    public function setHdrGeneralIncompletionStatus($hdr_general_incompletion_status)
    {
        if (is_null($hdr_general_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'hdr_general_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hdr_general_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hdr_general_incompletion_status) && (mb_strlen($hdr_general_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $hdr_general_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['hdr_general_incompletion_status'] = $hdr_general_incompletion_status;

        return $this;
    }

    /**
     * Gets hdr_goods_mvt_incompletion_status
     *
     * @return string|null
     */
    public function getHdrGoodsMvtIncompletionStatus()
    {
        return $this->container['hdr_goods_mvt_incompletion_status'];
    }

    /**
     * Sets hdr_goods_mvt_incompletion_status
     *
     * @param string|null $hdr_goods_mvt_incompletion_status hdr_goods_mvt_incompletion_status
     *
     * @return self
     */
    public function setHdrGoodsMvtIncompletionStatus($hdr_goods_mvt_incompletion_status)
    {
        if (is_null($hdr_goods_mvt_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'hdr_goods_mvt_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hdr_goods_mvt_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hdr_goods_mvt_incompletion_status) && (mb_strlen($hdr_goods_mvt_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $hdr_goods_mvt_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['hdr_goods_mvt_incompletion_status'] = $hdr_goods_mvt_incompletion_status;

        return $this;
    }

    /**
     * Gets header_billg_incompletion_status
     *
     * @return string|null
     */
    public function getHeaderBillgIncompletionStatus()
    {
        return $this->container['header_billg_incompletion_status'];
    }

    /**
     * Sets header_billg_incompletion_status
     *
     * @param string|null $header_billg_incompletion_status header_billg_incompletion_status
     *
     * @return self
     */
    public function setHeaderBillgIncompletionStatus($header_billg_incompletion_status)
    {
        if (is_null($header_billg_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'header_billg_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_billg_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_billg_incompletion_status) && (mb_strlen($header_billg_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $header_billg_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['header_billg_incompletion_status'] = $header_billg_incompletion_status;

        return $this;
    }

    /**
     * Gets header_billing_block_reason
     *
     * @return string|null
     */
    public function getHeaderBillingBlockReason()
    {
        return $this->container['header_billing_block_reason'];
    }

    /**
     * Sets header_billing_block_reason
     *
     * @param string|null $header_billing_block_reason header_billing_block_reason
     *
     * @return self
     */
    public function setHeaderBillingBlockReason($header_billing_block_reason)
    {
        if (is_null($header_billing_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'header_billing_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_billing_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_billing_block_reason) && (mb_strlen($header_billing_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $header_billing_block_reason when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['header_billing_block_reason'] = $header_billing_block_reason;

        return $this;
    }

    /**
     * Gets header_deliv_incompletion_status
     *
     * @return string|null
     */
    public function getHeaderDelivIncompletionStatus()
    {
        return $this->container['header_deliv_incompletion_status'];
    }

    /**
     * Sets header_deliv_incompletion_status
     *
     * @param string|null $header_deliv_incompletion_status header_deliv_incompletion_status
     *
     * @return self
     */
    public function setHeaderDelivIncompletionStatus($header_deliv_incompletion_status)
    {
        if (is_null($header_deliv_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'header_deliv_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_deliv_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_deliv_incompletion_status) && (mb_strlen($header_deliv_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $header_deliv_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['header_deliv_incompletion_status'] = $header_deliv_incompletion_status;

        return $this;
    }

    /**
     * Gets header_gross_weight
     *
     * @return float|null
     */
    public function getHeaderGrossWeight()
    {
        return $this->container['header_gross_weight'];
    }

    /**
     * Sets header_gross_weight
     *
     * @param float|null $header_gross_weight header_gross_weight
     *
     * @return self
     */
    public function setHeaderGrossWeight($header_gross_weight)
    {
        if (is_null($header_gross_weight)) {
            array_push($this->openAPINullablesSetToNull, 'header_gross_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_gross_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['header_gross_weight'] = $header_gross_weight;

        return $this;
    }

    /**
     * Gets header_net_weight
     *
     * @return float|null
     */
    public function getHeaderNetWeight()
    {
        return $this->container['header_net_weight'];
    }

    /**
     * Sets header_net_weight
     *
     * @param float|null $header_net_weight header_net_weight
     *
     * @return self
     */
    public function setHeaderNetWeight($header_net_weight)
    {
        if (is_null($header_net_weight)) {
            array_push($this->openAPINullablesSetToNull, 'header_net_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_net_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['header_net_weight'] = $header_net_weight;

        return $this;
    }

    /**
     * Gets header_packing_incompletion_sts
     *
     * @return string|null
     */
    public function getHeaderPackingIncompletionSts()
    {
        return $this->container['header_packing_incompletion_sts'];
    }

    /**
     * Sets header_packing_incompletion_sts
     *
     * @param string|null $header_packing_incompletion_sts header_packing_incompletion_sts
     *
     * @return self
     */
    public function setHeaderPackingIncompletionSts($header_packing_incompletion_sts)
    {
        if (is_null($header_packing_incompletion_sts)) {
            array_push($this->openAPINullablesSetToNull, 'header_packing_incompletion_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_packing_incompletion_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_packing_incompletion_sts) && (mb_strlen($header_packing_incompletion_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $header_packing_incompletion_sts when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['header_packing_incompletion_sts'] = $header_packing_incompletion_sts;

        return $this;
    }

    /**
     * Gets header_pickg_incompletion_status
     *
     * @return string|null
     */
    public function getHeaderPickgIncompletionStatus()
    {
        return $this->container['header_pickg_incompletion_status'];
    }

    /**
     * Sets header_pickg_incompletion_status
     *
     * @param string|null $header_pickg_incompletion_status header_pickg_incompletion_status
     *
     * @return self
     */
    public function setHeaderPickgIncompletionStatus($header_pickg_incompletion_status)
    {
        if (is_null($header_pickg_incompletion_status)) {
            array_push($this->openAPINullablesSetToNull, 'header_pickg_incompletion_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_pickg_incompletion_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_pickg_incompletion_status) && (mb_strlen($header_pickg_incompletion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $header_pickg_incompletion_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['header_pickg_incompletion_status'] = $header_pickg_incompletion_status;

        return $this;
    }

    /**
     * Gets header_volume
     *
     * @return float|null
     */
    public function getHeaderVolume()
    {
        return $this->container['header_volume'];
    }

    /**
     * Sets header_volume
     *
     * @param float|null $header_volume header_volume
     *
     * @return self
     */
    public function setHeaderVolume($header_volume)
    {
        if (is_null($header_volume)) {
            array_push($this->openAPINullablesSetToNull, 'header_volume');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_volume', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['header_volume'] = $header_volume;

        return $this;
    }

    /**
     * Gets header_volume_unit
     *
     * @return string|null
     */
    public function getHeaderVolumeUnit()
    {
        return $this->container['header_volume_unit'];
    }

    /**
     * Sets header_volume_unit
     *
     * @param string|null $header_volume_unit header_volume_unit
     *
     * @return self
     */
    public function setHeaderVolumeUnit($header_volume_unit)
    {
        if (is_null($header_volume_unit)) {
            array_push($this->openAPINullablesSetToNull, 'header_volume_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_volume_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_volume_unit) && (mb_strlen($header_volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $header_volume_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 3.');
        }

        $this->container['header_volume_unit'] = $header_volume_unit;

        return $this;
    }

    /**
     * Gets header_weight_unit
     *
     * @return string|null
     */
    public function getHeaderWeightUnit()
    {
        return $this->container['header_weight_unit'];
    }

    /**
     * Sets header_weight_unit
     *
     * @param string|null $header_weight_unit header_weight_unit
     *
     * @return self
     */
    public function setHeaderWeightUnit($header_weight_unit)
    {
        if (is_null($header_weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'header_weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_weight_unit) && (mb_strlen($header_weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $header_weight_unit when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 3.');
        }

        $this->container['header_weight_unit'] = $header_weight_unit;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification incoterms_classification
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets intercompany_billing_date
     *
     * @return string|null
     */
    public function getIntercompanyBillingDate()
    {
        return $this->container['intercompany_billing_date'];
    }

    /**
     * Sets intercompany_billing_date
     *
     * @param string|null $intercompany_billing_date intercompany_billing_date
     *
     * @return self
     */
    public function setIntercompanyBillingDate($intercompany_billing_date)
    {
        if (is_null($intercompany_billing_date)) {
            array_push($this->openAPINullablesSetToNull, 'intercompany_billing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intercompany_billing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intercompany_billing_date'] = $intercompany_billing_date;

        return $this;
    }

    /**
     * Gets internal_financial_document
     *
     * @return string|null
     */
    public function getInternalFinancialDocument()
    {
        return $this->container['internal_financial_document'];
    }

    /**
     * Sets internal_financial_document
     *
     * @param string|null $internal_financial_document internal_financial_document
     *
     * @return self
     */
    public function setInternalFinancialDocument($internal_financial_document)
    {
        if (is_null($internal_financial_document)) {
            array_push($this->openAPINullablesSetToNull, 'internal_financial_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_financial_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($internal_financial_document) && (mb_strlen($internal_financial_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $internal_financial_document when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 10.');
        }

        $this->container['internal_financial_document'] = $internal_financial_document;

        return $this;
    }

    /**
     * Gets is_delivery_for_single_warehouse
     *
     * @return string|null
     */
    public function getIsDeliveryForSingleWarehouse()
    {
        return $this->container['is_delivery_for_single_warehouse'];
    }

    /**
     * Sets is_delivery_for_single_warehouse
     *
     * @param string|null $is_delivery_for_single_warehouse is_delivery_for_single_warehouse
     *
     * @return self
     */
    public function setIsDeliveryForSingleWarehouse($is_delivery_for_single_warehouse)
    {
        if (is_null($is_delivery_for_single_warehouse)) {
            array_push($this->openAPINullablesSetToNull, 'is_delivery_for_single_warehouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_delivery_for_single_warehouse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($is_delivery_for_single_warehouse) && (mb_strlen($is_delivery_for_single_warehouse) > 1)) {
            throw new \InvalidArgumentException('invalid length for $is_delivery_for_single_warehouse when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['is_delivery_for_single_warehouse'] = $is_delivery_for_single_warehouse;

        return $this;
    }

    /**
     * Gets is_export_delivery
     *
     * @return string|null
     */
    public function getIsExportDelivery()
    {
        return $this->container['is_export_delivery'];
    }

    /**
     * Sets is_export_delivery
     *
     * @param string|null $is_export_delivery is_export_delivery
     *
     * @return self
     */
    public function setIsExportDelivery($is_export_delivery)
    {
        if (is_null($is_export_delivery)) {
            array_push($this->openAPINullablesSetToNull, 'is_export_delivery');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_export_delivery', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($is_export_delivery) && (mb_strlen($is_export_delivery) > 1)) {
            throw new \InvalidArgumentException('invalid length for $is_export_delivery when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['is_export_delivery'] = $is_export_delivery;

        return $this;
    }

    /**
     * Gets last_change_date
     *
     * @return string|null
     */
    public function getLastChangeDate()
    {
        return $this->container['last_change_date'];
    }

    /**
     * Sets last_change_date
     *
     * @param string|null $last_change_date last_change_date
     *
     * @return self
     */
    public function setLastChangeDate($last_change_date)
    {
        if (is_null($last_change_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_change_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_change_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_change_date'] = $last_change_date;

        return $this;
    }

    /**
     * Gets last_changed_by_user
     *
     * @return string|null
     */
    public function getLastChangedByUser()
    {
        return $this->container['last_changed_by_user'];
    }

    /**
     * Sets last_changed_by_user
     *
     * @param string|null $last_changed_by_user last_changed_by_user
     *
     * @return self
     */
    public function setLastChangedByUser($last_changed_by_user)
    {
        if (is_null($last_changed_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'last_changed_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_changed_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($last_changed_by_user) && (mb_strlen($last_changed_by_user) > 12)) {
            throw new \InvalidArgumentException('invalid length for $last_changed_by_user when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 12.');
        }

        $this->container['last_changed_by_user'] = $last_changed_by_user;

        return $this;
    }

    /**
     * Gets loading_date
     *
     * @return string|null
     */
    public function getLoadingDate()
    {
        return $this->container['loading_date'];
    }

    /**
     * Sets loading_date
     *
     * @param string|null $loading_date loading_date
     *
     * @return self
     */
    public function setLoadingDate($loading_date)
    {
        if (is_null($loading_date)) {
            array_push($this->openAPINullablesSetToNull, 'loading_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loading_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loading_date'] = $loading_date;

        return $this;
    }

    /**
     * Gets loading_point
     *
     * @return string|null
     */
    public function getLoadingPoint()
    {
        return $this->container['loading_point'];
    }

    /**
     * Sets loading_point
     *
     * @param string|null $loading_point loading_point
     *
     * @return self
     */
    public function setLoadingPoint($loading_point)
    {
        if (is_null($loading_point)) {
            array_push($this->openAPINullablesSetToNull, 'loading_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loading_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($loading_point) && (mb_strlen($loading_point) > 2)) {
            throw new \InvalidArgumentException('invalid length for $loading_point when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['loading_point'] = $loading_point;

        return $this;
    }

    /**
     * Gets loading_time
     *
     * @return string|null
     */
    public function getLoadingTime()
    {
        return $this->container['loading_time'];
    }

    /**
     * Sets loading_time
     *
     * @param string|null $loading_time loading_time
     *
     * @return self
     */
    public function setLoadingTime($loading_time)
    {
        if (is_null($loading_time)) {
            array_push($this->openAPINullablesSetToNull, 'loading_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loading_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loading_time'] = $loading_time;

        return $this;
    }

    /**
     * Gets means_of_transport
     *
     * @return string|null
     */
    public function getMeansOfTransport()
    {
        return $this->container['means_of_transport'];
    }

    /**
     * Sets means_of_transport
     *
     * @param string|null $means_of_transport means_of_transport
     *
     * @return self
     */
    public function setMeansOfTransport($means_of_transport)
    {
        if (is_null($means_of_transport)) {
            array_push($this->openAPINullablesSetToNull, 'means_of_transport');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('means_of_transport', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($means_of_transport) && (mb_strlen($means_of_transport) > 20)) {
            throw new \InvalidArgumentException('invalid length for $means_of_transport when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 20.');
        }

        $this->container['means_of_transport'] = $means_of_transport;

        return $this;
    }

    /**
     * Gets means_of_transport_ref_material
     *
     * @return string|null
     */
    public function getMeansOfTransportRefMaterial()
    {
        return $this->container['means_of_transport_ref_material'];
    }

    /**
     * Sets means_of_transport_ref_material
     *
     * @param string|null $means_of_transport_ref_material means_of_transport_ref_material
     *
     * @return self
     */
    public function setMeansOfTransportRefMaterial($means_of_transport_ref_material)
    {
        if (is_null($means_of_transport_ref_material)) {
            array_push($this->openAPINullablesSetToNull, 'means_of_transport_ref_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('means_of_transport_ref_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($means_of_transport_ref_material) && (mb_strlen($means_of_transport_ref_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $means_of_transport_ref_material when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 40.');
        }

        $this->container['means_of_transport_ref_material'] = $means_of_transport_ref_material;

        return $this;
    }

    /**
     * Gets means_of_transport_type
     *
     * @return string|null
     */
    public function getMeansOfTransportType()
    {
        return $this->container['means_of_transport_type'];
    }

    /**
     * Sets means_of_transport_type
     *
     * @param string|null $means_of_transport_type means_of_transport_type
     *
     * @return self
     */
    public function setMeansOfTransportType($means_of_transport_type)
    {
        if (is_null($means_of_transport_type)) {
            array_push($this->openAPINullablesSetToNull, 'means_of_transport_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('means_of_transport_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($means_of_transport_type) && (mb_strlen($means_of_transport_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $means_of_transport_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['means_of_transport_type'] = $means_of_transport_type;

        return $this;
    }

    /**
     * Gets order_combination_is_allowed
     *
     * @return bool|null
     */
    public function getOrderCombinationIsAllowed()
    {
        return $this->container['order_combination_is_allowed'];
    }

    /**
     * Sets order_combination_is_allowed
     *
     * @param bool|null $order_combination_is_allowed order_combination_is_allowed
     *
     * @return self
     */
    public function setOrderCombinationIsAllowed($order_combination_is_allowed)
    {
        if (is_null($order_combination_is_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'order_combination_is_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_combination_is_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_combination_is_allowed'] = $order_combination_is_allowed;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_id) && (mb_strlen($order_id) > 12)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 12.');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets overall_deliv_conf_status
     *
     * @return string|null
     */
    public function getOverallDelivConfStatus()
    {
        return $this->container['overall_deliv_conf_status'];
    }

    /**
     * Sets overall_deliv_conf_status
     *
     * @param string|null $overall_deliv_conf_status overall_deliv_conf_status
     *
     * @return self
     */
    public function setOverallDelivConfStatus($overall_deliv_conf_status)
    {
        if (is_null($overall_deliv_conf_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_deliv_conf_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_deliv_conf_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_deliv_conf_status) && (mb_strlen($overall_deliv_conf_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_deliv_conf_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_deliv_conf_status'] = $overall_deliv_conf_status;

        return $this;
    }

    /**
     * Gets overall_deliv_reltd_billg_status
     *
     * @return string|null
     */
    public function getOverallDelivReltdBillgStatus()
    {
        return $this->container['overall_deliv_reltd_billg_status'];
    }

    /**
     * Sets overall_deliv_reltd_billg_status
     *
     * @param string|null $overall_deliv_reltd_billg_status overall_deliv_reltd_billg_status
     *
     * @return self
     */
    public function setOverallDelivReltdBillgStatus($overall_deliv_reltd_billg_status)
    {
        if (is_null($overall_deliv_reltd_billg_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_deliv_reltd_billg_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_deliv_reltd_billg_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_deliv_reltd_billg_status) && (mb_strlen($overall_deliv_reltd_billg_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_deliv_reltd_billg_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_deliv_reltd_billg_status'] = $overall_deliv_reltd_billg_status;

        return $this;
    }

    /**
     * Gets overall_goods_movement_status
     *
     * @return string|null
     */
    public function getOverallGoodsMovementStatus()
    {
        return $this->container['overall_goods_movement_status'];
    }

    /**
     * Sets overall_goods_movement_status
     *
     * @param string|null $overall_goods_movement_status overall_goods_movement_status
     *
     * @return self
     */
    public function setOverallGoodsMovementStatus($overall_goods_movement_status)
    {
        if (is_null($overall_goods_movement_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_goods_movement_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_goods_movement_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_goods_movement_status) && (mb_strlen($overall_goods_movement_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_goods_movement_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_goods_movement_status'] = $overall_goods_movement_status;

        return $this;
    }

    /**
     * Gets overall_intco_billing_status
     *
     * @return string|null
     */
    public function getOverallIntcoBillingStatus()
    {
        return $this->container['overall_intco_billing_status'];
    }

    /**
     * Sets overall_intco_billing_status
     *
     * @param string|null $overall_intco_billing_status overall_intco_billing_status
     *
     * @return self
     */
    public function setOverallIntcoBillingStatus($overall_intco_billing_status)
    {
        if (is_null($overall_intco_billing_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_intco_billing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_intco_billing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_intco_billing_status) && (mb_strlen($overall_intco_billing_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_intco_billing_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_intco_billing_status'] = $overall_intco_billing_status;

        return $this;
    }

    /**
     * Gets overall_packing_status
     *
     * @return string|null
     */
    public function getOverallPackingStatus()
    {
        return $this->container['overall_packing_status'];
    }

    /**
     * Sets overall_packing_status
     *
     * @param string|null $overall_packing_status overall_packing_status
     *
     * @return self
     */
    public function setOverallPackingStatus($overall_packing_status)
    {
        if (is_null($overall_packing_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_packing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_packing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_packing_status) && (mb_strlen($overall_packing_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_packing_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_packing_status'] = $overall_packing_status;

        return $this;
    }

    /**
     * Gets overall_picking_conf_status
     *
     * @return string|null
     */
    public function getOverallPickingConfStatus()
    {
        return $this->container['overall_picking_conf_status'];
    }

    /**
     * Sets overall_picking_conf_status
     *
     * @param string|null $overall_picking_conf_status overall_picking_conf_status
     *
     * @return self
     */
    public function setOverallPickingConfStatus($overall_picking_conf_status)
    {
        if (is_null($overall_picking_conf_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_picking_conf_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_picking_conf_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_picking_conf_status) && (mb_strlen($overall_picking_conf_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_picking_conf_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_picking_conf_status'] = $overall_picking_conf_status;

        return $this;
    }

    /**
     * Gets overall_picking_status
     *
     * @return string|null
     */
    public function getOverallPickingStatus()
    {
        return $this->container['overall_picking_status'];
    }

    /**
     * Sets overall_picking_status
     *
     * @param string|null $overall_picking_status overall_picking_status
     *
     * @return self
     */
    public function setOverallPickingStatus($overall_picking_status)
    {
        if (is_null($overall_picking_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_picking_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_picking_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_picking_status) && (mb_strlen($overall_picking_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_picking_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_picking_status'] = $overall_picking_status;

        return $this;
    }

    /**
     * Gets overall_proof_of_delivery_status
     *
     * @return string|null
     */
    public function getOverallProofOfDeliveryStatus()
    {
        return $this->container['overall_proof_of_delivery_status'];
    }

    /**
     * Sets overall_proof_of_delivery_status
     *
     * @param string|null $overall_proof_of_delivery_status overall_proof_of_delivery_status
     *
     * @return self
     */
    public function setOverallProofOfDeliveryStatus($overall_proof_of_delivery_status)
    {
        if (is_null($overall_proof_of_delivery_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_proof_of_delivery_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_proof_of_delivery_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_proof_of_delivery_status) && (mb_strlen($overall_proof_of_delivery_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_proof_of_delivery_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_proof_of_delivery_status'] = $overall_proof_of_delivery_status;

        return $this;
    }

    /**
     * Gets overall_sd_process_status
     *
     * @return string|null
     */
    public function getOverallSdProcessStatus()
    {
        return $this->container['overall_sd_process_status'];
    }

    /**
     * Sets overall_sd_process_status
     *
     * @param string|null $overall_sd_process_status overall_sd_process_status
     *
     * @return self
     */
    public function setOverallSdProcessStatus($overall_sd_process_status)
    {
        if (is_null($overall_sd_process_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_sd_process_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_sd_process_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_sd_process_status) && (mb_strlen($overall_sd_process_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_sd_process_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_sd_process_status'] = $overall_sd_process_status;

        return $this;
    }

    /**
     * Gets overall_warehouse_activity_status
     *
     * @return string|null
     */
    public function getOverallWarehouseActivityStatus()
    {
        return $this->container['overall_warehouse_activity_status'];
    }

    /**
     * Sets overall_warehouse_activity_status
     *
     * @param string|null $overall_warehouse_activity_status overall_warehouse_activity_status
     *
     * @return self
     */
    public function setOverallWarehouseActivityStatus($overall_warehouse_activity_status)
    {
        if (is_null($overall_warehouse_activity_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_warehouse_activity_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_warehouse_activity_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_warehouse_activity_status) && (mb_strlen($overall_warehouse_activity_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_warehouse_activity_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_warehouse_activity_status'] = $overall_warehouse_activity_status;

        return $this;
    }

    /**
     * Gets ovrl_itm_deliv_incompletion_sts
     *
     * @return string|null
     */
    public function getOvrlItmDelivIncompletionSts()
    {
        return $this->container['ovrl_itm_deliv_incompletion_sts'];
    }

    /**
     * Sets ovrl_itm_deliv_incompletion_sts
     *
     * @param string|null $ovrl_itm_deliv_incompletion_sts ovrl_itm_deliv_incompletion_sts
     *
     * @return self
     */
    public function setOvrlItmDelivIncompletionSts($ovrl_itm_deliv_incompletion_sts)
    {
        if (is_null($ovrl_itm_deliv_incompletion_sts)) {
            array_push($this->openAPINullablesSetToNull, 'ovrl_itm_deliv_incompletion_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ovrl_itm_deliv_incompletion_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ovrl_itm_deliv_incompletion_sts) && (mb_strlen($ovrl_itm_deliv_incompletion_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $ovrl_itm_deliv_incompletion_sts when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['ovrl_itm_deliv_incompletion_sts'] = $ovrl_itm_deliv_incompletion_sts;

        return $this;
    }

    /**
     * Gets ovrl_itm_gds_mvt_incompletion_sts
     *
     * @return string|null
     */
    public function getOvrlItmGdsMvtIncompletionSts()
    {
        return $this->container['ovrl_itm_gds_mvt_incompletion_sts'];
    }

    /**
     * Sets ovrl_itm_gds_mvt_incompletion_sts
     *
     * @param string|null $ovrl_itm_gds_mvt_incompletion_sts ovrl_itm_gds_mvt_incompletion_sts
     *
     * @return self
     */
    public function setOvrlItmGdsMvtIncompletionSts($ovrl_itm_gds_mvt_incompletion_sts)
    {
        if (is_null($ovrl_itm_gds_mvt_incompletion_sts)) {
            array_push($this->openAPINullablesSetToNull, 'ovrl_itm_gds_mvt_incompletion_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ovrl_itm_gds_mvt_incompletion_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ovrl_itm_gds_mvt_incompletion_sts) && (mb_strlen($ovrl_itm_gds_mvt_incompletion_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $ovrl_itm_gds_mvt_incompletion_sts when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['ovrl_itm_gds_mvt_incompletion_sts'] = $ovrl_itm_gds_mvt_incompletion_sts;

        return $this;
    }

    /**
     * Gets ovrl_itm_general_incompletion_sts
     *
     * @return string|null
     */
    public function getOvrlItmGeneralIncompletionSts()
    {
        return $this->container['ovrl_itm_general_incompletion_sts'];
    }

    /**
     * Sets ovrl_itm_general_incompletion_sts
     *
     * @param string|null $ovrl_itm_general_incompletion_sts ovrl_itm_general_incompletion_sts
     *
     * @return self
     */
    public function setOvrlItmGeneralIncompletionSts($ovrl_itm_general_incompletion_sts)
    {
        if (is_null($ovrl_itm_general_incompletion_sts)) {
            array_push($this->openAPINullablesSetToNull, 'ovrl_itm_general_incompletion_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ovrl_itm_general_incompletion_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ovrl_itm_general_incompletion_sts) && (mb_strlen($ovrl_itm_general_incompletion_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $ovrl_itm_general_incompletion_sts when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['ovrl_itm_general_incompletion_sts'] = $ovrl_itm_general_incompletion_sts;

        return $this;
    }

    /**
     * Gets ovrl_itm_packing_incompletion_sts
     *
     * @return string|null
     */
    public function getOvrlItmPackingIncompletionSts()
    {
        return $this->container['ovrl_itm_packing_incompletion_sts'];
    }

    /**
     * Sets ovrl_itm_packing_incompletion_sts
     *
     * @param string|null $ovrl_itm_packing_incompletion_sts ovrl_itm_packing_incompletion_sts
     *
     * @return self
     */
    public function setOvrlItmPackingIncompletionSts($ovrl_itm_packing_incompletion_sts)
    {
        if (is_null($ovrl_itm_packing_incompletion_sts)) {
            array_push($this->openAPINullablesSetToNull, 'ovrl_itm_packing_incompletion_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ovrl_itm_packing_incompletion_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ovrl_itm_packing_incompletion_sts) && (mb_strlen($ovrl_itm_packing_incompletion_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $ovrl_itm_packing_incompletion_sts when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['ovrl_itm_packing_incompletion_sts'] = $ovrl_itm_packing_incompletion_sts;

        return $this;
    }

    /**
     * Gets ovrl_itm_picking_incompletion_sts
     *
     * @return string|null
     */
    public function getOvrlItmPickingIncompletionSts()
    {
        return $this->container['ovrl_itm_picking_incompletion_sts'];
    }

    /**
     * Sets ovrl_itm_picking_incompletion_sts
     *
     * @param string|null $ovrl_itm_picking_incompletion_sts ovrl_itm_picking_incompletion_sts
     *
     * @return self
     */
    public function setOvrlItmPickingIncompletionSts($ovrl_itm_picking_incompletion_sts)
    {
        if (is_null($ovrl_itm_picking_incompletion_sts)) {
            array_push($this->openAPINullablesSetToNull, 'ovrl_itm_picking_incompletion_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ovrl_itm_picking_incompletion_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ovrl_itm_picking_incompletion_sts) && (mb_strlen($ovrl_itm_picking_incompletion_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $ovrl_itm_picking_incompletion_sts when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['ovrl_itm_picking_incompletion_sts'] = $ovrl_itm_picking_incompletion_sts;

        return $this;
    }

    /**
     * Gets payment_guarantee_procedure
     *
     * @return string|null
     */
    public function getPaymentGuaranteeProcedure()
    {
        return $this->container['payment_guarantee_procedure'];
    }

    /**
     * Sets payment_guarantee_procedure
     *
     * @param string|null $payment_guarantee_procedure payment_guarantee_procedure
     *
     * @return self
     */
    public function setPaymentGuaranteeProcedure($payment_guarantee_procedure)
    {
        if (is_null($payment_guarantee_procedure)) {
            array_push($this->openAPINullablesSetToNull, 'payment_guarantee_procedure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_guarantee_procedure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_guarantee_procedure) && (mb_strlen($payment_guarantee_procedure) > 6)) {
            throw new \InvalidArgumentException('invalid length for $payment_guarantee_procedure when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 6.');
        }

        $this->container['payment_guarantee_procedure'] = $payment_guarantee_procedure;

        return $this;
    }

    /**
     * Gets picked_items_location
     *
     * @return string|null
     */
    public function getPickedItemsLocation()
    {
        return $this->container['picked_items_location'];
    }

    /**
     * Sets picked_items_location
     *
     * @param string|null $picked_items_location picked_items_location
     *
     * @return self
     */
    public function setPickedItemsLocation($picked_items_location)
    {
        if (is_null($picked_items_location)) {
            array_push($this->openAPINullablesSetToNull, 'picked_items_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picked_items_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($picked_items_location) && (mb_strlen($picked_items_location) > 20)) {
            throw new \InvalidArgumentException('invalid length for $picked_items_location when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 20.');
        }

        $this->container['picked_items_location'] = $picked_items_location;

        return $this;
    }

    /**
     * Gets picking_date
     *
     * @return string|null
     */
    public function getPickingDate()
    {
        return $this->container['picking_date'];
    }

    /**
     * Sets picking_date
     *
     * @param string|null $picking_date picking_date
     *
     * @return self
     */
    public function setPickingDate($picking_date)
    {
        if (is_null($picking_date)) {
            array_push($this->openAPINullablesSetToNull, 'picking_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picking_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['picking_date'] = $picking_date;

        return $this;
    }

    /**
     * Gets picking_time
     *
     * @return string|null
     */
    public function getPickingTime()
    {
        return $this->container['picking_time'];
    }

    /**
     * Sets picking_time
     *
     * @param string|null $picking_time picking_time
     *
     * @return self
     */
    public function setPickingTime($picking_time)
    {
        if (is_null($picking_time)) {
            array_push($this->openAPINullablesSetToNull, 'picking_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picking_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['picking_time'] = $picking_time;

        return $this;
    }

    /**
     * Gets planned_goods_issue_date
     *
     * @return string|null
     */
    public function getPlannedGoodsIssueDate()
    {
        return $this->container['planned_goods_issue_date'];
    }

    /**
     * Sets planned_goods_issue_date
     *
     * @param string|null $planned_goods_issue_date planned_goods_issue_date
     *
     * @return self
     */
    public function setPlannedGoodsIssueDate($planned_goods_issue_date)
    {
        if (is_null($planned_goods_issue_date)) {
            array_push($this->openAPINullablesSetToNull, 'planned_goods_issue_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('planned_goods_issue_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['planned_goods_issue_date'] = $planned_goods_issue_date;

        return $this;
    }

    /**
     * Gets proof_of_delivery_date
     *
     * @return string|null
     */
    public function getProofOfDeliveryDate()
    {
        return $this->container['proof_of_delivery_date'];
    }

    /**
     * Sets proof_of_delivery_date
     *
     * @param string|null $proof_of_delivery_date proof_of_delivery_date
     *
     * @return self
     */
    public function setProofOfDeliveryDate($proof_of_delivery_date)
    {
        if (is_null($proof_of_delivery_date)) {
            array_push($this->openAPINullablesSetToNull, 'proof_of_delivery_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proof_of_delivery_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['proof_of_delivery_date'] = $proof_of_delivery_date;

        return $this;
    }

    /**
     * Gets proposed_delivery_route
     *
     * @return string|null
     */
    public function getProposedDeliveryRoute()
    {
        return $this->container['proposed_delivery_route'];
    }

    /**
     * Sets proposed_delivery_route
     *
     * @param string|null $proposed_delivery_route proposed_delivery_route
     *
     * @return self
     */
    public function setProposedDeliveryRoute($proposed_delivery_route)
    {
        if (is_null($proposed_delivery_route)) {
            array_push($this->openAPINullablesSetToNull, 'proposed_delivery_route');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proposed_delivery_route', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($proposed_delivery_route) && (mb_strlen($proposed_delivery_route) > 6)) {
            throw new \InvalidArgumentException('invalid length for $proposed_delivery_route when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 6.');
        }

        $this->container['proposed_delivery_route'] = $proposed_delivery_route;

        return $this;
    }

    /**
     * Gets receiving_plant
     *
     * @return string|null
     */
    public function getReceivingPlant()
    {
        return $this->container['receiving_plant'];
    }

    /**
     * Sets receiving_plant
     *
     * @param string|null $receiving_plant receiving_plant
     *
     * @return self
     */
    public function setReceivingPlant($receiving_plant)
    {
        if (is_null($receiving_plant)) {
            array_push($this->openAPINullablesSetToNull, 'receiving_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receiving_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($receiving_plant) && (mb_strlen($receiving_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $receiving_plant when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['receiving_plant'] = $receiving_plant;

        return $this;
    }

    /**
     * Gets route_schedule
     *
     * @return string|null
     */
    public function getRouteSchedule()
    {
        return $this->container['route_schedule'];
    }

    /**
     * Sets route_schedule
     *
     * @param string|null $route_schedule route_schedule
     *
     * @return self
     */
    public function setRouteSchedule($route_schedule)
    {
        if (is_null($route_schedule)) {
            array_push($this->openAPINullablesSetToNull, 'route_schedule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('route_schedule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($route_schedule) && (mb_strlen($route_schedule) > 10)) {
            throw new \InvalidArgumentException('invalid length for $route_schedule when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 10.');
        }

        $this->container['route_schedule'] = $route_schedule;

        return $this;
    }

    /**
     * Gets sales_district
     *
     * @return string|null
     */
    public function getSalesDistrict()
    {
        return $this->container['sales_district'];
    }

    /**
     * Sets sales_district
     *
     * @param string|null $sales_district sales_district
     *
     * @return self
     */
    public function setSalesDistrict($sales_district)
    {
        if (is_null($sales_district)) {
            array_push($this->openAPINullablesSetToNull, 'sales_district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_district) && (mb_strlen($sales_district) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_district when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 6.');
        }

        $this->container['sales_district'] = $sales_district;

        return $this;
    }

    /**
     * Gets sales_office
     *
     * @return string|null
     */
    public function getSalesOffice()
    {
        return $this->container['sales_office'];
    }

    /**
     * Sets sales_office
     *
     * @param string|null $sales_office sales_office
     *
     * @return self
     */
    public function setSalesOffice($sales_office)
    {
        if (is_null($sales_office)) {
            array_push($this->openAPINullablesSetToNull, 'sales_office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_office) && (mb_strlen($sales_office) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_office when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['sales_office'] = $sales_office;

        return $this;
    }

    /**
     * Gets sales_organization
     *
     * @return string|null
     */
    public function getSalesOrganization()
    {
        return $this->container['sales_organization'];
    }

    /**
     * Sets sales_organization
     *
     * @param string|null $sales_organization sales_organization
     *
     * @return self
     */
    public function setSalesOrganization($sales_organization)
    {
        if (is_null($sales_organization)) {
            array_push($this->openAPINullablesSetToNull, 'sales_organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_organization) && (mb_strlen($sales_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_organization when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['sales_organization'] = $sales_organization;

        return $this;
    }

    /**
     * Gets sd_document_category
     *
     * @return string|null
     */
    public function getSdDocumentCategory()
    {
        return $this->container['sd_document_category'];
    }

    /**
     * Sets sd_document_category
     *
     * @param string|null $sd_document_category sd_document_category
     *
     * @return self
     */
    public function setSdDocumentCategory($sd_document_category)
    {
        if (is_null($sd_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'sd_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_document_category) && (mb_strlen($sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_category when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['sd_document_category'] = $sd_document_category;

        return $this;
    }

    /**
     * Gets shipment_block_reason
     *
     * @return string|null
     */
    public function getShipmentBlockReason()
    {
        return $this->container['shipment_block_reason'];
    }

    /**
     * Sets shipment_block_reason
     *
     * @param string|null $shipment_block_reason shipment_block_reason
     *
     * @return self
     */
    public function setShipmentBlockReason($shipment_block_reason)
    {
        if (is_null($shipment_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'shipment_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipment_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipment_block_reason) && (mb_strlen($shipment_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipment_block_reason when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['shipment_block_reason'] = $shipment_block_reason;

        return $this;
    }

    /**
     * Gets shipping_condition
     *
     * @return string|null
     */
    public function getShippingCondition()
    {
        return $this->container['shipping_condition'];
    }

    /**
     * Sets shipping_condition
     *
     * @param string|null $shipping_condition shipping_condition
     *
     * @return self
     */
    public function setShippingCondition($shipping_condition)
    {
        if (is_null($shipping_condition)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_condition) && (mb_strlen($shipping_condition) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_condition when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['shipping_condition'] = $shipping_condition;

        return $this;
    }

    /**
     * Gets shipping_point
     *
     * @return string|null
     */
    public function getShippingPoint()
    {
        return $this->container['shipping_point'];
    }

    /**
     * Sets shipping_point
     *
     * @param string|null $shipping_point shipping_point
     *
     * @return self
     */
    public function setShippingPoint($shipping_point)
    {
        if (is_null($shipping_point)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_point) && (mb_strlen($shipping_point) > 4)) {
            throw new \InvalidArgumentException('invalid length for $shipping_point when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['shipping_point'] = $shipping_point;

        return $this;
    }

    /**
     * Gets shipping_type
     *
     * @return string|null
     */
    public function getShippingType()
    {
        return $this->container['shipping_type'];
    }

    /**
     * Sets shipping_type
     *
     * @param string|null $shipping_type shipping_type
     *
     * @return self
     */
    public function setShippingType($shipping_type)
    {
        if (is_null($shipping_type)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_type) && (mb_strlen($shipping_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_type when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['shipping_type'] = $shipping_type;

        return $this;
    }

    /**
     * Gets ship_to_party
     *
     * @return string|null
     */
    public function getShipToParty()
    {
        return $this->container['ship_to_party'];
    }

    /**
     * Sets ship_to_party
     *
     * @param string|null $ship_to_party ship_to_party
     *
     * @return self
     */
    public function setShipToParty($ship_to_party)
    {
        if (is_null($ship_to_party)) {
            array_push($this->openAPINullablesSetToNull, 'ship_to_party');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_to_party', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ship_to_party) && (mb_strlen($ship_to_party) > 10)) {
            throw new \InvalidArgumentException('invalid length for $ship_to_party when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 10.');
        }

        $this->container['ship_to_party'] = $ship_to_party;

        return $this;
    }

    /**
     * Gets sold_to_party
     *
     * @return string|null
     */
    public function getSoldToParty()
    {
        return $this->container['sold_to_party'];
    }

    /**
     * Sets sold_to_party
     *
     * @param string|null $sold_to_party sold_to_party
     *
     * @return self
     */
    public function setSoldToParty($sold_to_party)
    {
        if (is_null($sold_to_party)) {
            array_push($this->openAPINullablesSetToNull, 'sold_to_party');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sold_to_party', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sold_to_party) && (mb_strlen($sold_to_party) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sold_to_party when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 10.');
        }

        $this->container['sold_to_party'] = $sold_to_party;

        return $this;
    }

    /**
     * Gets special_processing_code
     *
     * @return string|null
     */
    public function getSpecialProcessingCode()
    {
        return $this->container['special_processing_code'];
    }

    /**
     * Sets special_processing_code
     *
     * @param string|null $special_processing_code special_processing_code
     *
     * @return self
     */
    public function setSpecialProcessingCode($special_processing_code)
    {
        if (is_null($special_processing_code)) {
            array_push($this->openAPINullablesSetToNull, 'special_processing_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('special_processing_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($special_processing_code) && (mb_strlen($special_processing_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $special_processing_code when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['special_processing_code'] = $special_processing_code;

        return $this;
    }

    /**
     * Gets statistics_currency
     *
     * @return string|null
     */
    public function getStatisticsCurrency()
    {
        return $this->container['statistics_currency'];
    }

    /**
     * Sets statistics_currency
     *
     * @param string|null $statistics_currency statistics_currency
     *
     * @return self
     */
    public function setStatisticsCurrency($statistics_currency)
    {
        if (is_null($statistics_currency)) {
            array_push($this->openAPINullablesSetToNull, 'statistics_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statistics_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($statistics_currency) && (mb_strlen($statistics_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $statistics_currency when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 5.');
        }

        $this->container['statistics_currency'] = $statistics_currency;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string|null $supplier supplier
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            array_push($this->openAPINullablesSetToNull, 'supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier) && (mb_strlen($supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 10.');
        }

        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets total_block_status
     *
     * @return string|null
     */
    public function getTotalBlockStatus()
    {
        return $this->container['total_block_status'];
    }

    /**
     * Sets total_block_status
     *
     * @param string|null $total_block_status total_block_status
     *
     * @return self
     */
    public function setTotalBlockStatus($total_block_status)
    {
        if (is_null($total_block_status)) {
            array_push($this->openAPINullablesSetToNull, 'total_block_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_block_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($total_block_status) && (mb_strlen($total_block_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $total_block_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['total_block_status'] = $total_block_status;

        return $this;
    }

    /**
     * Gets total_credit_check_status
     *
     * @return string|null
     */
    public function getTotalCreditCheckStatus()
    {
        return $this->container['total_credit_check_status'];
    }

    /**
     * Sets total_credit_check_status
     *
     * @param string|null $total_credit_check_status total_credit_check_status
     *
     * @return self
     */
    public function setTotalCreditCheckStatus($total_credit_check_status)
    {
        if (is_null($total_credit_check_status)) {
            array_push($this->openAPINullablesSetToNull, 'total_credit_check_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_credit_check_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($total_credit_check_status) && (mb_strlen($total_credit_check_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $total_credit_check_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['total_credit_check_status'] = $total_credit_check_status;

        return $this;
    }

    /**
     * Gets total_number_of_package
     *
     * @return string|null
     */
    public function getTotalNumberOfPackage()
    {
        return $this->container['total_number_of_package'];
    }

    /**
     * Sets total_number_of_package
     *
     * @param string|null $total_number_of_package total_number_of_package
     *
     * @return self
     */
    public function setTotalNumberOfPackage($total_number_of_package)
    {
        if (is_null($total_number_of_package)) {
            array_push($this->openAPINullablesSetToNull, 'total_number_of_package');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_number_of_package', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($total_number_of_package) && (mb_strlen($total_number_of_package) > 5)) {
            throw new \InvalidArgumentException('invalid length for $total_number_of_package when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 5.');
        }

        $this->container['total_number_of_package'] = $total_number_of_package;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency transaction_currency
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_currency) && (mb_strlen($transaction_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 5.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets transportation_group
     *
     * @return string|null
     */
    public function getTransportationGroup()
    {
        return $this->container['transportation_group'];
    }

    /**
     * Sets transportation_group
     *
     * @param string|null $transportation_group transportation_group
     *
     * @return self
     */
    public function setTransportationGroup($transportation_group)
    {
        if (is_null($transportation_group)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transportation_group) && (mb_strlen($transportation_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $transportation_group when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['transportation_group'] = $transportation_group;

        return $this;
    }

    /**
     * Gets transportation_planning_date
     *
     * @return string|null
     */
    public function getTransportationPlanningDate()
    {
        return $this->container['transportation_planning_date'];
    }

    /**
     * Sets transportation_planning_date
     *
     * @param string|null $transportation_planning_date transportation_planning_date
     *
     * @return self
     */
    public function setTransportationPlanningDate($transportation_planning_date)
    {
        if (is_null($transportation_planning_date)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_planning_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_planning_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transportation_planning_date'] = $transportation_planning_date;

        return $this;
    }

    /**
     * Gets transportation_planning_status
     *
     * @return string|null
     */
    public function getTransportationPlanningStatus()
    {
        return $this->container['transportation_planning_status'];
    }

    /**
     * Sets transportation_planning_status
     *
     * @param string|null $transportation_planning_status transportation_planning_status
     *
     * @return self
     */
    public function setTransportationPlanningStatus($transportation_planning_status)
    {
        if (is_null($transportation_planning_status)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_planning_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_planning_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transportation_planning_status) && (mb_strlen($transportation_planning_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $transportation_planning_status when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['transportation_planning_status'] = $transportation_planning_status;

        return $this;
    }

    /**
     * Gets transportation_planning_time
     *
     * @return string|null
     */
    public function getTransportationPlanningTime()
    {
        return $this->container['transportation_planning_time'];
    }

    /**
     * Sets transportation_planning_time
     *
     * @param string|null $transportation_planning_time transportation_planning_time
     *
     * @return self
     */
    public function setTransportationPlanningTime($transportation_planning_time)
    {
        if (is_null($transportation_planning_time)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_planning_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_planning_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transportation_planning_time'] = $transportation_planning_time;

        return $this;
    }

    /**
     * Gets unloading_point_name
     *
     * @return string|null
     */
    public function getUnloadingPointName()
    {
        return $this->container['unloading_point_name'];
    }

    /**
     * Sets unloading_point_name
     *
     * @param string|null $unloading_point_name unloading_point_name
     *
     * @return self
     */
    public function setUnloadingPointName($unloading_point_name)
    {
        if (is_null($unloading_point_name)) {
            array_push($this->openAPINullablesSetToNull, 'unloading_point_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unloading_point_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($unloading_point_name) && (mb_strlen($unloading_point_name) > 25)) {
            throw new \InvalidArgumentException('invalid length for $unloading_point_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 25.');
        }

        $this->container['unloading_point_name'] = $unloading_point_name;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string|null
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string|null $warehouse warehouse
     *
     * @return self
     */
    public function setWarehouse($warehouse)
    {
        if (is_null($warehouse)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($warehouse) && (mb_strlen($warehouse) > 3)) {
            throw new \InvalidArgumentException('invalid length for $warehouse when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 3.');
        }

        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets warehouse_gate
     *
     * @return string|null
     */
    public function getWarehouseGate()
    {
        return $this->container['warehouse_gate'];
    }

    /**
     * Sets warehouse_gate
     *
     * @param string|null $warehouse_gate warehouse_gate
     *
     * @return self
     */
    public function setWarehouseGate($warehouse_gate)
    {
        if (is_null($warehouse_gate)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse_gate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse_gate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($warehouse_gate) && (mb_strlen($warehouse_gate) > 3)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_gate when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 3.');
        }

        $this->container['warehouse_gate'] = $warehouse_gate;

        return $this;
    }

    /**
     * Gets warehouse_staging_area
     *
     * @return string|null
     */
    public function getWarehouseStagingArea()
    {
        return $this->container['warehouse_staging_area'];
    }

    /**
     * Sets warehouse_staging_area
     *
     * @param string|null $warehouse_staging_area warehouse_staging_area
     *
     * @return self
     */
    public function setWarehouseStagingArea($warehouse_staging_area)
    {
        if (is_null($warehouse_staging_area)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse_staging_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse_staging_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($warehouse_staging_area) && (mb_strlen($warehouse_staging_area) > 10)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_staging_area when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderType., must be smaller than or equal to 10.');
        }

        $this->container['warehouse_staging_area'] = $warehouse_staging_area;

        return $this;
    }

    /**
     * Gets to_delivery_document_text
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToDeliveryDocumentText|null
     */
    public function getToDeliveryDocumentText()
    {
        return $this->container['to_delivery_document_text'];
    }

    /**
     * Sets to_delivery_document_text
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToDeliveryDocumentText|null $to_delivery_document_text to_delivery_document_text
     *
     * @return self
     */
    public function setToDeliveryDocumentText($to_delivery_document_text)
    {
        if (is_null($to_delivery_document_text)) {
            throw new \InvalidArgumentException('non-nullable to_delivery_document_text cannot be null');
        }
        $this->container['to_delivery_document_text'] = $to_delivery_document_text;

        return $this;
    }

    /**
     * Gets to_handling_unit_header_delivery
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToHandlingUnitHeaderDelivery|null
     */
    public function getToHandlingUnitHeaderDelivery()
    {
        return $this->container['to_handling_unit_header_delivery'];
    }

    /**
     * Sets to_handling_unit_header_delivery
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToHandlingUnitHeaderDelivery|null $to_handling_unit_header_delivery to_handling_unit_header_delivery
     *
     * @return self
     */
    public function setToHandlingUnitHeaderDelivery($to_handling_unit_header_delivery)
    {
        if (is_null($to_handling_unit_header_delivery)) {
            throw new \InvalidArgumentException('non-nullable to_handling_unit_header_delivery cannot be null');
        }
        $this->container['to_handling_unit_header_delivery'] = $to_handling_unit_header_delivery;

        return $this;
    }

    /**
     * Gets to_delivery_document_partner
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToDeliveryDocumentPartner|null
     */
    public function getToDeliveryDocumentPartner()
    {
        return $this->container['to_delivery_document_partner'];
    }

    /**
     * Sets to_delivery_document_partner
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToDeliveryDocumentPartner|null $to_delivery_document_partner to_delivery_document_partner
     *
     * @return self
     */
    public function setToDeliveryDocumentPartner($to_delivery_document_partner)
    {
        if (is_null($to_delivery_document_partner)) {
            throw new \InvalidArgumentException('non-nullable to_delivery_document_partner cannot be null');
        }
        $this->container['to_delivery_document_partner'] = $to_delivery_document_partner;

        return $this;
    }

    /**
     * Gets to_delivery_document_item
     *
     * @return \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToDeliveryDocumentItem|null
     */
    public function getToDeliveryDocumentItem()
    {
        return $this->container['to_delivery_document_item'];
    }

    /**
     * Sets to_delivery_document_item
     *
     * @param \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeToDeliveryDocumentItem|null $to_delivery_document_item to_delivery_document_item
     *
     * @return self
     */
    public function setToDeliveryDocumentItem($to_delivery_document_item)
    {
        if (is_null($to_delivery_document_item)) {
            throw new \InvalidArgumentException('non-nullable to_delivery_document_item cannot be null');
        }
        $this->container['to_delivery_document_item'] = $to_delivery_document_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


