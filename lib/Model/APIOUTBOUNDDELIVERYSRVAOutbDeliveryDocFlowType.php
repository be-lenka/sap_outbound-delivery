<?php
/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_OutbDeliveryDocFlowType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deliveryversion' => 'string',
        'preceding_document' => 'string',
        'preceding_document_category' => 'string',
        'preceding_document_item' => 'string',
        'subsequentdocument' => 'string',
        'quantity_in_base_unit' => 'float',
        'subsequent_document_item' => 'string',
        'sd_fulfillment_calculation_rule' => 'string',
        'subsequent_document_category' => 'string',
        'transfer_order_in_wrhs_mgmt_is_confd' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deliveryversion' => null,
        'preceding_document' => null,
        'preceding_document_category' => null,
        'preceding_document_item' => null,
        'subsequentdocument' => null,
        'quantity_in_base_unit' => 'decimal',
        'subsequent_document_item' => null,
        'sd_fulfillment_calculation_rule' => null,
        'subsequent_document_category' => null,
        'transfer_order_in_wrhs_mgmt_is_confd' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deliveryversion' => true,
		'preceding_document' => false,
		'preceding_document_category' => true,
		'preceding_document_item' => false,
		'subsequentdocument' => true,
		'quantity_in_base_unit' => true,
		'subsequent_document_item' => true,
		'sd_fulfillment_calculation_rule' => true,
		'subsequent_document_category' => false,
		'transfer_order_in_wrhs_mgmt_is_confd' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deliveryversion' => 'Deliveryversion',
        'preceding_document' => 'PrecedingDocument',
        'preceding_document_category' => 'PrecedingDocumentCategory',
        'preceding_document_item' => 'PrecedingDocumentItem',
        'subsequentdocument' => 'Subsequentdocument',
        'quantity_in_base_unit' => 'QuantityInBaseUnit',
        'subsequent_document_item' => 'SubsequentDocumentItem',
        'sd_fulfillment_calculation_rule' => 'SDFulfillmentCalculationRule',
        'subsequent_document_category' => 'SubsequentDocumentCategory',
        'transfer_order_in_wrhs_mgmt_is_confd' => 'TransferOrderInWrhsMgmtIsConfd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deliveryversion' => 'setDeliveryversion',
        'preceding_document' => 'setPrecedingDocument',
        'preceding_document_category' => 'setPrecedingDocumentCategory',
        'preceding_document_item' => 'setPrecedingDocumentItem',
        'subsequentdocument' => 'setSubsequentdocument',
        'quantity_in_base_unit' => 'setQuantityInBaseUnit',
        'subsequent_document_item' => 'setSubsequentDocumentItem',
        'sd_fulfillment_calculation_rule' => 'setSdFulfillmentCalculationRule',
        'subsequent_document_category' => 'setSubsequentDocumentCategory',
        'transfer_order_in_wrhs_mgmt_is_confd' => 'setTransferOrderInWrhsMgmtIsConfd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deliveryversion' => 'getDeliveryversion',
        'preceding_document' => 'getPrecedingDocument',
        'preceding_document_category' => 'getPrecedingDocumentCategory',
        'preceding_document_item' => 'getPrecedingDocumentItem',
        'subsequentdocument' => 'getSubsequentdocument',
        'quantity_in_base_unit' => 'getQuantityInBaseUnit',
        'subsequent_document_item' => 'getSubsequentDocumentItem',
        'sd_fulfillment_calculation_rule' => 'getSdFulfillmentCalculationRule',
        'subsequent_document_category' => 'getSubsequentDocumentCategory',
        'transfer_order_in_wrhs_mgmt_is_confd' => 'getTransferOrderInWrhsMgmtIsConfd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('deliveryversion', $data ?? [], null);
        $this->setIfExists('preceding_document', $data ?? [], null);
        $this->setIfExists('preceding_document_category', $data ?? [], null);
        $this->setIfExists('preceding_document_item', $data ?? [], null);
        $this->setIfExists('subsequentdocument', $data ?? [], null);
        $this->setIfExists('quantity_in_base_unit', $data ?? [], null);
        $this->setIfExists('subsequent_document_item', $data ?? [], null);
        $this->setIfExists('sd_fulfillment_calculation_rule', $data ?? [], null);
        $this->setIfExists('subsequent_document_category', $data ?? [], null);
        $this->setIfExists('transfer_order_in_wrhs_mgmt_is_confd', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['deliveryversion']) && (mb_strlen($this->container['deliveryversion']) > 4)) {
            $invalidProperties[] = "invalid value for 'deliveryversion', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['preceding_document']) && (mb_strlen($this->container['preceding_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'preceding_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['preceding_document_category']) && (mb_strlen($this->container['preceding_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'preceding_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['preceding_document_item']) && (mb_strlen($this->container['preceding_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'preceding_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['subsequentdocument']) && (mb_strlen($this->container['subsequentdocument']) > 10)) {
            $invalidProperties[] = "invalid value for 'subsequentdocument', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['subsequent_document_item']) && (mb_strlen($this->container['subsequent_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'subsequent_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sd_fulfillment_calculation_rule']) && (mb_strlen($this->container['sd_fulfillment_calculation_rule']) > 1)) {
            $invalidProperties[] = "invalid value for 'sd_fulfillment_calculation_rule', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['subsequent_document_category']) && (mb_strlen($this->container['subsequent_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'subsequent_document_category', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deliveryversion
     *
     * @return string|null
     */
    public function getDeliveryversion()
    {
        return $this->container['deliveryversion'];
    }

    /**
     * Sets deliveryversion
     *
     * @param string|null $deliveryversion deliveryversion
     *
     * @return self
     */
    public function setDeliveryversion($deliveryversion)
    {
        if (is_null($deliveryversion)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($deliveryversion) && (mb_strlen($deliveryversion) > 4)) {
            throw new \InvalidArgumentException('invalid length for $deliveryversion when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType., must be smaller than or equal to 4.');
        }

        $this->container['deliveryversion'] = $deliveryversion;

        return $this;
    }

    /**
     * Gets preceding_document
     *
     * @return string|null
     */
    public function getPrecedingDocument()
    {
        return $this->container['preceding_document'];
    }

    /**
     * Sets preceding_document
     *
     * @param string|null $preceding_document preceding_document
     *
     * @return self
     */
    public function setPrecedingDocument($preceding_document)
    {
        if (is_null($preceding_document)) {
            throw new \InvalidArgumentException('non-nullable preceding_document cannot be null');
        }
        if ((mb_strlen($preceding_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $preceding_document when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType., must be smaller than or equal to 10.');
        }

        $this->container['preceding_document'] = $preceding_document;

        return $this;
    }

    /**
     * Gets preceding_document_category
     *
     * @return string|null
     */
    public function getPrecedingDocumentCategory()
    {
        return $this->container['preceding_document_category'];
    }

    /**
     * Sets preceding_document_category
     *
     * @param string|null $preceding_document_category preceding_document_category
     *
     * @return self
     */
    public function setPrecedingDocumentCategory($preceding_document_category)
    {
        if (is_null($preceding_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'preceding_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preceding_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($preceding_document_category) && (mb_strlen($preceding_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $preceding_document_category when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType., must be smaller than or equal to 4.');
        }

        $this->container['preceding_document_category'] = $preceding_document_category;

        return $this;
    }

    /**
     * Gets preceding_document_item
     *
     * @return string|null
     */
    public function getPrecedingDocumentItem()
    {
        return $this->container['preceding_document_item'];
    }

    /**
     * Sets preceding_document_item
     *
     * @param string|null $preceding_document_item preceding_document_item
     *
     * @return self
     */
    public function setPrecedingDocumentItem($preceding_document_item)
    {
        if (is_null($preceding_document_item)) {
            throw new \InvalidArgumentException('non-nullable preceding_document_item cannot be null');
        }
        if ((mb_strlen($preceding_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $preceding_document_item when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType., must be smaller than or equal to 6.');
        }

        $this->container['preceding_document_item'] = $preceding_document_item;

        return $this;
    }

    /**
     * Gets subsequentdocument
     *
     * @return string|null
     */
    public function getSubsequentdocument()
    {
        return $this->container['subsequentdocument'];
    }

    /**
     * Sets subsequentdocument
     *
     * @param string|null $subsequentdocument subsequentdocument
     *
     * @return self
     */
    public function setSubsequentdocument($subsequentdocument)
    {
        if (is_null($subsequentdocument)) {
            array_push($this->openAPINullablesSetToNull, 'subsequentdocument');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subsequentdocument', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($subsequentdocument) && (mb_strlen($subsequentdocument) > 10)) {
            throw new \InvalidArgumentException('invalid length for $subsequentdocument when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType., must be smaller than or equal to 10.');
        }

        $this->container['subsequentdocument'] = $subsequentdocument;

        return $this;
    }

    /**
     * Gets quantity_in_base_unit
     *
     * @return float|null
     */
    public function getQuantityInBaseUnit()
    {
        return $this->container['quantity_in_base_unit'];
    }

    /**
     * Sets quantity_in_base_unit
     *
     * @param float|null $quantity_in_base_unit quantity_in_base_unit
     *
     * @return self
     */
    public function setQuantityInBaseUnit($quantity_in_base_unit)
    {
        if (is_null($quantity_in_base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'quantity_in_base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity_in_base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['quantity_in_base_unit'] = $quantity_in_base_unit;

        return $this;
    }

    /**
     * Gets subsequent_document_item
     *
     * @return string|null
     */
    public function getSubsequentDocumentItem()
    {
        return $this->container['subsequent_document_item'];
    }

    /**
     * Sets subsequent_document_item
     *
     * @param string|null $subsequent_document_item subsequent_document_item
     *
     * @return self
     */
    public function setSubsequentDocumentItem($subsequent_document_item)
    {
        if (is_null($subsequent_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'subsequent_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subsequent_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($subsequent_document_item) && (mb_strlen($subsequent_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $subsequent_document_item when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType., must be smaller than or equal to 6.');
        }

        $this->container['subsequent_document_item'] = $subsequent_document_item;

        return $this;
    }

    /**
     * Gets sd_fulfillment_calculation_rule
     *
     * @return string|null
     */
    public function getSdFulfillmentCalculationRule()
    {
        return $this->container['sd_fulfillment_calculation_rule'];
    }

    /**
     * Sets sd_fulfillment_calculation_rule
     *
     * @param string|null $sd_fulfillment_calculation_rule sd_fulfillment_calculation_rule
     *
     * @return self
     */
    public function setSdFulfillmentCalculationRule($sd_fulfillment_calculation_rule)
    {
        if (is_null($sd_fulfillment_calculation_rule)) {
            array_push($this->openAPINullablesSetToNull, 'sd_fulfillment_calculation_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_fulfillment_calculation_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_fulfillment_calculation_rule) && (mb_strlen($sd_fulfillment_calculation_rule) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sd_fulfillment_calculation_rule when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType., must be smaller than or equal to 1.');
        }

        $this->container['sd_fulfillment_calculation_rule'] = $sd_fulfillment_calculation_rule;

        return $this;
    }

    /**
     * Gets subsequent_document_category
     *
     * @return string|null
     */
    public function getSubsequentDocumentCategory()
    {
        return $this->container['subsequent_document_category'];
    }

    /**
     * Sets subsequent_document_category
     *
     * @param string|null $subsequent_document_category subsequent_document_category
     *
     * @return self
     */
    public function setSubsequentDocumentCategory($subsequent_document_category)
    {
        if (is_null($subsequent_document_category)) {
            throw new \InvalidArgumentException('non-nullable subsequent_document_category cannot be null');
        }
        if ((mb_strlen($subsequent_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $subsequent_document_category when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryDocFlowType., must be smaller than or equal to 4.');
        }

        $this->container['subsequent_document_category'] = $subsequent_document_category;

        return $this;
    }

    /**
     * Gets transfer_order_in_wrhs_mgmt_is_confd
     *
     * @return bool|null
     */
    public function getTransferOrderInWrhsMgmtIsConfd()
    {
        return $this->container['transfer_order_in_wrhs_mgmt_is_confd'];
    }

    /**
     * Sets transfer_order_in_wrhs_mgmt_is_confd
     *
     * @param bool|null $transfer_order_in_wrhs_mgmt_is_confd transfer_order_in_wrhs_mgmt_is_confd
     *
     * @return self
     */
    public function setTransferOrderInWrhsMgmtIsConfd($transfer_order_in_wrhs_mgmt_is_confd)
    {
        if (is_null($transfer_order_in_wrhs_mgmt_is_confd)) {
            array_push($this->openAPINullablesSetToNull, 'transfer_order_in_wrhs_mgmt_is_confd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transfer_order_in_wrhs_mgmt_is_confd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transfer_order_in_wrhs_mgmt_is_confd'] = $transfer_order_in_wrhs_mgmt_is_confd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


