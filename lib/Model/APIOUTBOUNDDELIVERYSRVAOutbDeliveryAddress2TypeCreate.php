<?php
/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Model;

use \ArrayAccess;
use \BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_OUTBOUND_DELIVERY_SRV.A_OutbDeliveryAddress2Type-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_street_prefix_name' => 'string',
        'additional_street_suffix_name' => 'string',
        'address_time_zone' => 'string',
        'building' => 'string',
        'business_partner_name1' => 'string',
        'business_partner_name2' => 'string',
        'business_partner_name3' => 'string',
        'business_partner_name4' => 'string',
        'care_of_name' => 'string',
        'city_name' => 'string',
        'company_postal_code' => 'string',
        'correspondence_language' => 'string',
        'country' => 'string',
        'county' => 'string',
        'district' => 'string',
        'email_address' => 'string',
        'fax_number' => 'string',
        'fax_number_extension' => 'string',
        'floor' => 'string',
        'home_city_name' => 'string',
        'house_number' => 'string',
        'house_number_supplement_text' => 'string',
        'mobile_phone_number' => 'string',
        'phone_number' => 'string',
        'phone_number_extension' => 'string',
        'po_box' => 'string',
        'po_box_deviating_city_name' => 'string',
        'po_box_deviating_region' => 'string',
        'po_box_is_without_number' => 'bool',
        'po_box_lobby_name' => 'string',
        'po_box_postal_code' => 'string',
        'postal_code' => 'string',
        'region' => 'string',
        'room_number' => 'string',
        'street_name' => 'string',
        'street_prefix_name' => 'string',
        'street_suffix_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_street_prefix_name' => null,
        'additional_street_suffix_name' => null,
        'address_time_zone' => null,
        'building' => null,
        'business_partner_name1' => null,
        'business_partner_name2' => null,
        'business_partner_name3' => null,
        'business_partner_name4' => null,
        'care_of_name' => null,
        'city_name' => null,
        'company_postal_code' => null,
        'correspondence_language' => null,
        'country' => null,
        'county' => null,
        'district' => null,
        'email_address' => null,
        'fax_number' => null,
        'fax_number_extension' => null,
        'floor' => null,
        'home_city_name' => null,
        'house_number' => null,
        'house_number_supplement_text' => null,
        'mobile_phone_number' => null,
        'phone_number' => null,
        'phone_number_extension' => null,
        'po_box' => null,
        'po_box_deviating_city_name' => null,
        'po_box_deviating_region' => null,
        'po_box_is_without_number' => null,
        'po_box_lobby_name' => null,
        'po_box_postal_code' => null,
        'postal_code' => null,
        'region' => null,
        'room_number' => null,
        'street_name' => null,
        'street_prefix_name' => null,
        'street_suffix_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additional_street_prefix_name' => true,
		'additional_street_suffix_name' => true,
		'address_time_zone' => false,
		'building' => true,
		'business_partner_name1' => false,
		'business_partner_name2' => true,
		'business_partner_name3' => true,
		'business_partner_name4' => true,
		'care_of_name' => true,
		'city_name' => false,
		'company_postal_code' => true,
		'correspondence_language' => true,
		'country' => false,
		'county' => true,
		'district' => true,
		'email_address' => true,
		'fax_number' => true,
		'fax_number_extension' => true,
		'floor' => true,
		'home_city_name' => true,
		'house_number' => true,
		'house_number_supplement_text' => true,
		'mobile_phone_number' => true,
		'phone_number' => true,
		'phone_number_extension' => true,
		'po_box' => true,
		'po_box_deviating_city_name' => true,
		'po_box_deviating_region' => true,
		'po_box_is_without_number' => true,
		'po_box_lobby_name' => true,
		'po_box_postal_code' => true,
		'postal_code' => true,
		'region' => true,
		'room_number' => true,
		'street_name' => true,
		'street_prefix_name' => true,
		'street_suffix_name' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_street_prefix_name' => 'AdditionalStreetPrefixName',
        'additional_street_suffix_name' => 'AdditionalStreetSuffixName',
        'address_time_zone' => 'AddressTimeZone',
        'building' => 'Building',
        'business_partner_name1' => 'BusinessPartnerName1',
        'business_partner_name2' => 'BusinessPartnerName2',
        'business_partner_name3' => 'BusinessPartnerName3',
        'business_partner_name4' => 'BusinessPartnerName4',
        'care_of_name' => 'CareOfName',
        'city_name' => 'CityName',
        'company_postal_code' => 'CompanyPostalCode',
        'correspondence_language' => 'CorrespondenceLanguage',
        'country' => 'Country',
        'county' => 'County',
        'district' => 'District',
        'email_address' => 'EmailAddress',
        'fax_number' => 'FaxNumber',
        'fax_number_extension' => 'FaxNumberExtension',
        'floor' => 'Floor',
        'home_city_name' => 'HomeCityName',
        'house_number' => 'HouseNumber',
        'house_number_supplement_text' => 'HouseNumberSupplementText',
        'mobile_phone_number' => 'MobilePhoneNumber',
        'phone_number' => 'PhoneNumber',
        'phone_number_extension' => 'PhoneNumberExtension',
        'po_box' => 'POBox',
        'po_box_deviating_city_name' => 'POBoxDeviatingCityName',
        'po_box_deviating_region' => 'POBoxDeviatingRegion',
        'po_box_is_without_number' => 'POBoxIsWithoutNumber',
        'po_box_lobby_name' => 'POBoxLobbyName',
        'po_box_postal_code' => 'POBoxPostalCode',
        'postal_code' => 'PostalCode',
        'region' => 'Region',
        'room_number' => 'RoomNumber',
        'street_name' => 'StreetName',
        'street_prefix_name' => 'StreetPrefixName',
        'street_suffix_name' => 'StreetSuffixName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_street_prefix_name' => 'setAdditionalStreetPrefixName',
        'additional_street_suffix_name' => 'setAdditionalStreetSuffixName',
        'address_time_zone' => 'setAddressTimeZone',
        'building' => 'setBuilding',
        'business_partner_name1' => 'setBusinessPartnerName1',
        'business_partner_name2' => 'setBusinessPartnerName2',
        'business_partner_name3' => 'setBusinessPartnerName3',
        'business_partner_name4' => 'setBusinessPartnerName4',
        'care_of_name' => 'setCareOfName',
        'city_name' => 'setCityName',
        'company_postal_code' => 'setCompanyPostalCode',
        'correspondence_language' => 'setCorrespondenceLanguage',
        'country' => 'setCountry',
        'county' => 'setCounty',
        'district' => 'setDistrict',
        'email_address' => 'setEmailAddress',
        'fax_number' => 'setFaxNumber',
        'fax_number_extension' => 'setFaxNumberExtension',
        'floor' => 'setFloor',
        'home_city_name' => 'setHomeCityName',
        'house_number' => 'setHouseNumber',
        'house_number_supplement_text' => 'setHouseNumberSupplementText',
        'mobile_phone_number' => 'setMobilePhoneNumber',
        'phone_number' => 'setPhoneNumber',
        'phone_number_extension' => 'setPhoneNumberExtension',
        'po_box' => 'setPoBox',
        'po_box_deviating_city_name' => 'setPoBoxDeviatingCityName',
        'po_box_deviating_region' => 'setPoBoxDeviatingRegion',
        'po_box_is_without_number' => 'setPoBoxIsWithoutNumber',
        'po_box_lobby_name' => 'setPoBoxLobbyName',
        'po_box_postal_code' => 'setPoBoxPostalCode',
        'postal_code' => 'setPostalCode',
        'region' => 'setRegion',
        'room_number' => 'setRoomNumber',
        'street_name' => 'setStreetName',
        'street_prefix_name' => 'setStreetPrefixName',
        'street_suffix_name' => 'setStreetSuffixName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_street_prefix_name' => 'getAdditionalStreetPrefixName',
        'additional_street_suffix_name' => 'getAdditionalStreetSuffixName',
        'address_time_zone' => 'getAddressTimeZone',
        'building' => 'getBuilding',
        'business_partner_name1' => 'getBusinessPartnerName1',
        'business_partner_name2' => 'getBusinessPartnerName2',
        'business_partner_name3' => 'getBusinessPartnerName3',
        'business_partner_name4' => 'getBusinessPartnerName4',
        'care_of_name' => 'getCareOfName',
        'city_name' => 'getCityName',
        'company_postal_code' => 'getCompanyPostalCode',
        'correspondence_language' => 'getCorrespondenceLanguage',
        'country' => 'getCountry',
        'county' => 'getCounty',
        'district' => 'getDistrict',
        'email_address' => 'getEmailAddress',
        'fax_number' => 'getFaxNumber',
        'fax_number_extension' => 'getFaxNumberExtension',
        'floor' => 'getFloor',
        'home_city_name' => 'getHomeCityName',
        'house_number' => 'getHouseNumber',
        'house_number_supplement_text' => 'getHouseNumberSupplementText',
        'mobile_phone_number' => 'getMobilePhoneNumber',
        'phone_number' => 'getPhoneNumber',
        'phone_number_extension' => 'getPhoneNumberExtension',
        'po_box' => 'getPoBox',
        'po_box_deviating_city_name' => 'getPoBoxDeviatingCityName',
        'po_box_deviating_region' => 'getPoBoxDeviatingRegion',
        'po_box_is_without_number' => 'getPoBoxIsWithoutNumber',
        'po_box_lobby_name' => 'getPoBoxLobbyName',
        'po_box_postal_code' => 'getPoBoxPostalCode',
        'postal_code' => 'getPostalCode',
        'region' => 'getRegion',
        'room_number' => 'getRoomNumber',
        'street_name' => 'getStreetName',
        'street_prefix_name' => 'getStreetPrefixName',
        'street_suffix_name' => 'getStreetSuffixName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additional_street_prefix_name', $data ?? [], null);
        $this->setIfExists('additional_street_suffix_name', $data ?? [], null);
        $this->setIfExists('address_time_zone', $data ?? [], null);
        $this->setIfExists('building', $data ?? [], null);
        $this->setIfExists('business_partner_name1', $data ?? [], null);
        $this->setIfExists('business_partner_name2', $data ?? [], null);
        $this->setIfExists('business_partner_name3', $data ?? [], null);
        $this->setIfExists('business_partner_name4', $data ?? [], null);
        $this->setIfExists('care_of_name', $data ?? [], null);
        $this->setIfExists('city_name', $data ?? [], null);
        $this->setIfExists('company_postal_code', $data ?? [], null);
        $this->setIfExists('correspondence_language', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
        $this->setIfExists('district', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('fax_number', $data ?? [], null);
        $this->setIfExists('fax_number_extension', $data ?? [], null);
        $this->setIfExists('floor', $data ?? [], null);
        $this->setIfExists('home_city_name', $data ?? [], null);
        $this->setIfExists('house_number', $data ?? [], null);
        $this->setIfExists('house_number_supplement_text', $data ?? [], null);
        $this->setIfExists('mobile_phone_number', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('phone_number_extension', $data ?? [], null);
        $this->setIfExists('po_box', $data ?? [], null);
        $this->setIfExists('po_box_deviating_city_name', $data ?? [], null);
        $this->setIfExists('po_box_deviating_region', $data ?? [], null);
        $this->setIfExists('po_box_is_without_number', $data ?? [], null);
        $this->setIfExists('po_box_lobby_name', $data ?? [], null);
        $this->setIfExists('po_box_postal_code', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('room_number', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('street_prefix_name', $data ?? [], null);
        $this->setIfExists('street_suffix_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['additional_street_prefix_name']) && (mb_strlen($this->container['additional_street_prefix_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'additional_street_prefix_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['additional_street_suffix_name']) && (mb_strlen($this->container['additional_street_suffix_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'additional_street_suffix_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['address_time_zone']) && (mb_strlen($this->container['address_time_zone']) > 6)) {
            $invalidProperties[] = "invalid value for 'address_time_zone', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['building']) && (mb_strlen($this->container['building']) > 20)) {
            $invalidProperties[] = "invalid value for 'building', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['business_partner_name1']) && (mb_strlen($this->container['business_partner_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'business_partner_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['business_partner_name2']) && (mb_strlen($this->container['business_partner_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'business_partner_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['business_partner_name3']) && (mb_strlen($this->container['business_partner_name3']) > 40)) {
            $invalidProperties[] = "invalid value for 'business_partner_name3', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['business_partner_name4']) && (mb_strlen($this->container['business_partner_name4']) > 40)) {
            $invalidProperties[] = "invalid value for 'business_partner_name4', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['care_of_name']) && (mb_strlen($this->container['care_of_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'care_of_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['city_name']) && (mb_strlen($this->container['city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['company_postal_code']) && (mb_strlen($this->container['company_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'company_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['correspondence_language']) && (mb_strlen($this->container['correspondence_language']) > 2)) {
            $invalidProperties[] = "invalid value for 'correspondence_language', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 3)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) > 40)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['district']) && (mb_strlen($this->container['district']) > 40)) {
            $invalidProperties[] = "invalid value for 'district', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 241)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 241.";
        }

        if (!is_null($this->container['fax_number']) && (mb_strlen($this->container['fax_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['fax_number_extension']) && (mb_strlen($this->container['fax_number_extension']) > 10)) {
            $invalidProperties[] = "invalid value for 'fax_number_extension', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['floor']) && (mb_strlen($this->container['floor']) > 10)) {
            $invalidProperties[] = "invalid value for 'floor', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['home_city_name']) && (mb_strlen($this->container['home_city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'home_city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['house_number']) && (mb_strlen($this->container['house_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'house_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['house_number_supplement_text']) && (mb_strlen($this->container['house_number_supplement_text']) > 10)) {
            $invalidProperties[] = "invalid value for 'house_number_supplement_text', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['mobile_phone_number']) && (mb_strlen($this->container['mobile_phone_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'mobile_phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['phone_number_extension']) && (mb_strlen($this->container['phone_number_extension']) > 10)) {
            $invalidProperties[] = "invalid value for 'phone_number_extension', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['po_box']) && (mb_strlen($this->container['po_box']) > 10)) {
            $invalidProperties[] = "invalid value for 'po_box', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['po_box_deviating_city_name']) && (mb_strlen($this->container['po_box_deviating_city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'po_box_deviating_city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['po_box_deviating_region']) && (mb_strlen($this->container['po_box_deviating_region']) > 3)) {
            $invalidProperties[] = "invalid value for 'po_box_deviating_region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['po_box_lobby_name']) && (mb_strlen($this->container['po_box_lobby_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'po_box_lobby_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['po_box_postal_code']) && (mb_strlen($this->container['po_box_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'po_box_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 3)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['room_number']) && (mb_strlen($this->container['room_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'room_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['street_name']) && (mb_strlen($this->container['street_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['street_prefix_name']) && (mb_strlen($this->container['street_prefix_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_prefix_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_suffix_name']) && (mb_strlen($this->container['street_suffix_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_suffix_name', the character length must be smaller than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_street_prefix_name
     *
     * @return string|null
     */
    public function getAdditionalStreetPrefixName()
    {
        return $this->container['additional_street_prefix_name'];
    }

    /**
     * Sets additional_street_prefix_name
     *
     * @param string|null $additional_street_prefix_name additional_street_prefix_name
     *
     * @return self
     */
    public function setAdditionalStreetPrefixName($additional_street_prefix_name)
    {
        if (is_null($additional_street_prefix_name)) {
            array_push($this->openAPINullablesSetToNull, 'additional_street_prefix_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_street_prefix_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_street_prefix_name) && (mb_strlen($additional_street_prefix_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $additional_street_prefix_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['additional_street_prefix_name'] = $additional_street_prefix_name;

        return $this;
    }

    /**
     * Gets additional_street_suffix_name
     *
     * @return string|null
     */
    public function getAdditionalStreetSuffixName()
    {
        return $this->container['additional_street_suffix_name'];
    }

    /**
     * Sets additional_street_suffix_name
     *
     * @param string|null $additional_street_suffix_name additional_street_suffix_name
     *
     * @return self
     */
    public function setAdditionalStreetSuffixName($additional_street_suffix_name)
    {
        if (is_null($additional_street_suffix_name)) {
            array_push($this->openAPINullablesSetToNull, 'additional_street_suffix_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_street_suffix_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_street_suffix_name) && (mb_strlen($additional_street_suffix_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $additional_street_suffix_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['additional_street_suffix_name'] = $additional_street_suffix_name;

        return $this;
    }

    /**
     * Gets address_time_zone
     *
     * @return string|null
     */
    public function getAddressTimeZone()
    {
        return $this->container['address_time_zone'];
    }

    /**
     * Sets address_time_zone
     *
     * @param string|null $address_time_zone address_time_zone
     *
     * @return self
     */
    public function setAddressTimeZone($address_time_zone)
    {
        if (is_null($address_time_zone)) {
            throw new \InvalidArgumentException('non-nullable address_time_zone cannot be null');
        }
        if ((mb_strlen($address_time_zone) > 6)) {
            throw new \InvalidArgumentException('invalid length for $address_time_zone when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['address_time_zone'] = $address_time_zone;

        return $this;
    }

    /**
     * Gets building
     *
     * @return string|null
     */
    public function getBuilding()
    {
        return $this->container['building'];
    }

    /**
     * Sets building
     *
     * @param string|null $building building
     *
     * @return self
     */
    public function setBuilding($building)
    {
        if (is_null($building)) {
            array_push($this->openAPINullablesSetToNull, 'building');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($building) && (mb_strlen($building) > 20)) {
            throw new \InvalidArgumentException('invalid length for $building when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 20.');
        }

        $this->container['building'] = $building;

        return $this;
    }

    /**
     * Gets business_partner_name1
     *
     * @return string|null
     */
    public function getBusinessPartnerName1()
    {
        return $this->container['business_partner_name1'];
    }

    /**
     * Sets business_partner_name1
     *
     * @param string|null $business_partner_name1 business_partner_name1
     *
     * @return self
     */
    public function setBusinessPartnerName1($business_partner_name1)
    {
        if (is_null($business_partner_name1)) {
            throw new \InvalidArgumentException('non-nullable business_partner_name1 cannot be null');
        }
        if ((mb_strlen($business_partner_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_name1 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['business_partner_name1'] = $business_partner_name1;

        return $this;
    }

    /**
     * Gets business_partner_name2
     *
     * @return string|null
     */
    public function getBusinessPartnerName2()
    {
        return $this->container['business_partner_name2'];
    }

    /**
     * Sets business_partner_name2
     *
     * @param string|null $business_partner_name2 business_partner_name2
     *
     * @return self
     */
    public function setBusinessPartnerName2($business_partner_name2)
    {
        if (is_null($business_partner_name2)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_name2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_name2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_name2) && (mb_strlen($business_partner_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_name2 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['business_partner_name2'] = $business_partner_name2;

        return $this;
    }

    /**
     * Gets business_partner_name3
     *
     * @return string|null
     */
    public function getBusinessPartnerName3()
    {
        return $this->container['business_partner_name3'];
    }

    /**
     * Sets business_partner_name3
     *
     * @param string|null $business_partner_name3 business_partner_name3
     *
     * @return self
     */
    public function setBusinessPartnerName3($business_partner_name3)
    {
        if (is_null($business_partner_name3)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_name3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_name3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_name3) && (mb_strlen($business_partner_name3) > 40)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_name3 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['business_partner_name3'] = $business_partner_name3;

        return $this;
    }

    /**
     * Gets business_partner_name4
     *
     * @return string|null
     */
    public function getBusinessPartnerName4()
    {
        return $this->container['business_partner_name4'];
    }

    /**
     * Sets business_partner_name4
     *
     * @param string|null $business_partner_name4 business_partner_name4
     *
     * @return self
     */
    public function setBusinessPartnerName4($business_partner_name4)
    {
        if (is_null($business_partner_name4)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_name4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_name4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_name4) && (mb_strlen($business_partner_name4) > 40)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_name4 when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['business_partner_name4'] = $business_partner_name4;

        return $this;
    }

    /**
     * Gets care_of_name
     *
     * @return string|null
     */
    public function getCareOfName()
    {
        return $this->container['care_of_name'];
    }

    /**
     * Sets care_of_name
     *
     * @param string|null $care_of_name care_of_name
     *
     * @return self
     */
    public function setCareOfName($care_of_name)
    {
        if (is_null($care_of_name)) {
            array_push($this->openAPINullablesSetToNull, 'care_of_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('care_of_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($care_of_name) && (mb_strlen($care_of_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $care_of_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['care_of_name'] = $care_of_name;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return string|null
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param string|null $city_name city_name
     *
     * @return self
     */
    public function setCityName($city_name)
    {
        if (is_null($city_name)) {
            throw new \InvalidArgumentException('non-nullable city_name cannot be null');
        }
        if ((mb_strlen($city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $city_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets company_postal_code
     *
     * @return string|null
     */
    public function getCompanyPostalCode()
    {
        return $this->container['company_postal_code'];
    }

    /**
     * Sets company_postal_code
     *
     * @param string|null $company_postal_code company_postal_code
     *
     * @return self
     */
    public function setCompanyPostalCode($company_postal_code)
    {
        if (is_null($company_postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'company_postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company_postal_code) && (mb_strlen($company_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $company_postal_code when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['company_postal_code'] = $company_postal_code;

        return $this;
    }

    /**
     * Gets correspondence_language
     *
     * @return string|null
     */
    public function getCorrespondenceLanguage()
    {
        return $this->container['correspondence_language'];
    }

    /**
     * Sets correspondence_language
     *
     * @param string|null $correspondence_language correspondence_language
     *
     * @return self
     */
    public function setCorrespondenceLanguage($correspondence_language)
    {
        if (is_null($correspondence_language)) {
            array_push($this->openAPINullablesSetToNull, 'correspondence_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('correspondence_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($correspondence_language) && (mb_strlen($correspondence_language) > 2)) {
            throw new \InvalidArgumentException('invalid length for $correspondence_language when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['correspondence_language'] = $correspondence_language;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county county
     *
     * @return self
     */
    public function setCounty($county)
    {
        if (is_null($county)) {
            array_push($this->openAPINullablesSetToNull, 'county');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('county', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($county) && (mb_strlen($county) > 40)) {
            throw new \InvalidArgumentException('invalid length for $county when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets district
     *
     * @return string|null
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param string|null $district district
     *
     * @return self
     */
    public function setDistrict($district)
    {
        if (is_null($district)) {
            array_push($this->openAPINullablesSetToNull, 'district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($district) && (mb_strlen($district) > 40)) {
            throw new \InvalidArgumentException('invalid length for $district when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address email_address
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            array_push($this->openAPINullablesSetToNull, 'email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email_address) && (mb_strlen($email_address) > 241)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 241.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string|null
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string|null $fax_number fax_number
     *
     * @return self
     */
    public function setFaxNumber($fax_number)
    {
        if (is_null($fax_number)) {
            array_push($this->openAPINullablesSetToNull, 'fax_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fax_number) && (mb_strlen($fax_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 30.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets fax_number_extension
     *
     * @return string|null
     */
    public function getFaxNumberExtension()
    {
        return $this->container['fax_number_extension'];
    }

    /**
     * Sets fax_number_extension
     *
     * @param string|null $fax_number_extension fax_number_extension
     *
     * @return self
     */
    public function setFaxNumberExtension($fax_number_extension)
    {
        if (is_null($fax_number_extension)) {
            array_push($this->openAPINullablesSetToNull, 'fax_number_extension');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_number_extension', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fax_number_extension) && (mb_strlen($fax_number_extension) > 10)) {
            throw new \InvalidArgumentException('invalid length for $fax_number_extension when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['fax_number_extension'] = $fax_number_extension;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return string|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param string|null $floor floor
     *
     * @return self
     */
    public function setFloor($floor)
    {
        if (is_null($floor)) {
            array_push($this->openAPINullablesSetToNull, 'floor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($floor) && (mb_strlen($floor) > 10)) {
            throw new \InvalidArgumentException('invalid length for $floor when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets home_city_name
     *
     * @return string|null
     */
    public function getHomeCityName()
    {
        return $this->container['home_city_name'];
    }

    /**
     * Sets home_city_name
     *
     * @param string|null $home_city_name home_city_name
     *
     * @return self
     */
    public function setHomeCityName($home_city_name)
    {
        if (is_null($home_city_name)) {
            array_push($this->openAPINullablesSetToNull, 'home_city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($home_city_name) && (mb_strlen($home_city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $home_city_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['home_city_name'] = $home_city_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string|null $house_number house_number
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        if (is_null($house_number)) {
            array_push($this->openAPINullablesSetToNull, 'house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($house_number) && (mb_strlen($house_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_supplement_text
     *
     * @return string|null
     */
    public function getHouseNumberSupplementText()
    {
        return $this->container['house_number_supplement_text'];
    }

    /**
     * Sets house_number_supplement_text
     *
     * @param string|null $house_number_supplement_text house_number_supplement_text
     *
     * @return self
     */
    public function setHouseNumberSupplementText($house_number_supplement_text)
    {
        if (is_null($house_number_supplement_text)) {
            array_push($this->openAPINullablesSetToNull, 'house_number_supplement_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number_supplement_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($house_number_supplement_text) && (mb_strlen($house_number_supplement_text) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number_supplement_text when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['house_number_supplement_text'] = $house_number_supplement_text;

        return $this;
    }

    /**
     * Gets mobile_phone_number
     *
     * @return string|null
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobile_phone_number'];
    }

    /**
     * Sets mobile_phone_number
     *
     * @param string|null $mobile_phone_number mobile_phone_number
     *
     * @return self
     */
    public function setMobilePhoneNumber($mobile_phone_number)
    {
        if (is_null($mobile_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'mobile_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobile_phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($mobile_phone_number) && (mb_strlen($mobile_phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone_number when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 30.');
        }

        $this->container['mobile_phone_number'] = $mobile_phone_number;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 30.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets phone_number_extension
     *
     * @return string|null
     */
    public function getPhoneNumberExtension()
    {
        return $this->container['phone_number_extension'];
    }

    /**
     * Sets phone_number_extension
     *
     * @param string|null $phone_number_extension phone_number_extension
     *
     * @return self
     */
    public function setPhoneNumberExtension($phone_number_extension)
    {
        if (is_null($phone_number_extension)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number_extension');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number_extension', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_number_extension) && (mb_strlen($phone_number_extension) > 10)) {
            throw new \InvalidArgumentException('invalid length for $phone_number_extension when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['phone_number_extension'] = $phone_number_extension;

        return $this;
    }

    /**
     * Gets po_box
     *
     * @return string|null
     */
    public function getPoBox()
    {
        return $this->container['po_box'];
    }

    /**
     * Sets po_box
     *
     * @param string|null $po_box po_box
     *
     * @return self
     */
    public function setPoBox($po_box)
    {
        if (is_null($po_box)) {
            array_push($this->openAPINullablesSetToNull, 'po_box');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box) && (mb_strlen($po_box) > 10)) {
            throw new \InvalidArgumentException('invalid length for $po_box when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['po_box'] = $po_box;

        return $this;
    }

    /**
     * Gets po_box_deviating_city_name
     *
     * @return string|null
     */
    public function getPoBoxDeviatingCityName()
    {
        return $this->container['po_box_deviating_city_name'];
    }

    /**
     * Sets po_box_deviating_city_name
     *
     * @param string|null $po_box_deviating_city_name po_box_deviating_city_name
     *
     * @return self
     */
    public function setPoBoxDeviatingCityName($po_box_deviating_city_name)
    {
        if (is_null($po_box_deviating_city_name)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_deviating_city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_deviating_city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_deviating_city_name) && (mb_strlen($po_box_deviating_city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $po_box_deviating_city_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['po_box_deviating_city_name'] = $po_box_deviating_city_name;

        return $this;
    }

    /**
     * Gets po_box_deviating_region
     *
     * @return string|null
     */
    public function getPoBoxDeviatingRegion()
    {
        return $this->container['po_box_deviating_region'];
    }

    /**
     * Sets po_box_deviating_region
     *
     * @param string|null $po_box_deviating_region po_box_deviating_region
     *
     * @return self
     */
    public function setPoBoxDeviatingRegion($po_box_deviating_region)
    {
        if (is_null($po_box_deviating_region)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_deviating_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_deviating_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_deviating_region) && (mb_strlen($po_box_deviating_region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $po_box_deviating_region when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['po_box_deviating_region'] = $po_box_deviating_region;

        return $this;
    }

    /**
     * Gets po_box_is_without_number
     *
     * @return bool|null
     */
    public function getPoBoxIsWithoutNumber()
    {
        return $this->container['po_box_is_without_number'];
    }

    /**
     * Sets po_box_is_without_number
     *
     * @param bool|null $po_box_is_without_number po_box_is_without_number
     *
     * @return self
     */
    public function setPoBoxIsWithoutNumber($po_box_is_without_number)
    {
        if (is_null($po_box_is_without_number)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_is_without_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_is_without_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['po_box_is_without_number'] = $po_box_is_without_number;

        return $this;
    }

    /**
     * Gets po_box_lobby_name
     *
     * @return string|null
     */
    public function getPoBoxLobbyName()
    {
        return $this->container['po_box_lobby_name'];
    }

    /**
     * Sets po_box_lobby_name
     *
     * @param string|null $po_box_lobby_name po_box_lobby_name
     *
     * @return self
     */
    public function setPoBoxLobbyName($po_box_lobby_name)
    {
        if (is_null($po_box_lobby_name)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_lobby_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_lobby_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_lobby_name) && (mb_strlen($po_box_lobby_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $po_box_lobby_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['po_box_lobby_name'] = $po_box_lobby_name;

        return $this;
    }

    /**
     * Gets po_box_postal_code
     *
     * @return string|null
     */
    public function getPoBoxPostalCode()
    {
        return $this->container['po_box_postal_code'];
    }

    /**
     * Sets po_box_postal_code
     *
     * @param string|null $po_box_postal_code po_box_postal_code
     *
     * @return self
     */
    public function setPoBoxPostalCode($po_box_postal_code)
    {
        if (is_null($po_box_postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_postal_code) && (mb_strlen($po_box_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $po_box_postal_code when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['po_box_postal_code'] = $po_box_postal_code;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($region) && (mb_strlen($region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $region when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets room_number
     *
     * @return string|null
     */
    public function getRoomNumber()
    {
        return $this->container['room_number'];
    }

    /**
     * Sets room_number
     *
     * @param string|null $room_number room_number
     *
     * @return self
     */
    public function setRoomNumber($room_number)
    {
        if (is_null($room_number)) {
            array_push($this->openAPINullablesSetToNull, 'room_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($room_number) && (mb_strlen($room_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $room_number when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['room_number'] = $room_number;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_name) && (mb_strlen($street_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 60.');
        }

        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_prefix_name
     *
     * @return string|null
     */
    public function getStreetPrefixName()
    {
        return $this->container['street_prefix_name'];
    }

    /**
     * Sets street_prefix_name
     *
     * @param string|null $street_prefix_name street_prefix_name
     *
     * @return self
     */
    public function setStreetPrefixName($street_prefix_name)
    {
        if (is_null($street_prefix_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_prefix_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_prefix_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_prefix_name) && (mb_strlen($street_prefix_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_prefix_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_prefix_name'] = $street_prefix_name;

        return $this;
    }

    /**
     * Gets street_suffix_name
     *
     * @return string|null
     */
    public function getStreetSuffixName()
    {
        return $this->container['street_suffix_name'];
    }

    /**
     * Sets street_suffix_name
     *
     * @param string|null $street_suffix_name street_suffix_name
     *
     * @return self
     */
    public function setStreetSuffixName($street_suffix_name)
    {
        if (is_null($street_suffix_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_suffix_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_suffix_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_suffix_name) && (mb_strlen($street_suffix_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_suffix_name when calling APIOUTBOUNDDELIVERYSRVAOutbDeliveryAddress2TypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_suffix_name'] = $street_suffix_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


