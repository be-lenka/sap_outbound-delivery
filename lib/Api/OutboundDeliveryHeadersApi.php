<?php
/**
 * OutboundDeliveryHeadersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\OutboundDelivery\ApiException;
use BeLenka\SAP\OutboundDelivery\Configuration;
use BeLenka\SAP\OutboundDelivery\HeaderSelector;
use BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * OutboundDeliveryHeadersApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OutboundDeliveryHeadersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aOutbDeliveryHeaderDeliveryDocumentDelete' => [
            'application/json',
        ],
        'aOutbDeliveryHeaderDeliveryDocumentGet' => [
            'application/json',
        ],
        'aOutbDeliveryHeaderDeliveryDocumentPatch' => [
            'application/json',
        ],
        'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet' => [
            'application/json',
        ],
        'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet' => [
            'application/json',
        ],
        'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet' => [
            'application/json',
        ],
        'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost' => [
            'application/json',
        ],
        'aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet' => [
            'application/json',
        ],
        'aOutbDeliveryHeaderGet' => [
            'application/json',
        ],
        'aOutbDeliveryHeaderPost' => [
            'application/json',
        ],
        'addSerialNumberToDeliveryItemPost' => [
            'application/json',
        ],
        'assignHandlingUnitToDeliveryPost' => [
            'application/json',
        ],
        'confirmPickingAllItemsPost' => [
            'application/json',
        ],
        'confirmPickingOneItemPost' => [
            'application/json',
        ],
        'deleteAllHandlingUnitsFromDeliveryPost' => [
            'application/json',
        ],
        'deleteAllSerialNumbersFromDeliveryItemPost' => [
            'application/json',
        ],
        'deleteSerialNumberFromDeliveryItemPost' => [
            'application/json',
        ],
        'pickAllItemsPost' => [
            'application/json',
        ],
        'pickAndBatchSplitOneItemPost' => [
            'application/json',
        ],
        'pickOneItemPost' => [
            'application/json',
        ],
        'pickOneItemWithBaseQuantityPost' => [
            'application/json',
        ],
        'pickOneItemWithSalesQuantityPost' => [
            'application/json',
        ],
        'postGoodsIssuePost' => [
            'application/json',
        ],
        'reverseGoodsIssuePost' => [
            'application/json',
        ],
        'setPickingQuantityWithBaseQuantityPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentDelete
     *
     * Deletes outbound deliveries.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aOutbDeliveryHeaderDeliveryDocumentDelete($delivery_document, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'][0])
    {
        $this->aOutbDeliveryHeaderDeliveryDocumentDeleteWithHttpInfo($delivery_document, $contentType);
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentDeleteWithHttpInfo
     *
     * Deletes outbound deliveries.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderDeliveryDocumentDeleteWithHttpInfo($delivery_document, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'][0])
    {
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentDeleteRequest($delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentDeleteAsync
     *
     * Deletes outbound deliveries.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentDeleteAsync($delivery_document, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'][0])
    {
        return $this->aOutbDeliveryHeaderDeliveryDocumentDeleteAsyncWithHttpInfo($delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentDeleteAsyncWithHttpInfo
     *
     * Deletes outbound deliveries.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentDeleteAsyncWithHttpInfo($delivery_document, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'][0])
    {
        $returnType = '';
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentDeleteRequest($delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderDeliveryDocumentDelete'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderDeliveryDocumentDeleteRequest($delivery_document, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentDelete'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryHeaderDeliveryDocumentDelete'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentDelete, must be smaller than or equal to 10.');
        }
        

        $resourcePath = '/A_OutbDeliveryHeader(\'{DeliveryDocument}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentGet
     *
     * Reads outbound delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryHeaderDeliveryDocumentGet($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'][0])
    {
        list($response) = $this->aOutbDeliveryHeaderDeliveryDocumentGetWithHttpInfo($delivery_document, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentGetWithHttpInfo
     *
     * Reads outbound delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderDeliveryDocumentGetWithHttpInfo($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'][0])
    {
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentGetRequest($delivery_document, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentGetAsync
     *
     * Reads outbound delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentGetAsync($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'][0])
    {
        return $this->aOutbDeliveryHeaderDeliveryDocumentGetAsyncWithHttpInfo($delivery_document, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentGetAsyncWithHttpInfo
     *
     * Reads outbound delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentGetAsyncWithHttpInfo($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType';
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentGetRequest($delivery_document, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderDeliveryDocumentGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderDeliveryDocumentGetRequest($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryHeaderDeliveryDocumentGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/A_OutbDeliveryHeader(\'{DeliveryDocument}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentPatch
     *
     * Updates outbound delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryHeaderType $modified_a_outb_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aOutbDeliveryHeaderDeliveryDocumentPatch($delivery_document, $modified_a_outb_delivery_header_type, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'][0])
    {
        $this->aOutbDeliveryHeaderDeliveryDocumentPatchWithHttpInfo($delivery_document, $modified_a_outb_delivery_header_type, $contentType);
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentPatchWithHttpInfo
     *
     * Updates outbound delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryHeaderType $modified_a_outb_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderDeliveryDocumentPatchWithHttpInfo($delivery_document, $modified_a_outb_delivery_header_type, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'][0])
    {
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentPatchRequest($delivery_document, $modified_a_outb_delivery_header_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentPatchAsync
     *
     * Updates outbound delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryHeaderType $modified_a_outb_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentPatchAsync($delivery_document, $modified_a_outb_delivery_header_type, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'][0])
    {
        return $this->aOutbDeliveryHeaderDeliveryDocumentPatchAsyncWithHttpInfo($delivery_document, $modified_a_outb_delivery_header_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentPatchAsyncWithHttpInfo
     *
     * Updates outbound delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryHeaderType $modified_a_outb_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentPatchAsyncWithHttpInfo($delivery_document, $modified_a_outb_delivery_header_type, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'][0])
    {
        $returnType = '';
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentPatchRequest($delivery_document, $modified_a_outb_delivery_header_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderDeliveryDocumentPatch'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryHeaderType $modified_a_outb_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderDeliveryDocumentPatchRequest($delivery_document, $modified_a_outb_delivery_header_type, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentPatch'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryHeaderDeliveryDocumentPatch'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'modified_a_outb_delivery_header_type' is set
        if ($modified_a_outb_delivery_header_type === null || (is_array($modified_a_outb_delivery_header_type) && count($modified_a_outb_delivery_header_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_outb_delivery_header_type when calling aOutbDeliveryHeaderDeliveryDocumentPatch'
            );
        }


        $resourcePath = '/A_OutbDeliveryHeader(\'{DeliveryDocument}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_outb_delivery_header_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_outb_delivery_header_type));
            } else {
                $httpBody = $modified_a_outb_delivery_header_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet
     *
     * Reads items of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper1|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        list($response) = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetWithHttpInfo($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetWithHttpInfo
     *
     * Reads items of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper1|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetWithHttpInfo($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetRequest($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsync
     *
     * Reads items of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsync($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        return $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsyncWithHttpInfo($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsyncWithHttpInfo
     *
     * Reads items of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsyncWithHttpInfo($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1';
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetRequest($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetRequest($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet, must be bigger than or equal to 0.');
        }
        



        
        
        

        $resourcePath = '/A_OutbDeliveryHeader(\'{DeliveryDocument}\')/to_DeliveryDocumentItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet
     *
     * Reads partners of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper7|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {
        list($response) = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetWithHttpInfo($delivery_document, $filter, $inlinecount, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetWithHttpInfo
     *
     * Reads partners of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper7|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetWithHttpInfo($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetRequest($delivery_document, $filter, $inlinecount, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper7' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper7' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper7', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper7';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper7',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsync
     *
     * Reads partners of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsync($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {
        return $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsyncWithHttpInfo($delivery_document, $filter, $inlinecount, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsyncWithHttpInfo
     *
     * Reads partners of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsyncWithHttpInfo($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper7';
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetRequest($delivery_document, $filter, $inlinecount, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetRequest($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet, must be smaller than or equal to 10.');
        }
        


        
        

        $resourcePath = '/A_OutbDeliveryHeader(\'{DeliveryDocument}\')/to_DeliveryDocumentPartner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet
     *
     * Reads texts of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper5|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet($delivery_document, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'][0])
    {
        list($response) = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetWithHttpInfo($delivery_document, $filter, $inlinecount, $select, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetWithHttpInfo
     *
     * Reads texts of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper5|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetWithHttpInfo($delivery_document, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'][0])
    {
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetRequest($delivery_document, $filter, $inlinecount, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper5' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper5' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper5', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper5';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper5',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetAsync
     *
     * Reads texts of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetAsync($delivery_document, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'][0])
    {
        return $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetAsyncWithHttpInfo($delivery_document, $filter, $inlinecount, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetAsyncWithHttpInfo
     *
     * Reads texts of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetAsyncWithHttpInfo($delivery_document, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper5';
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetRequest($delivery_document, $filter, $inlinecount, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGetRequest($delivery_document, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextGet, must be smaller than or equal to 10.');
        }
        


        

        $resourcePath = '/A_OutbDeliveryHeader(\'{DeliveryDocument}\')/to_DeliveryDocumentText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost
     *
     * Creates outbound delivery header texts.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTextTypeCreate $apioutbounddeliverysrva_outb_delivery_header_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderTextType|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost($delivery_document, $apioutbounddeliverysrva_outb_delivery_header_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'][0])
    {
        list($response) = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostWithHttpInfo($delivery_document, $apioutbounddeliverysrva_outb_delivery_header_text_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostWithHttpInfo
     *
     * Creates outbound delivery header texts.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTextTypeCreate $apioutbounddeliverysrva_outb_delivery_header_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderTextType|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostWithHttpInfo($delivery_document, $apioutbounddeliverysrva_outb_delivery_header_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'][0])
    {
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostRequest($delivery_document, $apioutbounddeliverysrva_outb_delivery_header_text_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostAsync
     *
     * Creates outbound delivery header texts.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTextTypeCreate $apioutbounddeliverysrva_outb_delivery_header_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostAsync($delivery_document, $apioutbounddeliverysrva_outb_delivery_header_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'][0])
    {
        return $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostAsyncWithHttpInfo($delivery_document, $apioutbounddeliverysrva_outb_delivery_header_text_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostAsyncWithHttpInfo
     *
     * Creates outbound delivery header texts.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTextTypeCreate $apioutbounddeliverysrva_outb_delivery_header_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostAsyncWithHttpInfo($delivery_document, $apioutbounddeliverysrva_outb_delivery_header_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderTextType';
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostRequest($delivery_document, $apioutbounddeliverysrva_outb_delivery_header_text_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTextTypeCreate $apioutbounddeliverysrva_outb_delivery_header_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPostRequest($delivery_document, $apioutbounddeliverysrva_outb_delivery_header_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apioutbounddeliverysrva_outb_delivery_header_text_type_create' is set
        if ($apioutbounddeliverysrva_outb_delivery_header_text_type_create === null || (is_array($apioutbounddeliverysrva_outb_delivery_header_text_type_create) && count($apioutbounddeliverysrva_outb_delivery_header_text_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apioutbounddeliverysrva_outb_delivery_header_text_type_create when calling aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentTextPost'
            );
        }


        $resourcePath = '/A_OutbDeliveryHeader(\'{DeliveryDocument}\')/to_DeliveryDocumentText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apioutbounddeliverysrva_outb_delivery_header_text_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apioutbounddeliverysrva_outb_delivery_header_text_type_create));
            } else {
                $httpBody = $apioutbounddeliverysrva_outb_delivery_header_text_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet
     *
     * Reads handling units headers of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper6|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet($delivery_document, $search = null, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'][0])
    {
        list($response) = $this->aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetWithHttpInfo($delivery_document, $search, $filter, $inlinecount, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetWithHttpInfo
     *
     * Reads handling units headers of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper6|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetWithHttpInfo($delivery_document, $search = null, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'][0])
    {
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetRequest($delivery_document, $search, $filter, $inlinecount, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper6' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetAsync
     *
     * Reads handling units headers of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetAsync($delivery_document, $search = null, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'][0])
    {
        return $this->aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetAsyncWithHttpInfo($delivery_document, $search, $filter, $inlinecount, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetAsyncWithHttpInfo
     *
     * Reads handling units headers of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetAsyncWithHttpInfo($delivery_document, $search = null, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper6';
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetRequest($delivery_document, $search, $filter, $inlinecount, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGetRequest($delivery_document, $search = null, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderDeliveryDocumentToHandlingUnitHeaderDeliveryGet, must be smaller than or equal to 10.');
        }
        



        
        

        $resourcePath = '/A_OutbDeliveryHeader(\'{DeliveryDocument}\')/to_HandlingUnitHeaderDelivery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryHeaderGet
     *
     * Reads outbound delivery headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper4|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryHeaderGet($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderGet'][0])
    {
        list($response) = $this->aOutbDeliveryHeaderGetWithHttpInfo($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryHeaderGetWithHttpInfo
     *
     * Reads outbound delivery headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper4|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderGetWithHttpInfo($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderGet'][0])
    {
        $request = $this->aOutbDeliveryHeaderGetRequest($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper4' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper4' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper4', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper4';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderGetAsync
     *
     * Reads outbound delivery headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderGetAsync($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderGet'][0])
    {
        return $this->aOutbDeliveryHeaderGetAsyncWithHttpInfo($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderGetAsyncWithHttpInfo
     *
     * Reads outbound delivery headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderGetAsyncWithHttpInfo($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper4';
        $request = $this->aOutbDeliveryHeaderGetRequest($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderGetRequest($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling OutboundDeliveryHeadersApi.aOutbDeliveryHeaderGet, must be bigger than or equal to 0.');
        }
        



        
        
        

        $resourcePath = '/A_OutbDeliveryHeader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryHeaderPost
     *
     * Creates outbound deliveries with reference to preceding document.
     *
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeCreate $apioutbounddeliverysrva_outb_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryHeaderPost($apioutbounddeliverysrva_outb_delivery_header_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderPost'][0])
    {
        list($response) = $this->aOutbDeliveryHeaderPostWithHttpInfo($apioutbounddeliverysrva_outb_delivery_header_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryHeaderPostWithHttpInfo
     *
     * Creates outbound deliveries with reference to preceding document.
     *
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeCreate $apioutbounddeliverysrva_outb_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderPostWithHttpInfo($apioutbounddeliverysrva_outb_delivery_header_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderPost'][0])
    {
        $request = $this->aOutbDeliveryHeaderPostRequest($apioutbounddeliverysrva_outb_delivery_header_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderPostAsync
     *
     * Creates outbound deliveries with reference to preceding document.
     *
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeCreate $apioutbounddeliverysrva_outb_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderPostAsync($apioutbounddeliverysrva_outb_delivery_header_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderPost'][0])
    {
        return $this->aOutbDeliveryHeaderPostAsyncWithHttpInfo($apioutbounddeliverysrva_outb_delivery_header_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderPostAsyncWithHttpInfo
     *
     * Creates outbound deliveries with reference to preceding document.
     *
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeCreate $apioutbounddeliverysrva_outb_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderPostAsyncWithHttpInfo($apioutbounddeliverysrva_outb_delivery_header_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryHeaderType';
        $request = $this->aOutbDeliveryHeaderPostRequest($apioutbounddeliverysrva_outb_delivery_header_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderPost'
     *
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryHeaderTypeCreate $apioutbounddeliverysrva_outb_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderPostRequest($apioutbounddeliverysrva_outb_delivery_header_type_create, string $contentType = self::contentTypes['aOutbDeliveryHeaderPost'][0])
    {

        // verify the required parameter 'apioutbounddeliverysrva_outb_delivery_header_type_create' is set
        if ($apioutbounddeliverysrva_outb_delivery_header_type_create === null || (is_array($apioutbounddeliverysrva_outb_delivery_header_type_create) && count($apioutbounddeliverysrva_outb_delivery_header_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apioutbounddeliverysrva_outb_delivery_header_type_create when calling aOutbDeliveryHeaderPost'
            );
        }


        $resourcePath = '/A_OutbDeliveryHeader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apioutbounddeliverysrva_outb_delivery_header_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apioutbounddeliverysrva_outb_delivery_header_type_create));
            } else {
                $httpBody = $apioutbounddeliverysrva_outb_delivery_header_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addSerialNumberToDeliveryItemPost
     *
     * Adds serial number to outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSerialNumberToDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function addSerialNumberToDeliveryItemPost($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['addSerialNumberToDeliveryItemPost'][0])
    {
        list($response) = $this->addSerialNumberToDeliveryItemPostWithHttpInfo($delivery_document, $delivery_document_item, $serial_number, $contentType);
        return $response;
    }

    /**
     * Operation addSerialNumberToDeliveryItemPostWithHttpInfo
     *
     * Adds serial number to outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSerialNumberToDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function addSerialNumberToDeliveryItemPostWithHttpInfo($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['addSerialNumberToDeliveryItemPost'][0])
    {
        $request = $this->addSerialNumberToDeliveryItemPostRequest($delivery_document, $delivery_document_item, $serial_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation addSerialNumberToDeliveryItemPostAsync
     *
     * Adds serial number to outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSerialNumberToDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSerialNumberToDeliveryItemPostAsync($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['addSerialNumberToDeliveryItemPost'][0])
    {
        return $this->addSerialNumberToDeliveryItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $serial_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addSerialNumberToDeliveryItemPostAsyncWithHttpInfo
     *
     * Adds serial number to outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSerialNumberToDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSerialNumberToDeliveryItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['addSerialNumberToDeliveryItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->addSerialNumberToDeliveryItemPostRequest($delivery_document, $delivery_document_item, $serial_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addSerialNumberToDeliveryItemPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSerialNumberToDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addSerialNumberToDeliveryItemPostRequest($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['addSerialNumberToDeliveryItemPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling addSerialNumberToDeliveryItemPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.addSerialNumberToDeliveryItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.addSerialNumberToDeliveryItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling addSerialNumberToDeliveryItemPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryHeadersApi.addSerialNumberToDeliveryItemPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryHeadersApi.addSerialNumberToDeliveryItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null || (is_array($serial_number) && count($serial_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling addSerialNumberToDeliveryItemPost'
            );
        }
        if (strlen($serial_number) > 20) {
            throw new \InvalidArgumentException('invalid length for "$serial_number" when calling OutboundDeliveryHeadersApi.addSerialNumberToDeliveryItemPost, must be smaller than or equal to 20.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $serial_number)) {
            throw new \InvalidArgumentException("invalid value for \"serial_number\" when calling OutboundDeliveryHeadersApi.addSerialNumberToDeliveryItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/AddSerialNumberToDeliveryItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serial_number,
            'SerialNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignHandlingUnitToDeliveryPost
     *
     * Invoke action AssignHandlingUnitToDelivery
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $handling_unit_external_id Handling Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignHandlingUnitToDeliveryPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\HuReturn1|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function assignHandlingUnitToDeliveryPost($delivery_document, $handling_unit_external_id, string $contentType = self::contentTypes['assignHandlingUnitToDeliveryPost'][0])
    {
        list($response) = $this->assignHandlingUnitToDeliveryPostWithHttpInfo($delivery_document, $handling_unit_external_id, $contentType);
        return $response;
    }

    /**
     * Operation assignHandlingUnitToDeliveryPostWithHttpInfo
     *
     * Invoke action AssignHandlingUnitToDelivery
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $handling_unit_external_id Handling Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignHandlingUnitToDeliveryPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\HuReturn1|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignHandlingUnitToDeliveryPostWithHttpInfo($delivery_document, $handling_unit_external_id, string $contentType = self::contentTypes['assignHandlingUnitToDeliveryPost'][0])
    {
        $request = $this->assignHandlingUnitToDeliveryPostRequest($delivery_document, $handling_unit_external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\HuReturn1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\HuReturn1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\HuReturn1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\HuReturn1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\HuReturn1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation assignHandlingUnitToDeliveryPostAsync
     *
     * Invoke action AssignHandlingUnitToDelivery
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $handling_unit_external_id Handling Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignHandlingUnitToDeliveryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignHandlingUnitToDeliveryPostAsync($delivery_document, $handling_unit_external_id, string $contentType = self::contentTypes['assignHandlingUnitToDeliveryPost'][0])
    {
        return $this->assignHandlingUnitToDeliveryPostAsyncWithHttpInfo($delivery_document, $handling_unit_external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignHandlingUnitToDeliveryPostAsyncWithHttpInfo
     *
     * Invoke action AssignHandlingUnitToDelivery
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $handling_unit_external_id Handling Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignHandlingUnitToDeliveryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignHandlingUnitToDeliveryPostAsyncWithHttpInfo($delivery_document, $handling_unit_external_id, string $contentType = self::contentTypes['assignHandlingUnitToDeliveryPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\HuReturn1';
        $request = $this->assignHandlingUnitToDeliveryPostRequest($delivery_document, $handling_unit_external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignHandlingUnitToDeliveryPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $handling_unit_external_id Handling Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignHandlingUnitToDeliveryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignHandlingUnitToDeliveryPostRequest($delivery_document, $handling_unit_external_id, string $contentType = self::contentTypes['assignHandlingUnitToDeliveryPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling assignHandlingUnitToDeliveryPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.assignHandlingUnitToDeliveryPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.assignHandlingUnitToDeliveryPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'handling_unit_external_id' is set
        if ($handling_unit_external_id === null || (is_array($handling_unit_external_id) && count($handling_unit_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $handling_unit_external_id when calling assignHandlingUnitToDeliveryPost'
            );
        }
        if (strlen($handling_unit_external_id) > 22) {
            throw new \InvalidArgumentException('invalid length for "$handling_unit_external_id" when calling OutboundDeliveryHeadersApi.assignHandlingUnitToDeliveryPost, must be smaller than or equal to 22.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $handling_unit_external_id)) {
            throw new \InvalidArgumentException("invalid value for \"handling_unit_external_id\" when calling OutboundDeliveryHeadersApi.assignHandlingUnitToDeliveryPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/AssignHandlingUnitToDelivery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handling_unit_external_id,
            'HandlingUnitExternalId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPickingAllItemsPost
     *
     * Confirms picked quantity of outbound delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingAllItemsPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function confirmPickingAllItemsPost($delivery_document, string $contentType = self::contentTypes['confirmPickingAllItemsPost'][0])
    {
        list($response) = $this->confirmPickingAllItemsPostWithHttpInfo($delivery_document, $contentType);
        return $response;
    }

    /**
     * Operation confirmPickingAllItemsPostWithHttpInfo
     *
     * Confirms picked quantity of outbound delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingAllItemsPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmPickingAllItemsPostWithHttpInfo($delivery_document, string $contentType = self::contentTypes['confirmPickingAllItemsPost'][0])
    {
        $request = $this->confirmPickingAllItemsPostRequest($delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation confirmPickingAllItemsPostAsync
     *
     * Confirms picked quantity of outbound delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPickingAllItemsPostAsync($delivery_document, string $contentType = self::contentTypes['confirmPickingAllItemsPost'][0])
    {
        return $this->confirmPickingAllItemsPostAsyncWithHttpInfo($delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPickingAllItemsPostAsyncWithHttpInfo
     *
     * Confirms picked quantity of outbound delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPickingAllItemsPostAsyncWithHttpInfo($delivery_document, string $contentType = self::contentTypes['confirmPickingAllItemsPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->confirmPickingAllItemsPostRequest($delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPickingAllItemsPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function confirmPickingAllItemsPostRequest($delivery_document, string $contentType = self::contentTypes['confirmPickingAllItemsPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling confirmPickingAllItemsPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.confirmPickingAllItemsPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.confirmPickingAllItemsPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/ConfirmPickingAllItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPickingOneItemPost
     *
     * Confirms picked quantity of outbound delivery item.
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function confirmPickingOneItemPost($delivery_document_item, $delivery_document, string $contentType = self::contentTypes['confirmPickingOneItemPost'][0])
    {
        list($response) = $this->confirmPickingOneItemPostWithHttpInfo($delivery_document_item, $delivery_document, $contentType);
        return $response;
    }

    /**
     * Operation confirmPickingOneItemPostWithHttpInfo
     *
     * Confirms picked quantity of outbound delivery item.
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmPickingOneItemPostWithHttpInfo($delivery_document_item, $delivery_document, string $contentType = self::contentTypes['confirmPickingOneItemPost'][0])
    {
        $request = $this->confirmPickingOneItemPostRequest($delivery_document_item, $delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation confirmPickingOneItemPostAsync
     *
     * Confirms picked quantity of outbound delivery item.
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPickingOneItemPostAsync($delivery_document_item, $delivery_document, string $contentType = self::contentTypes['confirmPickingOneItemPost'][0])
    {
        return $this->confirmPickingOneItemPostAsyncWithHttpInfo($delivery_document_item, $delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPickingOneItemPostAsyncWithHttpInfo
     *
     * Confirms picked quantity of outbound delivery item.
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPickingOneItemPostAsyncWithHttpInfo($delivery_document_item, $delivery_document, string $contentType = self::contentTypes['confirmPickingOneItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->confirmPickingOneItemPostRequest($delivery_document_item, $delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPickingOneItemPost'
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPickingOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function confirmPickingOneItemPostRequest($delivery_document_item, $delivery_document, string $contentType = self::contentTypes['confirmPickingOneItemPost'][0])
    {

        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling confirmPickingOneItemPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryHeadersApi.confirmPickingOneItemPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryHeadersApi.confirmPickingOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling confirmPickingOneItemPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.confirmPickingOneItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.confirmPickingOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/ConfirmPickingOneItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllHandlingUnitsFromDeliveryPost
     *
     * Deletes all handling units from outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\HuReturn|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function deleteAllHandlingUnitsFromDeliveryPost($delivery_document, string $contentType = self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'][0])
    {
        list($response) = $this->deleteAllHandlingUnitsFromDeliveryPostWithHttpInfo($delivery_document, $contentType);
        return $response;
    }

    /**
     * Operation deleteAllHandlingUnitsFromDeliveryPostWithHttpInfo
     *
     * Deletes all handling units from outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\HuReturn|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllHandlingUnitsFromDeliveryPostWithHttpInfo($delivery_document, string $contentType = self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'][0])
    {
        $request = $this->deleteAllHandlingUnitsFromDeliveryPostRequest($delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\HuReturn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\HuReturn' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\HuReturn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\HuReturn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\HuReturn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllHandlingUnitsFromDeliveryPostAsync
     *
     * Deletes all handling units from outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllHandlingUnitsFromDeliveryPostAsync($delivery_document, string $contentType = self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'][0])
    {
        return $this->deleteAllHandlingUnitsFromDeliveryPostAsyncWithHttpInfo($delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllHandlingUnitsFromDeliveryPostAsyncWithHttpInfo
     *
     * Deletes all handling units from outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllHandlingUnitsFromDeliveryPostAsyncWithHttpInfo($delivery_document, string $contentType = self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\HuReturn';
        $request = $this->deleteAllHandlingUnitsFromDeliveryPostRequest($delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllHandlingUnitsFromDeliveryPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAllHandlingUnitsFromDeliveryPostRequest($delivery_document, string $contentType = self::contentTypes['deleteAllHandlingUnitsFromDeliveryPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling deleteAllHandlingUnitsFromDeliveryPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.deleteAllHandlingUnitsFromDeliveryPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.deleteAllHandlingUnitsFromDeliveryPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/DeleteAllHandlingUnitsFromDelivery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllSerialNumbersFromDeliveryItemPost
     *
     * Deletes all serial numbers from outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function deleteAllSerialNumbersFromDeliveryItemPost($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'][0])
    {
        list($response) = $this->deleteAllSerialNumbersFromDeliveryItemPostWithHttpInfo($delivery_document, $delivery_document_item, $contentType);
        return $response;
    }

    /**
     * Operation deleteAllSerialNumbersFromDeliveryItemPostWithHttpInfo
     *
     * Deletes all serial numbers from outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllSerialNumbersFromDeliveryItemPostWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'][0])
    {
        $request = $this->deleteAllSerialNumbersFromDeliveryItemPostRequest($delivery_document, $delivery_document_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllSerialNumbersFromDeliveryItemPostAsync
     *
     * Deletes all serial numbers from outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllSerialNumbersFromDeliveryItemPostAsync($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'][0])
    {
        return $this->deleteAllSerialNumbersFromDeliveryItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllSerialNumbersFromDeliveryItemPostAsyncWithHttpInfo
     *
     * Deletes all serial numbers from outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllSerialNumbersFromDeliveryItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->deleteAllSerialNumbersFromDeliveryItemPostRequest($delivery_document, $delivery_document_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllSerialNumbersFromDeliveryItemPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAllSerialNumbersFromDeliveryItemPostRequest($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['deleteAllSerialNumbersFromDeliveryItemPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling deleteAllSerialNumbersFromDeliveryItemPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.deleteAllSerialNumbersFromDeliveryItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.deleteAllSerialNumbersFromDeliveryItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling deleteAllSerialNumbersFromDeliveryItemPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryHeadersApi.deleteAllSerialNumbersFromDeliveryItemPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryHeadersApi.deleteAllSerialNumbersFromDeliveryItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/DeleteAllSerialNumbersFromDeliveryItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSerialNumberFromDeliveryItemPost
     *
     * Deletes serial number from outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSerialNumberFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function deleteSerialNumberFromDeliveryItemPost($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['deleteSerialNumberFromDeliveryItemPost'][0])
    {
        list($response) = $this->deleteSerialNumberFromDeliveryItemPostWithHttpInfo($delivery_document, $delivery_document_item, $serial_number, $contentType);
        return $response;
    }

    /**
     * Operation deleteSerialNumberFromDeliveryItemPostWithHttpInfo
     *
     * Deletes serial number from outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSerialNumberFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSerialNumberFromDeliveryItemPostWithHttpInfo($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['deleteSerialNumberFromDeliveryItemPost'][0])
    {
        $request = $this->deleteSerialNumberFromDeliveryItemPostRequest($delivery_document, $delivery_document_item, $serial_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSerialNumberFromDeliveryItemPostAsync
     *
     * Deletes serial number from outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSerialNumberFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSerialNumberFromDeliveryItemPostAsync($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['deleteSerialNumberFromDeliveryItemPost'][0])
    {
        return $this->deleteSerialNumberFromDeliveryItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $serial_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSerialNumberFromDeliveryItemPostAsyncWithHttpInfo
     *
     * Deletes serial number from outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSerialNumberFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSerialNumberFromDeliveryItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['deleteSerialNumberFromDeliveryItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->deleteSerialNumberFromDeliveryItemPostRequest($delivery_document, $delivery_document_item, $serial_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSerialNumberFromDeliveryItemPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $serial_number Serial Number   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSerialNumberFromDeliveryItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSerialNumberFromDeliveryItemPostRequest($delivery_document, $delivery_document_item, $serial_number, string $contentType = self::contentTypes['deleteSerialNumberFromDeliveryItemPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling deleteSerialNumberFromDeliveryItemPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.deleteSerialNumberFromDeliveryItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.deleteSerialNumberFromDeliveryItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling deleteSerialNumberFromDeliveryItemPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryHeadersApi.deleteSerialNumberFromDeliveryItemPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryHeadersApi.deleteSerialNumberFromDeliveryItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null || (is_array($serial_number) && count($serial_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling deleteSerialNumberFromDeliveryItemPost'
            );
        }
        if (strlen($serial_number) > 20) {
            throw new \InvalidArgumentException('invalid length for "$serial_number" when calling OutboundDeliveryHeadersApi.deleteSerialNumberFromDeliveryItemPost, must be smaller than or equal to 20.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $serial_number)) {
            throw new \InvalidArgumentException("invalid value for \"serial_number\" when calling OutboundDeliveryHeadersApi.deleteSerialNumberFromDeliveryItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/DeleteSerialNumberFromDeliveryItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serial_number,
            'SerialNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pickAllItemsPost
     *
     * Takes over delivery quantity as picked quantity for all outbound delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAllItemsPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function pickAllItemsPost($delivery_document, string $contentType = self::contentTypes['pickAllItemsPost'][0])
    {
        list($response) = $this->pickAllItemsPostWithHttpInfo($delivery_document, $contentType);
        return $response;
    }

    /**
     * Operation pickAllItemsPostWithHttpInfo
     *
     * Takes over delivery quantity as picked quantity for all outbound delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAllItemsPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function pickAllItemsPostWithHttpInfo($delivery_document, string $contentType = self::contentTypes['pickAllItemsPost'][0])
    {
        $request = $this->pickAllItemsPostRequest($delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation pickAllItemsPostAsync
     *
     * Takes over delivery quantity as picked quantity for all outbound delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickAllItemsPostAsync($delivery_document, string $contentType = self::contentTypes['pickAllItemsPost'][0])
    {
        return $this->pickAllItemsPostAsyncWithHttpInfo($delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pickAllItemsPostAsyncWithHttpInfo
     *
     * Takes over delivery quantity as picked quantity for all outbound delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickAllItemsPostAsyncWithHttpInfo($delivery_document, string $contentType = self::contentTypes['pickAllItemsPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->pickAllItemsPostRequest($delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pickAllItemsPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pickAllItemsPostRequest($delivery_document, string $contentType = self::contentTypes['pickAllItemsPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling pickAllItemsPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.pickAllItemsPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.pickAllItemsPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PickAllItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pickAndBatchSplitOneItemPost
     *
     * Performs batch split and sets picked quantity.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $split_quantity Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $split_quantity_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAndBatchSplitOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function pickAndBatchSplitOneItemPost($delivery_document, $delivery_document_item, $batch, $split_quantity, $split_quantity_unit, string $contentType = self::contentTypes['pickAndBatchSplitOneItemPost'][0])
    {
        list($response) = $this->pickAndBatchSplitOneItemPostWithHttpInfo($delivery_document, $delivery_document_item, $batch, $split_quantity, $split_quantity_unit, $contentType);
        return $response;
    }

    /**
     * Operation pickAndBatchSplitOneItemPostWithHttpInfo
     *
     * Performs batch split and sets picked quantity.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $split_quantity Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $split_quantity_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAndBatchSplitOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function pickAndBatchSplitOneItemPostWithHttpInfo($delivery_document, $delivery_document_item, $batch, $split_quantity, $split_quantity_unit, string $contentType = self::contentTypes['pickAndBatchSplitOneItemPost'][0])
    {
        $request = $this->pickAndBatchSplitOneItemPostRequest($delivery_document, $delivery_document_item, $batch, $split_quantity, $split_quantity_unit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation pickAndBatchSplitOneItemPostAsync
     *
     * Performs batch split and sets picked quantity.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $split_quantity Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $split_quantity_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAndBatchSplitOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickAndBatchSplitOneItemPostAsync($delivery_document, $delivery_document_item, $batch, $split_quantity, $split_quantity_unit, string $contentType = self::contentTypes['pickAndBatchSplitOneItemPost'][0])
    {
        return $this->pickAndBatchSplitOneItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $batch, $split_quantity, $split_quantity_unit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pickAndBatchSplitOneItemPostAsyncWithHttpInfo
     *
     * Performs batch split and sets picked quantity.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $split_quantity Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $split_quantity_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAndBatchSplitOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickAndBatchSplitOneItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $batch, $split_quantity, $split_quantity_unit, string $contentType = self::contentTypes['pickAndBatchSplitOneItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->pickAndBatchSplitOneItemPostRequest($delivery_document, $delivery_document_item, $batch, $split_quantity, $split_quantity_unit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pickAndBatchSplitOneItemPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $split_quantity Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $split_quantity_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickAndBatchSplitOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pickAndBatchSplitOneItemPostRequest($delivery_document, $delivery_document_item, $batch, $split_quantity, $split_quantity_unit, string $contentType = self::contentTypes['pickAndBatchSplitOneItemPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling pickAndBatchSplitOneItemPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.pickAndBatchSplitOneItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.pickAndBatchSplitOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling pickAndBatchSplitOneItemPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryHeadersApi.pickAndBatchSplitOneItemPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryHeadersApi.pickAndBatchSplitOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'batch' is set
        if ($batch === null || (is_array($batch) && count($batch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch when calling pickAndBatchSplitOneItemPost'
            );
        }
        if (strlen($batch) > 12) {
            throw new \InvalidArgumentException('invalid length for "$batch" when calling OutboundDeliveryHeadersApi.pickAndBatchSplitOneItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $batch)) {
            throw new \InvalidArgumentException("invalid value for \"batch\" when calling OutboundDeliveryHeadersApi.pickAndBatchSplitOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'split_quantity' is set
        if ($split_quantity === null || (is_array($split_quantity) && count($split_quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $split_quantity when calling pickAndBatchSplitOneItemPost'
            );
        }
        if (!preg_match("/^[-]?[0-9]+(\\.[0-9]+)?[mM]$/", $split_quantity)) {
            throw new \InvalidArgumentException("invalid value for \"split_quantity\" when calling OutboundDeliveryHeadersApi.pickAndBatchSplitOneItemPost, must conform to the pattern /^[-]?[0-9]+(\\.[0-9]+)?[mM]$/.");
        }
        
        // verify the required parameter 'split_quantity_unit' is set
        if ($split_quantity_unit === null || (is_array($split_quantity_unit) && count($split_quantity_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $split_quantity_unit when calling pickAndBatchSplitOneItemPost'
            );
        }
        if (strlen($split_quantity_unit) > 5) {
            throw new \InvalidArgumentException('invalid length for "$split_quantity_unit" when calling OutboundDeliveryHeadersApi.pickAndBatchSplitOneItemPost, must be smaller than or equal to 5.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $split_quantity_unit)) {
            throw new \InvalidArgumentException("invalid value for \"split_quantity_unit\" when calling OutboundDeliveryHeadersApi.pickAndBatchSplitOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PickAndBatchSplitOneItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $batch,
            'Batch', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $split_quantity,
            'SplitQuantity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $split_quantity_unit,
            'SplitQuantityUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pickOneItemPost
     *
     * Takes over delivery quantity as picked quantity for specified outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function pickOneItemPost($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['pickOneItemPost'][0])
    {
        list($response) = $this->pickOneItemPostWithHttpInfo($delivery_document, $delivery_document_item, $contentType);
        return $response;
    }

    /**
     * Operation pickOneItemPostWithHttpInfo
     *
     * Takes over delivery quantity as picked quantity for specified outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function pickOneItemPostWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['pickOneItemPost'][0])
    {
        $request = $this->pickOneItemPostRequest($delivery_document, $delivery_document_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation pickOneItemPostAsync
     *
     * Takes over delivery quantity as picked quantity for specified outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickOneItemPostAsync($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['pickOneItemPost'][0])
    {
        return $this->pickOneItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pickOneItemPostAsyncWithHttpInfo
     *
     * Takes over delivery quantity as picked quantity for specified outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickOneItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['pickOneItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->pickOneItemPostRequest($delivery_document, $delivery_document_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pickOneItemPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pickOneItemPostRequest($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['pickOneItemPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling pickOneItemPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.pickOneItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.pickOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling pickOneItemPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryHeadersApi.pickOneItemPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryHeadersApi.pickOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PickOneItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pickOneItemWithBaseQuantityPost
     *
     * Sets picked quantity and delivery quantity for outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function pickOneItemWithBaseQuantityPost($delivery_document, $delivery_document_item, $actual_delivered_qty_in_base_unit, $base_unit, string $contentType = self::contentTypes['pickOneItemWithBaseQuantityPost'][0])
    {
        list($response) = $this->pickOneItemWithBaseQuantityPostWithHttpInfo($delivery_document, $delivery_document_item, $actual_delivered_qty_in_base_unit, $base_unit, $contentType);
        return $response;
    }

    /**
     * Operation pickOneItemWithBaseQuantityPostWithHttpInfo
     *
     * Sets picked quantity and delivery quantity for outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function pickOneItemWithBaseQuantityPostWithHttpInfo($delivery_document, $delivery_document_item, $actual_delivered_qty_in_base_unit, $base_unit, string $contentType = self::contentTypes['pickOneItemWithBaseQuantityPost'][0])
    {
        $request = $this->pickOneItemWithBaseQuantityPostRequest($delivery_document, $delivery_document_item, $actual_delivered_qty_in_base_unit, $base_unit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation pickOneItemWithBaseQuantityPostAsync
     *
     * Sets picked quantity and delivery quantity for outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickOneItemWithBaseQuantityPostAsync($delivery_document, $delivery_document_item, $actual_delivered_qty_in_base_unit, $base_unit, string $contentType = self::contentTypes['pickOneItemWithBaseQuantityPost'][0])
    {
        return $this->pickOneItemWithBaseQuantityPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $actual_delivered_qty_in_base_unit, $base_unit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pickOneItemWithBaseQuantityPostAsyncWithHttpInfo
     *
     * Sets picked quantity and delivery quantity for outbound delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickOneItemWithBaseQuantityPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $actual_delivered_qty_in_base_unit, $base_unit, string $contentType = self::contentTypes['pickOneItemWithBaseQuantityPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->pickOneItemWithBaseQuantityPostRequest($delivery_document, $delivery_document_item, $actual_delivered_qty_in_base_unit, $base_unit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pickOneItemWithBaseQuantityPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pickOneItemWithBaseQuantityPostRequest($delivery_document, $delivery_document_item, $actual_delivered_qty_in_base_unit, $base_unit, string $contentType = self::contentTypes['pickOneItemWithBaseQuantityPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling pickOneItemWithBaseQuantityPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.pickOneItemWithBaseQuantityPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.pickOneItemWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling pickOneItemWithBaseQuantityPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryHeadersApi.pickOneItemWithBaseQuantityPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryHeadersApi.pickOneItemWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'actual_delivered_qty_in_base_unit' is set
        if ($actual_delivered_qty_in_base_unit === null || (is_array($actual_delivered_qty_in_base_unit) && count($actual_delivered_qty_in_base_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actual_delivered_qty_in_base_unit when calling pickOneItemWithBaseQuantityPost'
            );
        }
        if (!preg_match("/^[-]?[0-9]+(\\.[0-9]+)?[mM]$/", $actual_delivered_qty_in_base_unit)) {
            throw new \InvalidArgumentException("invalid value for \"actual_delivered_qty_in_base_unit\" when calling OutboundDeliveryHeadersApi.pickOneItemWithBaseQuantityPost, must conform to the pattern /^[-]?[0-9]+(\\.[0-9]+)?[mM]$/.");
        }
        
        // verify the required parameter 'base_unit' is set
        if ($base_unit === null || (is_array($base_unit) && count($base_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_unit when calling pickOneItemWithBaseQuantityPost'
            );
        }
        if (strlen($base_unit) > 5) {
            throw new \InvalidArgumentException('invalid length for "$base_unit" when calling OutboundDeliveryHeadersApi.pickOneItemWithBaseQuantityPost, must be smaller than or equal to 5.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $base_unit)) {
            throw new \InvalidArgumentException("invalid value for \"base_unit\" when calling OutboundDeliveryHeadersApi.pickOneItemWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PickOneItemWithBaseQuantity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_delivered_qty_in_base_unit,
            'ActualDeliveredQtyInBaseUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_unit,
            'BaseUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pickOneItemWithSalesQuantityPost
     *
     * Sets picked quantity and delivery quantity for outbound delivery item.
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function pickOneItemWithSalesQuantityPost($actual_delivery_quantity, $delivery_document, $delivery_document_item, $delivery_quantity_unit, string $contentType = self::contentTypes['pickOneItemWithSalesQuantityPost'][0])
    {
        list($response) = $this->pickOneItemWithSalesQuantityPostWithHttpInfo($actual_delivery_quantity, $delivery_document, $delivery_document_item, $delivery_quantity_unit, $contentType);
        return $response;
    }

    /**
     * Operation pickOneItemWithSalesQuantityPostWithHttpInfo
     *
     * Sets picked quantity and delivery quantity for outbound delivery item.
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function pickOneItemWithSalesQuantityPostWithHttpInfo($actual_delivery_quantity, $delivery_document, $delivery_document_item, $delivery_quantity_unit, string $contentType = self::contentTypes['pickOneItemWithSalesQuantityPost'][0])
    {
        $request = $this->pickOneItemWithSalesQuantityPostRequest($actual_delivery_quantity, $delivery_document, $delivery_document_item, $delivery_quantity_unit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation pickOneItemWithSalesQuantityPostAsync
     *
     * Sets picked quantity and delivery quantity for outbound delivery item.
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickOneItemWithSalesQuantityPostAsync($actual_delivery_quantity, $delivery_document, $delivery_document_item, $delivery_quantity_unit, string $contentType = self::contentTypes['pickOneItemWithSalesQuantityPost'][0])
    {
        return $this->pickOneItemWithSalesQuantityPostAsyncWithHttpInfo($actual_delivery_quantity, $delivery_document, $delivery_document_item, $delivery_quantity_unit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pickOneItemWithSalesQuantityPostAsyncWithHttpInfo
     *
     * Sets picked quantity and delivery quantity for outbound delivery item.
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pickOneItemWithSalesQuantityPostAsyncWithHttpInfo($actual_delivery_quantity, $delivery_document, $delivery_document_item, $delivery_quantity_unit, string $contentType = self::contentTypes['pickOneItemWithSalesQuantityPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->pickOneItemWithSalesQuantityPostRequest($actual_delivery_quantity, $delivery_document, $delivery_document_item, $delivery_quantity_unit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pickOneItemWithSalesQuantityPost'
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pickOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pickOneItemWithSalesQuantityPostRequest($actual_delivery_quantity, $delivery_document, $delivery_document_item, $delivery_quantity_unit, string $contentType = self::contentTypes['pickOneItemWithSalesQuantityPost'][0])
    {

        // verify the required parameter 'actual_delivery_quantity' is set
        if ($actual_delivery_quantity === null || (is_array($actual_delivery_quantity) && count($actual_delivery_quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actual_delivery_quantity when calling pickOneItemWithSalesQuantityPost'
            );
        }
        if (!preg_match("/^[-]?[0-9]+(\\.[0-9]+)?[mM]$/", $actual_delivery_quantity)) {
            throw new \InvalidArgumentException("invalid value for \"actual_delivery_quantity\" when calling OutboundDeliveryHeadersApi.pickOneItemWithSalesQuantityPost, must conform to the pattern /^[-]?[0-9]+(\\.[0-9]+)?[mM]$/.");
        }
        
        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling pickOneItemWithSalesQuantityPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.pickOneItemWithSalesQuantityPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.pickOneItemWithSalesQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling pickOneItemWithSalesQuantityPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryHeadersApi.pickOneItemWithSalesQuantityPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryHeadersApi.pickOneItemWithSalesQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_quantity_unit' is set
        if ($delivery_quantity_unit === null || (is_array($delivery_quantity_unit) && count($delivery_quantity_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_quantity_unit when calling pickOneItemWithSalesQuantityPost'
            );
        }
        if (strlen($delivery_quantity_unit) > 5) {
            throw new \InvalidArgumentException('invalid length for "$delivery_quantity_unit" when calling OutboundDeliveryHeadersApi.pickOneItemWithSalesQuantityPost, must be smaller than or equal to 5.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_quantity_unit)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_quantity_unit\" when calling OutboundDeliveryHeadersApi.pickOneItemWithSalesQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PickOneItemWithSalesQuantity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_delivery_quantity,
            'ActualDeliveryQuantity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_quantity_unit,
            'DeliveryQuantityUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postGoodsIssuePost
     *
     * Posts goods issue for outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function postGoodsIssuePost($delivery_document, string $contentType = self::contentTypes['postGoodsIssuePost'][0])
    {
        list($response) = $this->postGoodsIssuePostWithHttpInfo($delivery_document, $contentType);
        return $response;
    }

    /**
     * Operation postGoodsIssuePostWithHttpInfo
     *
     * Posts goods issue for outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGoodsIssuePostWithHttpInfo($delivery_document, string $contentType = self::contentTypes['postGoodsIssuePost'][0])
    {
        $request = $this->postGoodsIssuePostRequest($delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation postGoodsIssuePostAsync
     *
     * Posts goods issue for outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGoodsIssuePostAsync($delivery_document, string $contentType = self::contentTypes['postGoodsIssuePost'][0])
    {
        return $this->postGoodsIssuePostAsyncWithHttpInfo($delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postGoodsIssuePostAsyncWithHttpInfo
     *
     * Posts goods issue for outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGoodsIssuePostAsyncWithHttpInfo($delivery_document, string $contentType = self::contentTypes['postGoodsIssuePost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->postGoodsIssuePostRequest($delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postGoodsIssuePost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postGoodsIssuePostRequest($delivery_document, string $contentType = self::contentTypes['postGoodsIssuePost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling postGoodsIssuePost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.postGoodsIssuePost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.postGoodsIssuePost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PostGoodsIssue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reverseGoodsIssuePost
     *
     * Reverses goods issue for outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper10|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function reverseGoodsIssuePost($delivery_document, $actual_goods_movement_date, string $contentType = self::contentTypes['reverseGoodsIssuePost'][0])
    {
        list($response) = $this->reverseGoodsIssuePostWithHttpInfo($delivery_document, $actual_goods_movement_date, $contentType);
        return $response;
    }

    /**
     * Operation reverseGoodsIssuePostWithHttpInfo
     *
     * Reverses goods issue for outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper10|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function reverseGoodsIssuePostWithHttpInfo($delivery_document, $actual_goods_movement_date, string $contentType = self::contentTypes['reverseGoodsIssuePost'][0])
    {
        $request = $this->reverseGoodsIssuePostRequest($delivery_document, $actual_goods_movement_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper10' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper10' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper10', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper10';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper10',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation reverseGoodsIssuePostAsync
     *
     * Reverses goods issue for outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseGoodsIssuePostAsync($delivery_document, $actual_goods_movement_date, string $contentType = self::contentTypes['reverseGoodsIssuePost'][0])
    {
        return $this->reverseGoodsIssuePostAsyncWithHttpInfo($delivery_document, $actual_goods_movement_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reverseGoodsIssuePostAsyncWithHttpInfo
     *
     * Reverses goods issue for outbound delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseGoodsIssuePostAsyncWithHttpInfo($delivery_document, $actual_goods_movement_date, string $contentType = self::contentTypes['reverseGoodsIssuePost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper10';
        $request = $this->reverseGoodsIssuePostRequest($delivery_document, $actual_goods_movement_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reverseGoodsIssuePost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsIssuePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reverseGoodsIssuePostRequest($delivery_document, $actual_goods_movement_date, string $contentType = self::contentTypes['reverseGoodsIssuePost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling reverseGoodsIssuePost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.reverseGoodsIssuePost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.reverseGoodsIssuePost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'actual_goods_movement_date' is set
        if ($actual_goods_movement_date === null || (is_array($actual_goods_movement_date) && count($actual_goods_movement_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actual_goods_movement_date when calling reverseGoodsIssuePost'
            );
        }
        if (!preg_match("/^datetime'[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00'$/", $actual_goods_movement_date)) {
            throw new \InvalidArgumentException("invalid value for \"actual_goods_movement_date\" when calling OutboundDeliveryHeadersApi.reverseGoodsIssuePost, must conform to the pattern /^datetime'[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00'$/.");
        }
        

        $resourcePath = '/ReverseGoodsIssue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_goods_movement_date,
            'ActualGoodsMovementDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPickingQuantityWithBaseQuantityPost
     *
     * Sets picked quantity in base unit of measure for  delivery item.
     *
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPickingQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function setPickingQuantityWithBaseQuantityPost($actual_delivered_qty_in_base_unit, $base_unit, $delivery_document, $delivery_document_item, string $contentType = self::contentTypes['setPickingQuantityWithBaseQuantityPost'][0])
    {
        list($response) = $this->setPickingQuantityWithBaseQuantityPostWithHttpInfo($actual_delivered_qty_in_base_unit, $base_unit, $delivery_document, $delivery_document_item, $contentType);
        return $response;
    }

    /**
     * Operation setPickingQuantityWithBaseQuantityPostWithHttpInfo
     *
     * Sets picked quantity in base unit of measure for  delivery item.
     *
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPickingQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper9|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPickingQuantityWithBaseQuantityPostWithHttpInfo($actual_delivered_qty_in_base_unit, $base_unit, $delivery_document, $delivery_document_item, string $contentType = self::contentTypes['setPickingQuantityWithBaseQuantityPost'][0])
    {
        $request = $this->setPickingQuantityWithBaseQuantityPostRequest($actual_delivered_qty_in_base_unit, $base_unit, $delivery_document, $delivery_document_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper9' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation setPickingQuantityWithBaseQuantityPostAsync
     *
     * Sets picked quantity in base unit of measure for  delivery item.
     *
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPickingQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPickingQuantityWithBaseQuantityPostAsync($actual_delivered_qty_in_base_unit, $base_unit, $delivery_document, $delivery_document_item, string $contentType = self::contentTypes['setPickingQuantityWithBaseQuantityPost'][0])
    {
        return $this->setPickingQuantityWithBaseQuantityPostAsyncWithHttpInfo($actual_delivered_qty_in_base_unit, $base_unit, $delivery_document, $delivery_document_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPickingQuantityWithBaseQuantityPostAsyncWithHttpInfo
     *
     * Sets picked quantity in base unit of measure for  delivery item.
     *
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPickingQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPickingQuantityWithBaseQuantityPostAsyncWithHttpInfo($actual_delivered_qty_in_base_unit, $base_unit, $delivery_document, $delivery_document_item, string $contentType = self::contentTypes['setPickingQuantityWithBaseQuantityPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper9';
        $request = $this->setPickingQuantityWithBaseQuantityPostRequest($actual_delivered_qty_in_base_unit, $base_unit, $delivery_document, $delivery_document_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPickingQuantityWithBaseQuantityPost'
     *
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPickingQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setPickingQuantityWithBaseQuantityPostRequest($actual_delivered_qty_in_base_unit, $base_unit, $delivery_document, $delivery_document_item, string $contentType = self::contentTypes['setPickingQuantityWithBaseQuantityPost'][0])
    {

        // verify the required parameter 'actual_delivered_qty_in_base_unit' is set
        if ($actual_delivered_qty_in_base_unit === null || (is_array($actual_delivered_qty_in_base_unit) && count($actual_delivered_qty_in_base_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actual_delivered_qty_in_base_unit when calling setPickingQuantityWithBaseQuantityPost'
            );
        }
        if (!preg_match("/^[-]?[0-9]+(\\.[0-9]+)?[mM]$/", $actual_delivered_qty_in_base_unit)) {
            throw new \InvalidArgumentException("invalid value for \"actual_delivered_qty_in_base_unit\" when calling OutboundDeliveryHeadersApi.setPickingQuantityWithBaseQuantityPost, must conform to the pattern /^[-]?[0-9]+(\\.[0-9]+)?[mM]$/.");
        }
        
        // verify the required parameter 'base_unit' is set
        if ($base_unit === null || (is_array($base_unit) && count($base_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_unit when calling setPickingQuantityWithBaseQuantityPost'
            );
        }
        if (strlen($base_unit) > 5) {
            throw new \InvalidArgumentException('invalid length for "$base_unit" when calling OutboundDeliveryHeadersApi.setPickingQuantityWithBaseQuantityPost, must be smaller than or equal to 5.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $base_unit)) {
            throw new \InvalidArgumentException("invalid value for \"base_unit\" when calling OutboundDeliveryHeadersApi.setPickingQuantityWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling setPickingQuantityWithBaseQuantityPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryHeadersApi.setPickingQuantityWithBaseQuantityPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryHeadersApi.setPickingQuantityWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling setPickingQuantityWithBaseQuantityPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryHeadersApi.setPickingQuantityWithBaseQuantityPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryHeadersApi.setPickingQuantityWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/SetPickingQuantityWithBaseQuantity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_delivered_qty_in_base_unit,
            'ActualDeliveredQtyInBaseUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_unit,
            'BaseUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
