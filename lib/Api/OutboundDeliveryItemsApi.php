<?php
/**
 * OutboundDeliveryItemsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Outbound Delivery (A2X)
 *
 * This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\OutboundDelivery\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\OutboundDelivery\ApiException;
use BeLenka\SAP\OutboundDelivery\Configuration;
use BeLenka\SAP\OutboundDelivery\HeaderSelector;
use BeLenka\SAP\OutboundDelivery\ObjectSerializer;

/**
 * OutboundDeliveryItemsApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\OutboundDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OutboundDeliveryItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet' => [
            'application/json',
        ],
        'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete' => [
            'application/json',
        ],
        'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet' => [
            'application/json',
        ],
        'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch' => [
            'application/json',
        ],
        'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet' => [
            'application/json',
        ],
        'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost' => [
            'application/json',
        ],
        'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet' => [
            'application/json',
        ],
        'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet' => [
            'application/json',
        ],
        'aOutbDeliveryItemGet' => [
            'application/json',
        ],
        'createBatchSplitItemPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet
     *
     * Reads items of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper1|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        list($response) = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetWithHttpInfo($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetWithHttpInfo
     *
     * Reads items of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper1|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetWithHttpInfo($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetRequest($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsync
     *
     * Reads items of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsync($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        return $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsyncWithHttpInfo($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsyncWithHttpInfo
     *
     * Reads items of specific outbound delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsyncWithHttpInfo($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1';
        $request = $this->aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetRequest($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetRequest($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryItemsApi.aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling OutboundDeliveryItemsApi.aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling OutboundDeliveryItemsApi.aOutbDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet, must be bigger than or equal to 0.');
        }
        



        
        
        

        $resourcePath = '/A_OutbDeliveryHeader(\'{DeliveryDocument}\')/to_DeliveryDocumentItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete
     *
     * Deletes outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'][0])
    {
        $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteWithHttpInfo($delivery_document, $delivery_document_item, $contentType);
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteWithHttpInfo
     *
     * Deletes outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'][0])
    {
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteRequest($delivery_document, $delivery_document_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteAsync
     *
     * Deletes outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteAsync($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'][0])
    {
        return $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteAsyncWithHttpInfo($delivery_document, $delivery_document_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteAsyncWithHttpInfo
     *
     * Deletes outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteAsyncWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'][0])
    {
        $returnType = '';
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteRequest($delivery_document, $delivery_document_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDeleteRequest($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete'
            );
        }
        if (strlen($delivery_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemDelete, must be smaller than or equal to 6.');
        }
        

        $resourcePath = '/A_OutbDeliveryItem(DeliveryDocument=\'{DeliveryDocument}\',DeliveryDocumentItem=\'{DeliveryDocumentItem}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }
        // path params
        if ($delivery_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocumentItem' . '}',
                ObjectSerializer::toPathValue($delivery_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet
     *
     * Reads outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemType|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'][0])
    {
        list($response) = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetWithHttpInfo($delivery_document, $delivery_document_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetWithHttpInfo
     *
     * Reads outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemType|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetWithHttpInfo($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'][0])
    {
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetRequest($delivery_document, $delivery_document_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetAsync
     *
     * Reads outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetAsync($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'][0])
    {
        return $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetAsyncWithHttpInfo($delivery_document, $delivery_document_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetAsyncWithHttpInfo
     *
     * Reads outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetAsyncWithHttpInfo($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemType';
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetRequest($delivery_document, $delivery_document_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGetRequest($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet'
            );
        }
        if (strlen($delivery_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemGet, must be smaller than or equal to 6.');
        }
        
        
        

        $resourcePath = '/A_OutbDeliveryItem(DeliveryDocument=\'{DeliveryDocument}\',DeliveryDocumentItem=\'{DeliveryDocumentItem}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }
        // path params
        if ($delivery_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocumentItem' . '}',
                ObjectSerializer::toPathValue($delivery_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch
     *
     * Updates outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryItemType $modified_a_outb_delivery_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch($delivery_document, $delivery_document_item, $modified_a_outb_delivery_item_type, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'][0])
    {
        $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchWithHttpInfo($delivery_document, $delivery_document_item, $modified_a_outb_delivery_item_type, $contentType);
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchWithHttpInfo
     *
     * Updates outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryItemType $modified_a_outb_delivery_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchWithHttpInfo($delivery_document, $delivery_document_item, $modified_a_outb_delivery_item_type, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'][0])
    {
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchRequest($delivery_document, $delivery_document_item, $modified_a_outb_delivery_item_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchAsync
     *
     * Updates outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryItemType $modified_a_outb_delivery_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchAsync($delivery_document, $delivery_document_item, $modified_a_outb_delivery_item_type, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'][0])
    {
        return $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchAsyncWithHttpInfo($delivery_document, $delivery_document_item, $modified_a_outb_delivery_item_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchAsyncWithHttpInfo
     *
     * Updates outbound delivery items.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryItemType $modified_a_outb_delivery_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchAsyncWithHttpInfo($delivery_document, $delivery_document_item, $modified_a_outb_delivery_item_type, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'][0])
    {
        $returnType = '';
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchRequest($delivery_document, $delivery_document_item, $modified_a_outb_delivery_item_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\ModifiedAOutbDeliveryItemType $modified_a_outb_delivery_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatchRequest($delivery_document, $delivery_document_item, $modified_a_outb_delivery_item_type, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'
            );
        }
        if (strlen($delivery_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'modified_a_outb_delivery_item_type' is set
        if ($modified_a_outb_delivery_item_type === null || (is_array($modified_a_outb_delivery_item_type) && count($modified_a_outb_delivery_item_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_outb_delivery_item_type when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemPatch'
            );
        }


        $resourcePath = '/A_OutbDeliveryItem(DeliveryDocument=\'{DeliveryDocument}\',DeliveryDocumentItem=\'{DeliveryDocumentItem}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }
        // path params
        if ($delivery_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocumentItem' . '}',
                ObjectSerializer::toPathValue($delivery_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_outb_delivery_item_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_outb_delivery_item_type));
            } else {
                $httpBody = $modified_a_outb_delivery_item_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet
     *
     * Reads texts of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper3|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'][0])
    {
        list($response) = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetWithHttpInfo($delivery_document, $delivery_document_item, $filter, $inlinecount, $select, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetWithHttpInfo
     *
     * Reads texts of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper3|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetWithHttpInfo($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'][0])
    {
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetRequest($delivery_document, $delivery_document_item, $filter, $inlinecount, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper3' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper3' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper3', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper3';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetAsync
     *
     * Reads texts of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetAsync($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'][0])
    {
        return $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetAsyncWithHttpInfo($delivery_document, $delivery_document_item, $filter, $inlinecount, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetAsyncWithHttpInfo
     *
     * Reads texts of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetAsyncWithHttpInfo($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper3';
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetRequest($delivery_document, $delivery_document_item, $filter, $inlinecount, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGetRequest($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet'
            );
        }
        if (strlen($delivery_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextGet, must be smaller than or equal to 6.');
        }
        


        

        $resourcePath = '/A_OutbDeliveryItem(DeliveryDocument=\'{DeliveryDocument}\',DeliveryDocumentItem=\'{DeliveryDocumentItem}\')/to_DeliveryDocumentItemText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }
        // path params
        if ($delivery_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocumentItem' . '}',
                ObjectSerializer::toPathValue($delivery_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost
     *
     * Creates outbound delivery item texts.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTextTypeCreate $apioutbounddeliverysrva_outb_delivery_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemTextType|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost($delivery_document, $delivery_document_item, $apioutbounddeliverysrva_outb_delivery_item_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'][0])
    {
        list($response) = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostWithHttpInfo($delivery_document, $delivery_document_item, $apioutbounddeliverysrva_outb_delivery_item_text_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostWithHttpInfo
     *
     * Creates outbound delivery item texts.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTextTypeCreate $apioutbounddeliverysrva_outb_delivery_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemTextType|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostWithHttpInfo($delivery_document, $delivery_document_item, $apioutbounddeliverysrva_outb_delivery_item_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'][0])
    {
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostRequest($delivery_document, $delivery_document_item, $apioutbounddeliverysrva_outb_delivery_item_text_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostAsync
     *
     * Creates outbound delivery item texts.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTextTypeCreate $apioutbounddeliverysrva_outb_delivery_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostAsync($delivery_document, $delivery_document_item, $apioutbounddeliverysrva_outb_delivery_item_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'][0])
    {
        return $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $apioutbounddeliverysrva_outb_delivery_item_text_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostAsyncWithHttpInfo
     *
     * Creates outbound delivery item texts.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTextTypeCreate $apioutbounddeliverysrva_outb_delivery_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $apioutbounddeliverysrva_outb_delivery_item_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\AOutbDeliveryItemTextType';
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostRequest($delivery_document, $delivery_document_item, $apioutbounddeliverysrva_outb_delivery_item_text_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  \BeLenka\SAP\OutboundDelivery\Model\APIOUTBOUNDDELIVERYSRVAOutbDeliveryItemTextTypeCreate $apioutbounddeliverysrva_outb_delivery_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPostRequest($delivery_document, $delivery_document_item, $apioutbounddeliverysrva_outb_delivery_item_text_type_create, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'
            );
        }
        if (strlen($delivery_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'apioutbounddeliverysrva_outb_delivery_item_text_type_create' is set
        if ($apioutbounddeliverysrva_outb_delivery_item_text_type_create === null || (is_array($apioutbounddeliverysrva_outb_delivery_item_text_type_create) && count($apioutbounddeliverysrva_outb_delivery_item_text_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apioutbounddeliverysrva_outb_delivery_item_text_type_create when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDeliveryDocumentItemTextPost'
            );
        }


        $resourcePath = '/A_OutbDeliveryItem(DeliveryDocument=\'{DeliveryDocument}\',DeliveryDocumentItem=\'{DeliveryDocumentItem}\')/to_DeliveryDocumentItemText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }
        // path params
        if ($delivery_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocumentItem' . '}',
                ObjectSerializer::toPathValue($delivery_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apioutbounddeliverysrva_outb_delivery_item_text_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apioutbounddeliverysrva_outb_delivery_item_text_type_create));
            } else {
                $httpBody = $apioutbounddeliverysrva_outb_delivery_item_text_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet
     *
     * Reads document flows of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper2|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'][0])
    {
        list($response) = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetWithHttpInfo($delivery_document, $delivery_document_item, $filter, $inlinecount, $select, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetWithHttpInfo
     *
     * Reads document flows of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper2|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetWithHttpInfo($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'][0])
    {
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetRequest($delivery_document, $delivery_document_item, $filter, $inlinecount, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetAsync
     *
     * Reads document flows of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetAsync($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'][0])
    {
        return $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetAsyncWithHttpInfo($delivery_document, $delivery_document_item, $filter, $inlinecount, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetAsyncWithHttpInfo
     *
     * Reads document flows of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetAsyncWithHttpInfo($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper2';
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetRequest($delivery_document, $delivery_document_item, $filter, $inlinecount, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGetRequest($delivery_document, $delivery_document_item, $filter = null, $inlinecount = null, $select = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet'
            );
        }
        if (strlen($delivery_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToDocumentFlowGet, must be smaller than or equal to 6.');
        }
        


        

        $resourcePath = '/A_OutbDeliveryItem(DeliveryDocument=\'{DeliveryDocument}\',DeliveryDocumentItem=\'{DeliveryDocumentItem}\')/to_DocumentFlow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }
        // path params
        if ($delivery_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocumentItem' . '}',
                ObjectSerializer::toPathValue($delivery_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet
     *
     * Reads maintenance item object list headers of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\ASerialNmbrDeliveryType|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'][0])
    {
        list($response) = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetWithHttpInfo($delivery_document, $delivery_document_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetWithHttpInfo
     *
     * Reads maintenance item object list headers of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\ASerialNmbrDeliveryType|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetWithHttpInfo($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'][0])
    {
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetRequest($delivery_document, $delivery_document_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\ASerialNmbrDeliveryType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\ASerialNmbrDeliveryType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\ASerialNmbrDeliveryType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\ASerialNmbrDeliveryType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\ASerialNmbrDeliveryType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetAsync
     *
     * Reads maintenance item object list headers of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetAsync($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'][0])
    {
        return $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetAsyncWithHttpInfo($delivery_document, $delivery_document_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetAsyncWithHttpInfo
     *
     * Reads maintenance item object list headers of specific outbound delivery item.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetAsyncWithHttpInfo($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\ASerialNmbrDeliveryType';
        $request = $this->aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetRequest($delivery_document, $delivery_document_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $delivery_document_item Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGetRequest($delivery_document, $delivery_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet'
            );
        }
        if (strlen($delivery_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemDeliveryDocumentDeliveryDocumentDeliveryDocumentItemDeliveryDocumentItemToSerialDeliveryItemGet, must be smaller than or equal to 6.');
        }
        
        
        

        $resourcePath = '/A_OutbDeliveryItem(DeliveryDocument=\'{DeliveryDocument}\',DeliveryDocumentItem=\'{DeliveryDocumentItem}\')/to_SerialDeliveryItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }
        // path params
        if ($delivery_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocumentItem' . '}',
                ObjectSerializer::toPathValue($delivery_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aOutbDeliveryItemGet
     *
     * Reads outbound delivery items.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\Wrapper1|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function aOutbDeliveryItemGet($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemGet'][0])
    {
        list($response) = $this->aOutbDeliveryItemGetWithHttpInfo($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aOutbDeliveryItemGetWithHttpInfo
     *
     * Reads outbound delivery items.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\Wrapper1|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aOutbDeliveryItemGetWithHttpInfo($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemGet'][0])
    {
        $request = $this->aOutbDeliveryItemGetRequest($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aOutbDeliveryItemGetAsync
     *
     * Reads outbound delivery items.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemGetAsync($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemGet'][0])
    {
        return $this->aOutbDeliveryItemGetAsyncWithHttpInfo($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aOutbDeliveryItemGetAsyncWithHttpInfo
     *
     * Reads outbound delivery items.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aOutbDeliveryItemGetAsyncWithHttpInfo($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\Wrapper1';
        $request = $this->aOutbDeliveryItemGetRequest($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aOutbDeliveryItemGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aOutbDeliveryItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aOutbDeliveryItemGetRequest($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aOutbDeliveryItemGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling OutboundDeliveryItemsApi.aOutbDeliveryItemGet, must be bigger than or equal to 0.');
        }
        



        
        
        

        $resourcePath = '/A_OutbDeliveryItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBatchSplitItemPost
     *
     * Performs a batch split for the outbound delivery item.
     *
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivery_quantity Delivery Qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $pick_quantity_in_sales_uom Pick quantity   (Value needs to be suffixed with &#x60;M&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchSplitItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\OutboundDelivery\Model\CreatedDeliveryItem|\BeLenka\SAP\OutboundDelivery\Model\Error
     */
    public function createBatchSplitItemPost($batch, $delivery_document, $delivery_document_item, $actual_delivery_quantity, $delivery_quantity_unit, $pick_quantity_in_sales_uom = null, string $contentType = self::contentTypes['createBatchSplitItemPost'][0])
    {
        list($response) = $this->createBatchSplitItemPostWithHttpInfo($batch, $delivery_document, $delivery_document_item, $actual_delivery_quantity, $delivery_quantity_unit, $pick_quantity_in_sales_uom, $contentType);
        return $response;
    }

    /**
     * Operation createBatchSplitItemPostWithHttpInfo
     *
     * Performs a batch split for the outbound delivery item.
     *
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivery_quantity Delivery Qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $pick_quantity_in_sales_uom Pick quantity   (Value needs to be suffixed with &#x60;M&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchSplitItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\OutboundDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\OutboundDelivery\Model\CreatedDeliveryItem|\BeLenka\SAP\OutboundDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBatchSplitItemPostWithHttpInfo($batch, $delivery_document, $delivery_document_item, $actual_delivery_quantity, $delivery_quantity_unit, $pick_quantity_in_sales_uom = null, string $contentType = self::contentTypes['createBatchSplitItemPost'][0])
    {
        $request = $this->createBatchSplitItemPostRequest($batch, $delivery_document, $delivery_document_item, $actual_delivery_quantity, $delivery_quantity_unit, $pick_quantity_in_sales_uom, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\OutboundDelivery\Model\CreatedDeliveryItem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\OutboundDelivery\Model\CreatedDeliveryItem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\OutboundDelivery\Model\CreatedDeliveryItem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\OutboundDelivery\Model\CreatedDeliveryItem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\OutboundDelivery\Model\CreatedDeliveryItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation createBatchSplitItemPostAsync
     *
     * Performs a batch split for the outbound delivery item.
     *
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivery_quantity Delivery Qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $pick_quantity_in_sales_uom Pick quantity   (Value needs to be suffixed with &#x60;M&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchSplitItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBatchSplitItemPostAsync($batch, $delivery_document, $delivery_document_item, $actual_delivery_quantity, $delivery_quantity_unit, $pick_quantity_in_sales_uom = null, string $contentType = self::contentTypes['createBatchSplitItemPost'][0])
    {
        return $this->createBatchSplitItemPostAsyncWithHttpInfo($batch, $delivery_document, $delivery_document_item, $actual_delivery_quantity, $delivery_quantity_unit, $pick_quantity_in_sales_uom, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBatchSplitItemPostAsyncWithHttpInfo
     *
     * Performs a batch split for the outbound delivery item.
     *
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivery_quantity Delivery Qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $pick_quantity_in_sales_uom Pick quantity   (Value needs to be suffixed with &#x60;M&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchSplitItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBatchSplitItemPostAsyncWithHttpInfo($batch, $delivery_document, $delivery_document_item, $actual_delivery_quantity, $delivery_quantity_unit, $pick_quantity_in_sales_uom = null, string $contentType = self::contentTypes['createBatchSplitItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\OutboundDelivery\Model\CreatedDeliveryItem';
        $request = $this->createBatchSplitItemPostRequest($batch, $delivery_document, $delivery_document_item, $actual_delivery_quantity, $delivery_quantity_unit, $pick_quantity_in_sales_uom, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBatchSplitItemPost'
     *
     * @param  string $batch Batch   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivery_quantity Delivery Qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $pick_quantity_in_sales_uom Pick quantity   (Value needs to be suffixed with &#x60;M&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBatchSplitItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBatchSplitItemPostRequest($batch, $delivery_document, $delivery_document_item, $actual_delivery_quantity, $delivery_quantity_unit, $pick_quantity_in_sales_uom = null, string $contentType = self::contentTypes['createBatchSplitItemPost'][0])
    {

        // verify the required parameter 'batch' is set
        if ($batch === null || (is_array($batch) && count($batch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch when calling createBatchSplitItemPost'
            );
        }
        if (strlen($batch) > 12) {
            throw new \InvalidArgumentException('invalid length for "$batch" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $batch)) {
            throw new \InvalidArgumentException("invalid value for \"batch\" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling createBatchSplitItemPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling createBatchSplitItemPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'actual_delivery_quantity' is set
        if ($actual_delivery_quantity === null || (is_array($actual_delivery_quantity) && count($actual_delivery_quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actual_delivery_quantity when calling createBatchSplitItemPost'
            );
        }
        if (!preg_match("/^[-]?[0-9]+(\\.[0-9]+)?[mM]$/", $actual_delivery_quantity)) {
            throw new \InvalidArgumentException("invalid value for \"actual_delivery_quantity\" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must conform to the pattern /^[-]?[0-9]+(\\.[0-9]+)?[mM]$/.");
        }
        
        // verify the required parameter 'delivery_quantity_unit' is set
        if ($delivery_quantity_unit === null || (is_array($delivery_quantity_unit) && count($delivery_quantity_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_quantity_unit when calling createBatchSplitItemPost'
            );
        }
        if (strlen($delivery_quantity_unit) > 5) {
            throw new \InvalidArgumentException('invalid length for "$delivery_quantity_unit" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must be smaller than or equal to 5.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_quantity_unit)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_quantity_unit\" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        if ($pick_quantity_in_sales_uom !== null && !preg_match("/^[-]?[0-9]+(\\.[0-9]+)?[mM]$/", $pick_quantity_in_sales_uom)) {
            throw new \InvalidArgumentException("invalid value for \"pick_quantity_in_sales_uom\" when calling OutboundDeliveryItemsApi.createBatchSplitItemPost, must conform to the pattern /^[-]?[0-9]+(\\.[0-9]+)?[mM]$/.");
        }
        

        $resourcePath = '/CreateBatchSplitItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pick_quantity_in_sales_uom,
            'PickQuantityInSalesUOM', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $batch,
            'Batch', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_delivery_quantity,
            'ActualDeliveryQuantity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_quantity_unit,
            'DeliveryQuantityUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
